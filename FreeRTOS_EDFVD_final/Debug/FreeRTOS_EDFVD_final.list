
FreeRTOS_EDFVD_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004af4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08004c84  08004c84  00005c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cc8  08004cc8  00006018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004cc8  08004cc8  00005cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cd0  08004cd0  00006018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cd0  08004cd0  00005cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004cd4  08004cd4  00005cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08004cd8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006018  2**0
                  CONTENTS
 10 .bss          00003e18  20000018  20000018  00006018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003e30  20003e30  00006018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006018  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e47d  00000000  00000000  00006048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002671  00000000  00000000  000144c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ee8  00000000  00000000  00016b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b8b  00000000  00000000  00017a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000219d  00000000  00000000  000185ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f84b  00000000  00000000  0001a748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d01f7  00000000  00000000  00029f93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fa18a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e1c  00000000  00000000  000fa1d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009b  00000000  00000000  000fdfec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000018 	.word	0x20000018
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004c6c 	.word	0x08004c6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000001c 	.word	0x2000001c
 80001cc:	08004c6c 	.word	0x08004c6c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e4:	f000 b988 	b.w	80004f8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	468e      	mov	lr, r1
 8000208:	4604      	mov	r4, r0
 800020a:	4688      	mov	r8, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d962      	bls.n	80002dc <__udivmoddi4+0xdc>
 8000216:	fab2 f682 	clz	r6, r2
 800021a:	b14e      	cbz	r6, 8000230 <__udivmoddi4+0x30>
 800021c:	f1c6 0320 	rsb	r3, r6, #32
 8000220:	fa01 f806 	lsl.w	r8, r1, r6
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	40b7      	lsls	r7, r6
 800022a:	ea43 0808 	orr.w	r8, r3, r8
 800022e:	40b4      	lsls	r4, r6
 8000230:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000234:	fa1f fc87 	uxth.w	ip, r7
 8000238:	fbb8 f1fe 	udiv	r1, r8, lr
 800023c:	0c23      	lsrs	r3, r4, #16
 800023e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000242:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000246:	fb01 f20c 	mul.w	r2, r1, ip
 800024a:	429a      	cmp	r2, r3
 800024c:	d909      	bls.n	8000262 <__udivmoddi4+0x62>
 800024e:	18fb      	adds	r3, r7, r3
 8000250:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000254:	f080 80ea 	bcs.w	800042c <__udivmoddi4+0x22c>
 8000258:	429a      	cmp	r2, r3
 800025a:	f240 80e7 	bls.w	800042c <__udivmoddi4+0x22c>
 800025e:	3902      	subs	r1, #2
 8000260:	443b      	add	r3, r7
 8000262:	1a9a      	subs	r2, r3, r2
 8000264:	b2a3      	uxth	r3, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000272:	fb00 fc0c 	mul.w	ip, r0, ip
 8000276:	459c      	cmp	ip, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x8e>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000280:	f080 80d6 	bcs.w	8000430 <__udivmoddi4+0x230>
 8000284:	459c      	cmp	ip, r3
 8000286:	f240 80d3 	bls.w	8000430 <__udivmoddi4+0x230>
 800028a:	443b      	add	r3, r7
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000292:	eba3 030c 	sub.w	r3, r3, ip
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40f3      	lsrs	r3, r6
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xb6>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb0>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x14c>
 80002be:	4573      	cmp	r3, lr
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xc8>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 8105 	bhi.w	80004d2 <__udivmoddi4+0x2d2>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4690      	mov	r8, r2
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	d0e5      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002d6:	e9c5 4800 	strd	r4, r8, [r5]
 80002da:	e7e2      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	2a00      	cmp	r2, #0
 80002de:	f000 8090 	beq.w	8000402 <__udivmoddi4+0x202>
 80002e2:	fab2 f682 	clz	r6, r2
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	f040 80a4 	bne.w	8000434 <__udivmoddi4+0x234>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	0c03      	lsrs	r3, r0, #16
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	b280      	uxth	r0, r0
 80002f6:	b2bc      	uxth	r4, r7
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000306:	fb04 f20c 	mul.w	r2, r4, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d907      	bls.n	800031e <__udivmoddi4+0x11e>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x11c>
 8000316:	429a      	cmp	r2, r3
 8000318:	f200 80e0 	bhi.w	80004dc <__udivmoddi4+0x2dc>
 800031c:	46c4      	mov	ip, r8
 800031e:	1a9b      	subs	r3, r3, r2
 8000320:	fbb3 f2fe 	udiv	r2, r3, lr
 8000324:	fb0e 3312 	mls	r3, lr, r2, r3
 8000328:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800032c:	fb02 f404 	mul.w	r4, r2, r4
 8000330:	429c      	cmp	r4, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x144>
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x142>
 800033c:	429c      	cmp	r4, r3
 800033e:	f200 80ca 	bhi.w	80004d6 <__udivmoddi4+0x2d6>
 8000342:	4602      	mov	r2, r0
 8000344:	1b1b      	subs	r3, r3, r4
 8000346:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x98>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa0e f401 	lsl.w	r4, lr, r1
 800035c:	fa20 f306 	lsr.w	r3, r0, r6
 8000360:	fa2e fe06 	lsr.w	lr, lr, r6
 8000364:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000368:	4323      	orrs	r3, r4
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	fa1f fc87 	uxth.w	ip, r7
 8000372:	fbbe f0f9 	udiv	r0, lr, r9
 8000376:	0c1c      	lsrs	r4, r3, #16
 8000378:	fb09 ee10 	mls	lr, r9, r0, lr
 800037c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000380:	fb00 fe0c 	mul.w	lr, r0, ip
 8000384:	45a6      	cmp	lr, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x1a0>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000392:	f080 809c 	bcs.w	80004ce <__udivmoddi4+0x2ce>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f240 8099 	bls.w	80004ce <__udivmoddi4+0x2ce>
 800039c:	3802      	subs	r0, #2
 800039e:	443c      	add	r4, r7
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	fa1f fe83 	uxth.w	lr, r3
 80003a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ac:	fb09 4413 	mls	r4, r9, r3, r4
 80003b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b8:	45a4      	cmp	ip, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x1ce>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003c2:	f080 8082 	bcs.w	80004ca <__udivmoddi4+0x2ca>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d97f      	bls.n	80004ca <__udivmoddi4+0x2ca>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003da:	4564      	cmp	r4, ip
 80003dc:	4673      	mov	r3, lr
 80003de:	46e1      	mov	r9, ip
 80003e0:	d362      	bcc.n	80004a8 <__udivmoddi4+0x2a8>
 80003e2:	d05f      	beq.n	80004a4 <__udivmoddi4+0x2a4>
 80003e4:	b15d      	cbz	r5, 80003fe <__udivmoddi4+0x1fe>
 80003e6:	ebb8 0203 	subs.w	r2, r8, r3
 80003ea:	eb64 0409 	sbc.w	r4, r4, r9
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	fa22 f301 	lsr.w	r3, r2, r1
 80003f6:	431e      	orrs	r6, r3
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	e9c5 6400 	strd	r6, r4, [r5]
 80003fe:	2100      	movs	r1, #0
 8000400:	e74f      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000402:	fbb1 fcf2 	udiv	ip, r1, r2
 8000406:	0c01      	lsrs	r1, r0, #16
 8000408:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000412:	463b      	mov	r3, r7
 8000414:	4638      	mov	r0, r7
 8000416:	463c      	mov	r4, r7
 8000418:	46b8      	mov	r8, r7
 800041a:	46be      	mov	lr, r7
 800041c:	2620      	movs	r6, #32
 800041e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000422:	eba2 0208 	sub.w	r2, r2, r8
 8000426:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042a:	e766      	b.n	80002fa <__udivmoddi4+0xfa>
 800042c:	4601      	mov	r1, r0
 800042e:	e718      	b.n	8000262 <__udivmoddi4+0x62>
 8000430:	4610      	mov	r0, r2
 8000432:	e72c      	b.n	800028e <__udivmoddi4+0x8e>
 8000434:	f1c6 0220 	rsb	r2, r6, #32
 8000438:	fa2e f302 	lsr.w	r3, lr, r2
 800043c:	40b7      	lsls	r7, r6
 800043e:	40b1      	lsls	r1, r6
 8000440:	fa20 f202 	lsr.w	r2, r0, r2
 8000444:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000448:	430a      	orrs	r2, r1
 800044a:	fbb3 f8fe 	udiv	r8, r3, lr
 800044e:	b2bc      	uxth	r4, r7
 8000450:	fb0e 3318 	mls	r3, lr, r8, r3
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb08 f904 	mul.w	r9, r8, r4
 800045e:	40b0      	lsls	r0, r6
 8000460:	4589      	cmp	r9, r1
 8000462:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000466:	b280      	uxth	r0, r0
 8000468:	d93e      	bls.n	80004e8 <__udivmoddi4+0x2e8>
 800046a:	1879      	adds	r1, r7, r1
 800046c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000470:	d201      	bcs.n	8000476 <__udivmoddi4+0x276>
 8000472:	4589      	cmp	r9, r1
 8000474:	d81f      	bhi.n	80004b6 <__udivmoddi4+0x2b6>
 8000476:	eba1 0109 	sub.w	r1, r1, r9
 800047a:	fbb1 f9fe 	udiv	r9, r1, lr
 800047e:	fb09 f804 	mul.w	r8, r9, r4
 8000482:	fb0e 1119 	mls	r1, lr, r9, r1
 8000486:	b292      	uxth	r2, r2
 8000488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800048c:	4542      	cmp	r2, r8
 800048e:	d229      	bcs.n	80004e4 <__udivmoddi4+0x2e4>
 8000490:	18ba      	adds	r2, r7, r2
 8000492:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000496:	d2c4      	bcs.n	8000422 <__udivmoddi4+0x222>
 8000498:	4542      	cmp	r2, r8
 800049a:	d2c2      	bcs.n	8000422 <__udivmoddi4+0x222>
 800049c:	f1a9 0102 	sub.w	r1, r9, #2
 80004a0:	443a      	add	r2, r7
 80004a2:	e7be      	b.n	8000422 <__udivmoddi4+0x222>
 80004a4:	45f0      	cmp	r8, lr
 80004a6:	d29d      	bcs.n	80003e4 <__udivmoddi4+0x1e4>
 80004a8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b0:	3801      	subs	r0, #1
 80004b2:	46e1      	mov	r9, ip
 80004b4:	e796      	b.n	80003e4 <__udivmoddi4+0x1e4>
 80004b6:	eba7 0909 	sub.w	r9, r7, r9
 80004ba:	4449      	add	r1, r9
 80004bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c4:	fb09 f804 	mul.w	r8, r9, r4
 80004c8:	e7db      	b.n	8000482 <__udivmoddi4+0x282>
 80004ca:	4673      	mov	r3, lr
 80004cc:	e77f      	b.n	80003ce <__udivmoddi4+0x1ce>
 80004ce:	4650      	mov	r0, sl
 80004d0:	e766      	b.n	80003a0 <__udivmoddi4+0x1a0>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e6fd      	b.n	80002d2 <__udivmoddi4+0xd2>
 80004d6:	443b      	add	r3, r7
 80004d8:	3a02      	subs	r2, #2
 80004da:	e733      	b.n	8000344 <__udivmoddi4+0x144>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	443b      	add	r3, r7
 80004e2:	e71c      	b.n	800031e <__udivmoddi4+0x11e>
 80004e4:	4649      	mov	r1, r9
 80004e6:	e79c      	b.n	8000422 <__udivmoddi4+0x222>
 80004e8:	eba1 0109 	sub.w	r1, r1, r9
 80004ec:	46c4      	mov	ip, r8
 80004ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f2:	fb09 f804 	mul.w	r8, r9, r4
 80004f6:	e7c4      	b.n	8000482 <__udivmoddi4+0x282>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000502:	f000 fae1 	bl	8000ac8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000506:	f000 f855 	bl	80005b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050a:	f000 f901 	bl	8000710 <MX_GPIO_Init>
  MX_TIM3_Init();
 800050e:	f000 f8af 	bl	8000670 <MX_TIM3_Init>
  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  xPeriodicTaskEDFVDCreate(LedBlueTask,
 8000512:	2300      	movs	r3, #0
 8000514:	9305      	str	r3, [sp, #20]
 8000516:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800051a:	9304      	str	r3, [sp, #16]
 800051c:	23fa      	movs	r3, #250	@ 0xfa
 800051e:	9303      	str	r3, [sp, #12]
 8000520:	2301      	movs	r3, #1
 8000522:	9302      	str	r3, [sp, #8]
 8000524:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000528:	9301      	str	r3, [sp, #4]
 800052a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800052e:	9300      	str	r3, [sp, #0]
 8000530:	2300      	movs	r3, #0
 8000532:	2280      	movs	r2, #128	@ 0x80
 8000534:	4919      	ldr	r1, [pc, #100]	@ (800059c <main+0xa0>)
 8000536:	481a      	ldr	r0, [pc, #104]	@ (80005a0 <main+0xa4>)
 8000538:	f002 fbdf 	bl	8002cfa <xPeriodicTaskEDFVDCreate>
					  1,	// eCRITICALITY_HI
					  LED_BLUE_WCET_LO_MS,
					  LED_BLUE_WCET_HI_MS,
					  NULL);

  xPeriodicTaskEDFVDCreate(LedOrangeTask,
 800053c:	2300      	movs	r3, #0
 800053e:	9305      	str	r3, [sp, #20]
 8000540:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000544:	9304      	str	r3, [sp, #16]
 8000546:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800054a:	9303      	str	r3, [sp, #12]
 800054c:	2300      	movs	r3, #0
 800054e:	9302      	str	r3, [sp, #8]
 8000550:	f241 7370 	movw	r3, #6000	@ 0x1770
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	f241 7370 	movw	r3, #6000	@ 0x1770
 800055a:	9300      	str	r3, [sp, #0]
 800055c:	2300      	movs	r3, #0
 800055e:	2280      	movs	r2, #128	@ 0x80
 8000560:	4910      	ldr	r1, [pc, #64]	@ (80005a4 <main+0xa8>)
 8000562:	4811      	ldr	r0, [pc, #68]	@ (80005a8 <main+0xac>)
 8000564:	f002 fbc9 	bl	8002cfa <xPeriodicTaskEDFVDCreate>
					  0,	// eCRITICALITY_LO
					  LED_ORANGE_WCET_LO_MS,
					  LED_ORANGE_WCET_HI_MS,
					  NULL);

  xPeriodicTaskEDFVDCreate(LedRedTask,
 8000568:	2300      	movs	r3, #0
 800056a:	9305      	str	r3, [sp, #20]
 800056c:	f44f 6348 	mov.w	r3, #3200	@ 0xc80
 8000570:	9304      	str	r3, [sp, #16]
 8000572:	23c8      	movs	r3, #200	@ 0xc8
 8000574:	9303      	str	r3, [sp, #12]
 8000576:	2301      	movs	r3, #1
 8000578:	9302      	str	r3, [sp, #8]
 800057a:	f242 7310 	movw	r3, #10000	@ 0x2710
 800057e:	9301      	str	r3, [sp, #4]
 8000580:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000584:	9300      	str	r3, [sp, #0]
 8000586:	2300      	movs	r3, #0
 8000588:	2280      	movs	r2, #128	@ 0x80
 800058a:	4908      	ldr	r1, [pc, #32]	@ (80005ac <main+0xb0>)
 800058c:	4808      	ldr	r0, [pc, #32]	@ (80005b0 <main+0xb4>)
 800058e:	f002 fbb4 	bl	8002cfa <xPeriodicTaskEDFVDCreate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  vTaskStartScheduler();
 8000592:	f002 fdb1 	bl	80030f8 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000596:	bf00      	nop
 8000598:	e7fd      	b.n	8000596 <main+0x9a>
 800059a:	bf00      	nop
 800059c:	08004c84 	.word	0x08004c84
 80005a0:	080007a1 	.word	0x080007a1
 80005a4:	08004c8c 	.word	0x08004c8c
 80005a8:	08000835 	.word	0x08000835
 80005ac:	08004c98 	.word	0x08004c98
 80005b0:	08000899 	.word	0x08000899

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b094      	sub	sp, #80	@ 0x50
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 0320 	add.w	r3, r7, #32
 80005be:	2230      	movs	r2, #48	@ 0x30
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f004 fb18 	bl	8004bf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	f107 030c 	add.w	r3, r7, #12
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	4b22      	ldr	r3, [pc, #136]	@ (8000668 <SystemClock_Config+0xb4>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e0:	4a21      	ldr	r2, [pc, #132]	@ (8000668 <SystemClock_Config+0xb4>)
 80005e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000668 <SystemClock_Config+0xb4>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f4:	2300      	movs	r3, #0
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	4b1c      	ldr	r3, [pc, #112]	@ (800066c <SystemClock_Config+0xb8>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a1b      	ldr	r2, [pc, #108]	@ (800066c <SystemClock_Config+0xb8>)
 80005fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000602:	6013      	str	r3, [r2, #0]
 8000604:	4b19      	ldr	r3, [pc, #100]	@ (800066c <SystemClock_Config+0xb8>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000610:	2302      	movs	r3, #2
 8000612:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000614:	2301      	movs	r3, #1
 8000616:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000618:	2310      	movs	r3, #16
 800061a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800061c:	2300      	movs	r3, #0
 800061e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000620:	f107 0320 	add.w	r3, r7, #32
 8000624:	4618      	mov	r0, r3
 8000626:	f000 fda3 	bl	8001170 <HAL_RCC_OscConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000630:	f000 f96c 	bl	800090c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000634:	230f      	movs	r3, #15
 8000636:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000638:	2300      	movs	r3, #0
 800063a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f001 f806 	bl	8001660 <HAL_RCC_ClockConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800065a:	f000 f957 	bl	800090c <Error_Handler>
  }
}
 800065e:	bf00      	nop
 8000660:	3750      	adds	r7, #80	@ 0x50
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40023800 	.word	0x40023800
 800066c:	40007000 	.word	0x40007000

08000670 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000676:	f107 0308 	add.w	r3, r7, #8
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000684:	463b      	mov	r3, r7
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800068c:	4b1d      	ldr	r3, [pc, #116]	@ (8000704 <MX_TIM3_Init+0x94>)
 800068e:	4a1e      	ldr	r2, [pc, #120]	@ (8000708 <MX_TIM3_Init+0x98>)
 8000690:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 168000 - 1;	// 168 MHz / (167999+1) = 1 kHz tick
 8000692:	4b1c      	ldr	r3, [pc, #112]	@ (8000704 <MX_TIM3_Init+0x94>)
 8000694:	4a1d      	ldr	r2, [pc, #116]	@ (800070c <MX_TIM3_Init+0x9c>)
 8000696:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000698:	4b1a      	ldr	r3, [pc, #104]	@ (8000704 <MX_TIM3_Init+0x94>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500 - 1;		// 500 ticks a 1 ms = 500 ms
 800069e:	4b19      	ldr	r3, [pc, #100]	@ (8000704 <MX_TIM3_Init+0x94>)
 80006a0:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80006a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006a6:	4b17      	ldr	r3, [pc, #92]	@ (8000704 <MX_TIM3_Init+0x94>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ac:	4b15      	ldr	r3, [pc, #84]	@ (8000704 <MX_TIM3_Init+0x94>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006b2:	4814      	ldr	r0, [pc, #80]	@ (8000704 <MX_TIM3_Init+0x94>)
 80006b4:	f001 f980 	bl	80019b8 <HAL_TIM_Base_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80006be:	f000 f925 	bl	800090c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006c8:	f107 0308 	add.w	r3, r7, #8
 80006cc:	4619      	mov	r1, r3
 80006ce:	480d      	ldr	r0, [pc, #52]	@ (8000704 <MX_TIM3_Init+0x94>)
 80006d0:	f001 fab1 	bl	8001c36 <HAL_TIM_ConfigClockSource>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80006da:	f000 f917 	bl	800090c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006de:	2300      	movs	r3, #0
 80006e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006e6:	463b      	mov	r3, r7
 80006e8:	4619      	mov	r1, r3
 80006ea:	4806      	ldr	r0, [pc, #24]	@ (8000704 <MX_TIM3_Init+0x94>)
 80006ec:	f001 fcd2 	bl	8002094 <HAL_TIMEx_MasterConfigSynchronization>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80006f6:	f000 f909 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80006fa:	bf00      	nop
 80006fc:	3718      	adds	r7, #24
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000034 	.word	0x20000034
 8000708:	40000400 	.word	0x40000400
 800070c:	0002903f 	.word	0x0002903f

08000710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000724:	2300      	movs	r3, #0
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	4b11      	ldr	r3, [pc, #68]	@ (8000770 <MX_GPIO_Init+0x60>)
 800072a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072c:	4a10      	ldr	r2, [pc, #64]	@ (8000770 <MX_GPIO_Init+0x60>)
 800072e:	f043 0308 	orr.w	r3, r3, #8
 8000732:	6313      	str	r3, [r2, #48]	@ 0x30
 8000734:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <MX_GPIO_Init+0x60>)
 8000736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000738:	f003 0308 	and.w	r3, r3, #8
 800073c:	603b      	str	r3, [r7, #0]
 800073e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000746:	480b      	ldr	r0, [pc, #44]	@ (8000774 <MX_GPIO_Init+0x64>)
 8000748:	f000 fcde 	bl	8001108 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800074c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000750:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000752:	2301      	movs	r3, #1
 8000754:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800075a:	2302      	movs	r3, #2
 800075c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	4619      	mov	r1, r3
 8000762:	4804      	ldr	r0, [pc, #16]	@ (8000774 <MX_GPIO_Init+0x64>)
 8000764:	f000 fb34 	bl	8000dd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000768:	bf00      	nop
 800076a:	3718      	adds	r7, #24
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40023800 	.word	0x40023800
 8000774:	40020c00 	.word	0x40020c00

08000778 <vApplicationIdleHook>:

/* USER CODE BEGIN 4 */
/* Idle Hook called at every Idle Task cycle */
void vApplicationIdleHook( void )
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
	/* Toggle the Green LED only if it is the first execution of the idle
	 * task after the execution of another task's job.
	 */
	if(xIdleToggleAllowed == pdTRUE)
 800077c:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <vApplicationIdleHook+0x20>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b01      	cmp	r3, #1
 8000782:	d107      	bne.n	8000794 <vApplicationIdleHook+0x1c>
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000784:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000788:	4804      	ldr	r0, [pc, #16]	@ (800079c <vApplicationIdleHook+0x24>)
 800078a:	f000 fcd6 	bl	800113a <HAL_GPIO_TogglePin>
		xIdleToggleAllowed = pdFALSE;
 800078e:	4b02      	ldr	r3, [pc, #8]	@ (8000798 <vApplicationIdleHook+0x20>)
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
	}
}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000000 	.word	0x20000000
 800079c:	40020c00 	.word	0x40020c00

080007a0 <LedBlueTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_LedBlueTask */
void LedBlueTask(void *argument)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	TickType_t xLastWakeTimeBlue = LED_BLUE_START_MS;
 80007a8:	2301      	movs	r3, #1
 80007aa:	60fb      	str	r3, [r7, #12]
	TickType_t xWCET = LED_BLUE_WCET_LO_MS;
 80007ac:	23fa      	movs	r3, #250	@ 0xfa
 80007ae:	617b      	str	r3, [r7, #20]
	{
		/* If the previous running task was the idle task, update the variable.
		 * In this way, if the idle task starts running again, it will toggle
		 * the Green LED.
		 */
		if(xIdleToggleAllowed == pdFALSE)
 80007b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000824 <LedBlueTask+0x84>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d102      	bne.n	80007be <LedBlueTask+0x1e>
		{
			xIdleToggleAllowed = pdTRUE;
 80007b8:	4b1a      	ldr	r3, [pc, #104]	@ (8000824 <LedBlueTask+0x84>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	601a      	str	r2, [r3, #0]
		}

		/* Turn on the Blue LED. */
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80007be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007c2:	4819      	ldr	r0, [pc, #100]	@ (8000828 <LedBlueTask+0x88>)
 80007c4:	f000 fcb9 	bl	800113a <HAL_GPIO_TogglePin>

		TickType_t xStart = xTaskGetTickCount();
 80007c8:	f002 fdce 	bl	8003368 <xTaskGetTickCount>
 80007cc:	6138      	str	r0, [r7, #16]

		/* Using the variables usCounterPeriods and usPeriodsBeforeSwitch
		 * simulate the condition for a mode switch.
		 */
		if(usCounterPeriods < usPeriodsBeforeSwitch)
 80007ce:	4b17      	ldr	r3, [pc, #92]	@ (800082c <LedBlueTask+0x8c>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	4b16      	ldr	r3, [pc, #88]	@ (8000830 <LedBlueTask+0x90>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	429a      	cmp	r2, r3
 80007dc:	d209      	bcs.n	80007f2 <LedBlueTask+0x52>
		{
			usCounterPeriods++;
 80007de:	4b13      	ldr	r3, [pc, #76]	@ (800082c <LedBlueTask+0x8c>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	3301      	adds	r3, #1
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	4b10      	ldr	r3, [pc, #64]	@ (800082c <LedBlueTask+0x8c>)
 80007ea:	701a      	strb	r2, [r3, #0]
			xWCET = LED_BLUE_WCET_LO_MS;
 80007ec:	23fa      	movs	r3, #250	@ 0xfa
 80007ee:	617b      	str	r3, [r7, #20]
 80007f0:	e002      	b.n	80007f8 <LedBlueTask+0x58>
		}
		else
		{
			xWCET = LED_BLUE_WCET_HI_MS;
 80007f2:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80007f6:	617b      	str	r3, [r7, #20]
		}

		/* Busy wait to simulate the task's job execution time. */
		while ((xTaskGetTickCount() - xStart) < xWCET)
 80007f8:	bf00      	nop
 80007fa:	f002 fdb5 	bl	8003368 <xTaskGetTickCount>
 80007fe:	4602      	mov	r2, r0
 8000800:	693b      	ldr	r3, [r7, #16]
 8000802:	1ad3      	subs	r3, r2, r3
 8000804:	697a      	ldr	r2, [r7, #20]
 8000806:	429a      	cmp	r2, r3
 8000808:	d8f7      	bhi.n	80007fa <LedBlueTask+0x5a>
		{
			// LedBlueTask keep working
		}

		/* Turn off the Blue LED. */
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800080a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800080e:	4806      	ldr	r0, [pc, #24]	@ (8000828 <LedBlueTask+0x88>)
 8000810:	f000 fc93 	bl	800113a <HAL_GPIO_TogglePin>

		/* Put the task on hold until the next job is periodically released. */
		vTaskDelayUntil(&xLastWakeTimeBlue, LED_BLUE_PERIOD_MS);
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	f241 3188 	movw	r1, #5000	@ 0x1388
 800081c:	4618      	mov	r0, r3
 800081e:	f002 fbb7 	bl	8002f90 <vTaskDelayUntil>
	{
 8000822:	e7c5      	b.n	80007b0 <LedBlueTask+0x10>
 8000824:	20000000 	.word	0x20000000
 8000828:	40020c00 	.word	0x40020c00
 800082c:	2000007c 	.word	0x2000007c
 8000830:	20000004 	.word	0x20000004

08000834 <LedOrangeTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_LedOrangeTask */
void LedOrangeTask(void *argument)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 6 */
	TickType_t xLastWakeTimeOrange = LED_ORANGE_START_MS;
 800083c:	2301      	movs	r3, #1
 800083e:	60fb      	str	r3, [r7, #12]
	{
		/* If the previous running task was the idle task, update the variable.
		 * In this way, if the idle task starts running again, it will toggle
		 * the Green LED.
		 */
		if(xIdleToggleAllowed == pdFALSE)
 8000840:	4b13      	ldr	r3, [pc, #76]	@ (8000890 <LedOrangeTask+0x5c>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d102      	bne.n	800084e <LedOrangeTask+0x1a>
		{
			xIdleToggleAllowed = pdTRUE;
 8000848:	4b11      	ldr	r3, [pc, #68]	@ (8000890 <LedOrangeTask+0x5c>)
 800084a:	2201      	movs	r2, #1
 800084c:	601a      	str	r2, [r3, #0]
		}

		/* Turn on the Orange LED. */
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800084e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000852:	4810      	ldr	r0, [pc, #64]	@ (8000894 <LedOrangeTask+0x60>)
 8000854:	f000 fc71 	bl	800113a <HAL_GPIO_TogglePin>

		TickType_t xStart = xTaskGetTickCount();
 8000858:	f002 fd86 	bl	8003368 <xTaskGetTickCount>
 800085c:	6178      	str	r0, [r7, #20]
		TickType_t xWCET = LED_ORANGE_WCET_LO_MS;
 800085e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000862:	613b      	str	r3, [r7, #16]

		/* Busy wait to simulate the task's job execution time. */
		while ((xTaskGetTickCount() - xStart) < xWCET)
 8000864:	bf00      	nop
 8000866:	f002 fd7f 	bl	8003368 <xTaskGetTickCount>
 800086a:	4602      	mov	r2, r0
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	1ad3      	subs	r3, r2, r3
 8000870:	693a      	ldr	r2, [r7, #16]
 8000872:	429a      	cmp	r2, r3
 8000874:	d8f7      	bhi.n	8000866 <LedOrangeTask+0x32>
		{
			// LedOrangeTask keep working
		}

		/* Turn off the Orange LED. */
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000876:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800087a:	4806      	ldr	r0, [pc, #24]	@ (8000894 <LedOrangeTask+0x60>)
 800087c:	f000 fc5d 	bl	800113a <HAL_GPIO_TogglePin>

		/* Put the task on hold until the next job is periodically released. */
		vTaskDelayUntil(&xLastWakeTimeOrange, LED_ORANGE_PERIOD_MS);
 8000880:	f107 030c 	add.w	r3, r7, #12
 8000884:	f241 7170 	movw	r1, #6000	@ 0x1770
 8000888:	4618      	mov	r0, r3
 800088a:	f002 fb81 	bl	8002f90 <vTaskDelayUntil>
	{
 800088e:	e7d7      	b.n	8000840 <LedOrangeTask+0xc>
 8000890:	20000000 	.word	0x20000000
 8000894:	40020c00 	.word	0x40020c00

08000898 <LedRedTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_LedRedTask */
void LedRedTask(void *argument)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 7 */
	TickType_t xLastWakeTimeRed = LED_RED_START_MS;
 80008a0:	2301      	movs	r3, #1
 80008a2:	60fb      	str	r3, [r7, #12]
	{
		/* If the previous running task was the idle task, update the variable.
		 * In this way, if the idle task starts running again, it will toggle
		 * the Green LED.
		 */
		if(xIdleToggleAllowed == pdFALSE)
 80008a4:	4b16      	ldr	r3, [pc, #88]	@ (8000900 <LedRedTask+0x68>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d102      	bne.n	80008b2 <LedRedTask+0x1a>
		{
			xIdleToggleAllowed = pdTRUE;
 80008ac:	4b14      	ldr	r3, [pc, #80]	@ (8000900 <LedRedTask+0x68>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	601a      	str	r2, [r3, #0]
		}

		/* Turn on the Red LED. */
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80008b2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008b6:	4813      	ldr	r0, [pc, #76]	@ (8000904 <LedRedTask+0x6c>)
 80008b8:	f000 fc3f 	bl	800113a <HAL_GPIO_TogglePin>

		TickType_t xStart = xTaskGetTickCount();
 80008bc:	f002 fd54 	bl	8003368 <xTaskGetTickCount>
 80008c0:	6178      	str	r0, [r7, #20]
		TickType_t xWCET = (xEDFVD_ModeHI == pdFALSE) ? LED_RED_WCET_LO_MS : LED_RED_WCET_HI_MS;
 80008c2:	4b11      	ldr	r3, [pc, #68]	@ (8000908 <LedRedTask+0x70>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d101      	bne.n	80008ce <LedRedTask+0x36>
 80008ca:	23c8      	movs	r3, #200	@ 0xc8
 80008cc:	e001      	b.n	80008d2 <LedRedTask+0x3a>
 80008ce:	f44f 6348 	mov.w	r3, #3200	@ 0xc80
 80008d2:	613b      	str	r3, [r7, #16]

		/* Busy wait to simulate the task's job execution time. */
		while ((xTaskGetTickCount() - xStart) < xWCET)
 80008d4:	bf00      	nop
 80008d6:	f002 fd47 	bl	8003368 <xTaskGetTickCount>
 80008da:	4602      	mov	r2, r0
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	1ad3      	subs	r3, r2, r3
 80008e0:	693a      	ldr	r2, [r7, #16]
 80008e2:	429a      	cmp	r2, r3
 80008e4:	d8f7      	bhi.n	80008d6 <LedRedTask+0x3e>
		{
			// LedRedTask keep working
		}

		/* Turn off the Red LED. */
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80008e6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008ea:	4806      	ldr	r0, [pc, #24]	@ (8000904 <LedRedTask+0x6c>)
 80008ec:	f000 fc25 	bl	800113a <HAL_GPIO_TogglePin>

		/* Put the task on hold until the next job is periodically released. */
		vTaskDelayUntil(&xLastWakeTimeRed, LED_RED_PERIOD_MS);
 80008f0:	f107 030c 	add.w	r3, r7, #12
 80008f4:	f242 7110 	movw	r1, #10000	@ 0x2710
 80008f8:	4618      	mov	r0, r3
 80008fa:	f002 fb49 	bl	8002f90 <vTaskDelayUntil>
	{
 80008fe:	e7d1      	b.n	80008a4 <LedRedTask+0xc>
 8000900:	20000000 	.word	0x20000000
 8000904:	40020c00 	.word	0x40020c00
 8000908:	200000c8 	.word	0x200000c8

0800090c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000910:	b672      	cpsid	i
}
 8000912:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000914:	bf00      	nop
 8000916:	e7fd      	b.n	8000914 <Error_Handler+0x8>

08000918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	4b12      	ldr	r3, [pc, #72]	@ (800096c <HAL_MspInit+0x54>)
 8000924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000926:	4a11      	ldr	r2, [pc, #68]	@ (800096c <HAL_MspInit+0x54>)
 8000928:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800092c:	6453      	str	r3, [r2, #68]	@ 0x44
 800092e:	4b0f      	ldr	r3, [pc, #60]	@ (800096c <HAL_MspInit+0x54>)
 8000930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000932:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	603b      	str	r3, [r7, #0]
 800093e:	4b0b      	ldr	r3, [pc, #44]	@ (800096c <HAL_MspInit+0x54>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000942:	4a0a      	ldr	r2, [pc, #40]	@ (800096c <HAL_MspInit+0x54>)
 8000944:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000948:	6413      	str	r3, [r2, #64]	@ 0x40
 800094a:	4b08      	ldr	r3, [pc, #32]	@ (800096c <HAL_MspInit+0x54>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000956:	2200      	movs	r2, #0
 8000958:	210f      	movs	r1, #15
 800095a:	f06f 0001 	mvn.w	r0, #1
 800095e:	f000 fa00 	bl	8000d62 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40023800 	.word	0x40023800

08000970 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a0e      	ldr	r2, [pc, #56]	@ (80009b8 <HAL_TIM_Base_MspInit+0x48>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d115      	bne.n	80009ae <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	4b0d      	ldr	r3, [pc, #52]	@ (80009bc <HAL_TIM_Base_MspInit+0x4c>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800098a:	4a0c      	ldr	r2, [pc, #48]	@ (80009bc <HAL_TIM_Base_MspInit+0x4c>)
 800098c:	f043 0302 	orr.w	r3, r3, #2
 8000990:	6413      	str	r3, [r2, #64]	@ 0x40
 8000992:	4b0a      	ldr	r3, [pc, #40]	@ (80009bc <HAL_TIM_Base_MspInit+0x4c>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000996:	f003 0302 	and.w	r3, r3, #2
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2105      	movs	r1, #5
 80009a2:	201d      	movs	r0, #29
 80009a4:	f000 f9dd 	bl	8000d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80009a8:	201d      	movs	r0, #29
 80009aa:	f000 f9f6 	bl	8000d9a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80009ae:	bf00      	nop
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40000400 	.word	0x40000400
 80009bc:	40023800 	.word	0x40023800

080009c0 <HAL_TIM_PeriodElapsedCallback>:

}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM3)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a05      	ldr	r2, [pc, #20]	@ (80009e4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d104      	bne.n	80009dc <HAL_TIM_PeriodElapsedCallback+0x1c>
    {
        /* Toggle of the Red reference LED */
        HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80009d2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009d6:	4804      	ldr	r0, [pc, #16]	@ (80009e8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80009d8:	f000 fbaf 	bl	800113a <HAL_GPIO_TogglePin>
    }
}
 80009dc:	bf00      	nop
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40000400 	.word	0x40000400
 80009e8:	40020c00 	.word	0x40020c00

080009ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <NMI_Handler+0x4>

080009f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <HardFault_Handler+0x4>

080009fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <MemManage_Handler+0x4>

08000a04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <BusFault_Handler+0x4>

08000a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <UsageFault_Handler+0x4>

08000a14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a26:	f000 f8a1 	bl	8000b6c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a2a:	f002 ff53 	bl	80038d4 <xTaskGetSchedulerState>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d001      	beq.n	8000a38 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a34:	f003 fe60 	bl	80046f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000a40:	4802      	ldr	r0, [pc, #8]	@ (8000a4c <TIM3_IRQHandler+0x10>)
 8000a42:	f001 f808 	bl	8001a56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000034 	.word	0x20000034

08000a50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a54:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <SystemInit+0x20>)
 8000a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a5a:	4a05      	ldr	r2, [pc, #20]	@ (8000a70 <SystemInit+0x20>)
 8000a5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000aac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a78:	f7ff ffea 	bl	8000a50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a7c:	480c      	ldr	r0, [pc, #48]	@ (8000ab0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a7e:	490d      	ldr	r1, [pc, #52]	@ (8000ab4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a80:	4a0d      	ldr	r2, [pc, #52]	@ (8000ab8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a84:	e002      	b.n	8000a8c <LoopCopyDataInit>

08000a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a8a:	3304      	adds	r3, #4

08000a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a90:	d3f9      	bcc.n	8000a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a92:	4a0a      	ldr	r2, [pc, #40]	@ (8000abc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a94:	4c0a      	ldr	r4, [pc, #40]	@ (8000ac0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a98:	e001      	b.n	8000a9e <LoopFillZerobss>

08000a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a9c:	3204      	adds	r2, #4

08000a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa0:	d3fb      	bcc.n	8000a9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aa2:	f004 f8b1 	bl	8004c08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aa6:	f7ff fd29 	bl	80004fc <main>
  bx  lr    
 8000aaa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000aac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab4:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000ab8:	08004cd8 	.word	0x08004cd8
  ldr r2, =_sbss
 8000abc:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000ac0:	20003e30 	.word	0x20003e30

08000ac4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ac4:	e7fe      	b.n	8000ac4 <ADC_IRQHandler>
	...

08000ac8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000acc:	4b0e      	ldr	r3, [pc, #56]	@ (8000b08 <HAL_Init+0x40>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a0d      	ldr	r2, [pc, #52]	@ (8000b08 <HAL_Init+0x40>)
 8000ad2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ad6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8000b08 <HAL_Init+0x40>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a0a      	ldr	r2, [pc, #40]	@ (8000b08 <HAL_Init+0x40>)
 8000ade:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ae2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae4:	4b08      	ldr	r3, [pc, #32]	@ (8000b08 <HAL_Init+0x40>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a07      	ldr	r2, [pc, #28]	@ (8000b08 <HAL_Init+0x40>)
 8000aea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000aee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af0:	2003      	movs	r0, #3
 8000af2:	f000 f92b 	bl	8000d4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000af6:	200f      	movs	r0, #15
 8000af8:	f000 f808 	bl	8000b0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000afc:	f7ff ff0c 	bl	8000918 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40023c00 	.word	0x40023c00

08000b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b14:	4b12      	ldr	r3, [pc, #72]	@ (8000b60 <HAL_InitTick+0x54>)
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	4b12      	ldr	r3, [pc, #72]	@ (8000b64 <HAL_InitTick+0x58>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f000 f943 	bl	8000db6 <HAL_SYSTICK_Config>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	e00e      	b.n	8000b58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2b0f      	cmp	r3, #15
 8000b3e:	d80a      	bhi.n	8000b56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b40:	2200      	movs	r2, #0
 8000b42:	6879      	ldr	r1, [r7, #4]
 8000b44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b48:	f000 f90b 	bl	8000d62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b4c:	4a06      	ldr	r2, [pc, #24]	@ (8000b68 <HAL_InitTick+0x5c>)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b52:	2300      	movs	r3, #0
 8000b54:	e000      	b.n	8000b58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000008 	.word	0x20000008
 8000b64:	20000010 	.word	0x20000010
 8000b68:	2000000c 	.word	0x2000000c

08000b6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b70:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <HAL_IncTick+0x20>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	461a      	mov	r2, r3
 8000b76:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <HAL_IncTick+0x24>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	4a04      	ldr	r2, [pc, #16]	@ (8000b90 <HAL_IncTick+0x24>)
 8000b7e:	6013      	str	r3, [r2, #0]
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	20000010 	.word	0x20000010
 8000b90:	20000080 	.word	0x20000080

08000b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return uwTick;
 8000b98:	4b03      	ldr	r3, [pc, #12]	@ (8000ba8 <HAL_GetTick+0x14>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	20000080 	.word	0x20000080

08000bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc2:	68ba      	ldr	r2, [r7, #8]
 8000bc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bc8:	4013      	ands	r3, r2
 8000bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bde:	4a04      	ldr	r2, [pc, #16]	@ (8000bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	60d3      	str	r3, [r2, #12]
}
 8000be4:	bf00      	nop
 8000be6:	3714      	adds	r7, #20
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf8:	4b04      	ldr	r3, [pc, #16]	@ (8000c0c <__NVIC_GetPriorityGrouping+0x18>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	0a1b      	lsrs	r3, r3, #8
 8000bfe:	f003 0307 	and.w	r3, r3, #7
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	db0b      	blt.n	8000c3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	f003 021f 	and.w	r2, r3, #31
 8000c28:	4907      	ldr	r1, [pc, #28]	@ (8000c48 <__NVIC_EnableIRQ+0x38>)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	095b      	lsrs	r3, r3, #5
 8000c30:	2001      	movs	r0, #1
 8000c32:	fa00 f202 	lsl.w	r2, r0, r2
 8000c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000e100 	.word	0xe000e100

08000c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	6039      	str	r1, [r7, #0]
 8000c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	db0a      	blt.n	8000c76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	490c      	ldr	r1, [pc, #48]	@ (8000c98 <__NVIC_SetPriority+0x4c>)
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	0112      	lsls	r2, r2, #4
 8000c6c:	b2d2      	uxtb	r2, r2
 8000c6e:	440b      	add	r3, r1
 8000c70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c74:	e00a      	b.n	8000c8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	4908      	ldr	r1, [pc, #32]	@ (8000c9c <__NVIC_SetPriority+0x50>)
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	f003 030f 	and.w	r3, r3, #15
 8000c82:	3b04      	subs	r3, #4
 8000c84:	0112      	lsls	r2, r2, #4
 8000c86:	b2d2      	uxtb	r2, r2
 8000c88:	440b      	add	r3, r1
 8000c8a:	761a      	strb	r2, [r3, #24]
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	e000e100 	.word	0xe000e100
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b089      	sub	sp, #36	@ 0x24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	f1c3 0307 	rsb	r3, r3, #7
 8000cba:	2b04      	cmp	r3, #4
 8000cbc:	bf28      	it	cs
 8000cbe:	2304      	movcs	r3, #4
 8000cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3304      	adds	r3, #4
 8000cc6:	2b06      	cmp	r3, #6
 8000cc8:	d902      	bls.n	8000cd0 <NVIC_EncodePriority+0x30>
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	3b03      	subs	r3, #3
 8000cce:	e000      	b.n	8000cd2 <NVIC_EncodePriority+0x32>
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43da      	mvns	r2, r3
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	401a      	ands	r2, r3
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf2:	43d9      	mvns	r1, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf8:	4313      	orrs	r3, r2
         );
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3724      	adds	r7, #36	@ 0x24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
	...

08000d08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d18:	d301      	bcc.n	8000d1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e00f      	b.n	8000d3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d48 <SysTick_Config+0x40>)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3b01      	subs	r3, #1
 8000d24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d26:	210f      	movs	r1, #15
 8000d28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d2c:	f7ff ff8e 	bl	8000c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d30:	4b05      	ldr	r3, [pc, #20]	@ (8000d48 <SysTick_Config+0x40>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d36:	4b04      	ldr	r3, [pc, #16]	@ (8000d48 <SysTick_Config+0x40>)
 8000d38:	2207      	movs	r2, #7
 8000d3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	e000e010 	.word	0xe000e010

08000d4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f7ff ff29 	bl	8000bac <__NVIC_SetPriorityGrouping>
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b086      	sub	sp, #24
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	4603      	mov	r3, r0
 8000d6a:	60b9      	str	r1, [r7, #8]
 8000d6c:	607a      	str	r2, [r7, #4]
 8000d6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d74:	f7ff ff3e 	bl	8000bf4 <__NVIC_GetPriorityGrouping>
 8000d78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	68b9      	ldr	r1, [r7, #8]
 8000d7e:	6978      	ldr	r0, [r7, #20]
 8000d80:	f7ff ff8e 	bl	8000ca0 <NVIC_EncodePriority>
 8000d84:	4602      	mov	r2, r0
 8000d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d8a:	4611      	mov	r1, r2
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ff5d 	bl	8000c4c <__NVIC_SetPriority>
}
 8000d92:	bf00      	nop
 8000d94:	3718      	adds	r7, #24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	4603      	mov	r3, r0
 8000da2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff ff31 	bl	8000c10 <__NVIC_EnableIRQ>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff ffa2 	bl	8000d08 <SysTick_Config>
 8000dc4:	4603      	mov	r3, r0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b089      	sub	sp, #36	@ 0x24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dde:	2300      	movs	r3, #0
 8000de0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]
 8000dea:	e16b      	b.n	80010c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dec:	2201      	movs	r2, #1
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	697a      	ldr	r2, [r7, #20]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	f040 815a 	bne.w	80010be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f003 0303 	and.w	r3, r3, #3
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d005      	beq.n	8000e22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d130      	bne.n	8000e84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	43db      	mvns	r3, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4013      	ands	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	68da      	ldr	r2, [r3, #12]
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e58:	2201      	movs	r2, #1
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	43db      	mvns	r3, r3
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4013      	ands	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	091b      	lsrs	r3, r3, #4
 8000e6e:	f003 0201 	and.w	r2, r3, #1
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f003 0303 	and.w	r3, r3, #3
 8000e8c:	2b03      	cmp	r3, #3
 8000e8e:	d017      	beq.n	8000ec0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	2203      	movs	r2, #3
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	689a      	ldr	r2, [r3, #8]
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f003 0303 	and.w	r3, r3, #3
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d123      	bne.n	8000f14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	08da      	lsrs	r2, r3, #3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3208      	adds	r2, #8
 8000ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	f003 0307 	and.w	r3, r3, #7
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	220f      	movs	r2, #15
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4013      	ands	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	691a      	ldr	r2, [r3, #16]
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	08da      	lsrs	r2, r3, #3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	3208      	adds	r2, #8
 8000f0e:	69b9      	ldr	r1, [r7, #24]
 8000f10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	2203      	movs	r2, #3
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 0203 	and.w	r2, r3, #3
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	f000 80b4 	beq.w	80010be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	4b60      	ldr	r3, [pc, #384]	@ (80010dc <HAL_GPIO_Init+0x30c>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f5e:	4a5f      	ldr	r2, [pc, #380]	@ (80010dc <HAL_GPIO_Init+0x30c>)
 8000f60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f64:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f66:	4b5d      	ldr	r3, [pc, #372]	@ (80010dc <HAL_GPIO_Init+0x30c>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f72:	4a5b      	ldr	r2, [pc, #364]	@ (80010e0 <HAL_GPIO_Init+0x310>)
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	089b      	lsrs	r3, r3, #2
 8000f78:	3302      	adds	r3, #2
 8000f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	f003 0303 	and.w	r3, r3, #3
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	220f      	movs	r2, #15
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4013      	ands	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a52      	ldr	r2, [pc, #328]	@ (80010e4 <HAL_GPIO_Init+0x314>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d02b      	beq.n	8000ff6 <HAL_GPIO_Init+0x226>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a51      	ldr	r2, [pc, #324]	@ (80010e8 <HAL_GPIO_Init+0x318>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d025      	beq.n	8000ff2 <HAL_GPIO_Init+0x222>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a50      	ldr	r2, [pc, #320]	@ (80010ec <HAL_GPIO_Init+0x31c>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d01f      	beq.n	8000fee <HAL_GPIO_Init+0x21e>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a4f      	ldr	r2, [pc, #316]	@ (80010f0 <HAL_GPIO_Init+0x320>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d019      	beq.n	8000fea <HAL_GPIO_Init+0x21a>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a4e      	ldr	r2, [pc, #312]	@ (80010f4 <HAL_GPIO_Init+0x324>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d013      	beq.n	8000fe6 <HAL_GPIO_Init+0x216>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a4d      	ldr	r2, [pc, #308]	@ (80010f8 <HAL_GPIO_Init+0x328>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d00d      	beq.n	8000fe2 <HAL_GPIO_Init+0x212>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a4c      	ldr	r2, [pc, #304]	@ (80010fc <HAL_GPIO_Init+0x32c>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d007      	beq.n	8000fde <HAL_GPIO_Init+0x20e>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a4b      	ldr	r2, [pc, #300]	@ (8001100 <HAL_GPIO_Init+0x330>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d101      	bne.n	8000fda <HAL_GPIO_Init+0x20a>
 8000fd6:	2307      	movs	r3, #7
 8000fd8:	e00e      	b.n	8000ff8 <HAL_GPIO_Init+0x228>
 8000fda:	2308      	movs	r3, #8
 8000fdc:	e00c      	b.n	8000ff8 <HAL_GPIO_Init+0x228>
 8000fde:	2306      	movs	r3, #6
 8000fe0:	e00a      	b.n	8000ff8 <HAL_GPIO_Init+0x228>
 8000fe2:	2305      	movs	r3, #5
 8000fe4:	e008      	b.n	8000ff8 <HAL_GPIO_Init+0x228>
 8000fe6:	2304      	movs	r3, #4
 8000fe8:	e006      	b.n	8000ff8 <HAL_GPIO_Init+0x228>
 8000fea:	2303      	movs	r3, #3
 8000fec:	e004      	b.n	8000ff8 <HAL_GPIO_Init+0x228>
 8000fee:	2302      	movs	r3, #2
 8000ff0:	e002      	b.n	8000ff8 <HAL_GPIO_Init+0x228>
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e000      	b.n	8000ff8 <HAL_GPIO_Init+0x228>
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	69fa      	ldr	r2, [r7, #28]
 8000ffa:	f002 0203 	and.w	r2, r2, #3
 8000ffe:	0092      	lsls	r2, r2, #2
 8001000:	4093      	lsls	r3, r2
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4313      	orrs	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001008:	4935      	ldr	r1, [pc, #212]	@ (80010e0 <HAL_GPIO_Init+0x310>)
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	089b      	lsrs	r3, r3, #2
 800100e:	3302      	adds	r3, #2
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001016:	4b3b      	ldr	r3, [pc, #236]	@ (8001104 <HAL_GPIO_Init+0x334>)
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	43db      	mvns	r3, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4013      	ands	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800103a:	4a32      	ldr	r2, [pc, #200]	@ (8001104 <HAL_GPIO_Init+0x334>)
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001040:	4b30      	ldr	r3, [pc, #192]	@ (8001104 <HAL_GPIO_Init+0x334>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	4313      	orrs	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001064:	4a27      	ldr	r2, [pc, #156]	@ (8001104 <HAL_GPIO_Init+0x334>)
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800106a:	4b26      	ldr	r3, [pc, #152]	@ (8001104 <HAL_GPIO_Init+0x334>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	43db      	mvns	r3, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4013      	ands	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800108e:	4a1d      	ldr	r2, [pc, #116]	@ (8001104 <HAL_GPIO_Init+0x334>)
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001094:	4b1b      	ldr	r3, [pc, #108]	@ (8001104 <HAL_GPIO_Init+0x334>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d003      	beq.n	80010b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010b8:	4a12      	ldr	r2, [pc, #72]	@ (8001104 <HAL_GPIO_Init+0x334>)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3301      	adds	r3, #1
 80010c2:	61fb      	str	r3, [r7, #28]
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	2b0f      	cmp	r3, #15
 80010c8:	f67f ae90 	bls.w	8000dec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010cc:	bf00      	nop
 80010ce:	bf00      	nop
 80010d0:	3724      	adds	r7, #36	@ 0x24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40013800 	.word	0x40013800
 80010e4:	40020000 	.word	0x40020000
 80010e8:	40020400 	.word	0x40020400
 80010ec:	40020800 	.word	0x40020800
 80010f0:	40020c00 	.word	0x40020c00
 80010f4:	40021000 	.word	0x40021000
 80010f8:	40021400 	.word	0x40021400
 80010fc:	40021800 	.word	0x40021800
 8001100:	40021c00 	.word	0x40021c00
 8001104:	40013c00 	.word	0x40013c00

08001108 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	460b      	mov	r3, r1
 8001112:	807b      	strh	r3, [r7, #2]
 8001114:	4613      	mov	r3, r2
 8001116:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001118:	787b      	ldrb	r3, [r7, #1]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800111e:	887a      	ldrh	r2, [r7, #2]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001124:	e003      	b.n	800112e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001126:	887b      	ldrh	r3, [r7, #2]
 8001128:	041a      	lsls	r2, r3, #16
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	619a      	str	r2, [r3, #24]
}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800113a:	b480      	push	{r7}
 800113c:	b085      	sub	sp, #20
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
 8001142:	460b      	mov	r3, r1
 8001144:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800114c:	887a      	ldrh	r2, [r7, #2]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	4013      	ands	r3, r2
 8001152:	041a      	lsls	r2, r3, #16
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	43d9      	mvns	r1, r3
 8001158:	887b      	ldrh	r3, [r7, #2]
 800115a:	400b      	ands	r3, r1
 800115c:	431a      	orrs	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	619a      	str	r2, [r3, #24]
}
 8001162:	bf00      	nop
 8001164:	3714      	adds	r7, #20
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
	...

08001170 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d101      	bne.n	8001182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e267      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	2b00      	cmp	r3, #0
 800118c:	d075      	beq.n	800127a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800118e:	4b88      	ldr	r3, [pc, #544]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f003 030c 	and.w	r3, r3, #12
 8001196:	2b04      	cmp	r3, #4
 8001198:	d00c      	beq.n	80011b4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800119a:	4b85      	ldr	r3, [pc, #532]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80011a2:	2b08      	cmp	r3, #8
 80011a4:	d112      	bne.n	80011cc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011a6:	4b82      	ldr	r3, [pc, #520]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80011b2:	d10b      	bne.n	80011cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b4:	4b7e      	ldr	r3, [pc, #504]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d05b      	beq.n	8001278 <HAL_RCC_OscConfig+0x108>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d157      	bne.n	8001278 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e242      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011d4:	d106      	bne.n	80011e4 <HAL_RCC_OscConfig+0x74>
 80011d6:	4b76      	ldr	r3, [pc, #472]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a75      	ldr	r2, [pc, #468]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 80011dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	e01d      	b.n	8001220 <HAL_RCC_OscConfig+0xb0>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80011ec:	d10c      	bne.n	8001208 <HAL_RCC_OscConfig+0x98>
 80011ee:	4b70      	ldr	r3, [pc, #448]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a6f      	ldr	r2, [pc, #444]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 80011f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	4b6d      	ldr	r3, [pc, #436]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a6c      	ldr	r2, [pc, #432]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 8001200:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	e00b      	b.n	8001220 <HAL_RCC_OscConfig+0xb0>
 8001208:	4b69      	ldr	r3, [pc, #420]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a68      	ldr	r2, [pc, #416]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 800120e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001212:	6013      	str	r3, [r2, #0]
 8001214:	4b66      	ldr	r3, [pc, #408]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a65      	ldr	r2, [pc, #404]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 800121a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800121e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d013      	beq.n	8001250 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001228:	f7ff fcb4 	bl	8000b94 <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001230:	f7ff fcb0 	bl	8000b94 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b64      	cmp	r3, #100	@ 0x64
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e207      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001242:	4b5b      	ldr	r3, [pc, #364]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d0f0      	beq.n	8001230 <HAL_RCC_OscConfig+0xc0>
 800124e:	e014      	b.n	800127a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001250:	f7ff fca0 	bl	8000b94 <HAL_GetTick>
 8001254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001258:	f7ff fc9c 	bl	8000b94 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b64      	cmp	r3, #100	@ 0x64
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e1f3      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800126a:	4b51      	ldr	r3, [pc, #324]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1f0      	bne.n	8001258 <HAL_RCC_OscConfig+0xe8>
 8001276:	e000      	b.n	800127a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d063      	beq.n	800134e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001286:	4b4a      	ldr	r3, [pc, #296]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f003 030c 	and.w	r3, r3, #12
 800128e:	2b00      	cmp	r3, #0
 8001290:	d00b      	beq.n	80012aa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001292:	4b47      	ldr	r3, [pc, #284]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800129a:	2b08      	cmp	r3, #8
 800129c:	d11c      	bne.n	80012d8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800129e:	4b44      	ldr	r3, [pc, #272]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d116      	bne.n	80012d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012aa:	4b41      	ldr	r3, [pc, #260]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d005      	beq.n	80012c2 <HAL_RCC_OscConfig+0x152>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d001      	beq.n	80012c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e1c7      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c2:	4b3b      	ldr	r3, [pc, #236]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	4937      	ldr	r1, [pc, #220]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 80012d2:	4313      	orrs	r3, r2
 80012d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d6:	e03a      	b.n	800134e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d020      	beq.n	8001322 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012e0:	4b34      	ldr	r3, [pc, #208]	@ (80013b4 <HAL_RCC_OscConfig+0x244>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e6:	f7ff fc55 	bl	8000b94 <HAL_GetTick>
 80012ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ec:	e008      	b.n	8001300 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ee:	f7ff fc51 	bl	8000b94 <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e1a8      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001300:	4b2b      	ldr	r3, [pc, #172]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d0f0      	beq.n	80012ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800130c:	4b28      	ldr	r3, [pc, #160]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	4925      	ldr	r1, [pc, #148]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 800131c:	4313      	orrs	r3, r2
 800131e:	600b      	str	r3, [r1, #0]
 8001320:	e015      	b.n	800134e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001322:	4b24      	ldr	r3, [pc, #144]	@ (80013b4 <HAL_RCC_OscConfig+0x244>)
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001328:	f7ff fc34 	bl	8000b94 <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001330:	f7ff fc30 	bl	8000b94 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e187      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001342:	4b1b      	ldr	r3, [pc, #108]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1f0      	bne.n	8001330 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0308 	and.w	r3, r3, #8
 8001356:	2b00      	cmp	r3, #0
 8001358:	d036      	beq.n	80013c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d016      	beq.n	8001390 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001362:	4b15      	ldr	r3, [pc, #84]	@ (80013b8 <HAL_RCC_OscConfig+0x248>)
 8001364:	2201      	movs	r2, #1
 8001366:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001368:	f7ff fc14 	bl	8000b94 <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001370:	f7ff fc10 	bl	8000b94 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e167      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001382:	4b0b      	ldr	r3, [pc, #44]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 8001384:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0f0      	beq.n	8001370 <HAL_RCC_OscConfig+0x200>
 800138e:	e01b      	b.n	80013c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001390:	4b09      	ldr	r3, [pc, #36]	@ (80013b8 <HAL_RCC_OscConfig+0x248>)
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001396:	f7ff fbfd 	bl	8000b94 <HAL_GetTick>
 800139a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800139c:	e00e      	b.n	80013bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800139e:	f7ff fbf9 	bl	8000b94 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d907      	bls.n	80013bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e150      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
 80013b0:	40023800 	.word	0x40023800
 80013b4:	42470000 	.word	0x42470000
 80013b8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013bc:	4b88      	ldr	r3, [pc, #544]	@ (80015e0 <HAL_RCC_OscConfig+0x470>)
 80013be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1ea      	bne.n	800139e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	f000 8097 	beq.w	8001504 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013d6:	2300      	movs	r3, #0
 80013d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013da:	4b81      	ldr	r3, [pc, #516]	@ (80015e0 <HAL_RCC_OscConfig+0x470>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d10f      	bne.n	8001406 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	4b7d      	ldr	r3, [pc, #500]	@ (80015e0 <HAL_RCC_OscConfig+0x470>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ee:	4a7c      	ldr	r2, [pc, #496]	@ (80015e0 <HAL_RCC_OscConfig+0x470>)
 80013f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013f6:	4b7a      	ldr	r3, [pc, #488]	@ (80015e0 <HAL_RCC_OscConfig+0x470>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001402:	2301      	movs	r3, #1
 8001404:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001406:	4b77      	ldr	r3, [pc, #476]	@ (80015e4 <HAL_RCC_OscConfig+0x474>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800140e:	2b00      	cmp	r3, #0
 8001410:	d118      	bne.n	8001444 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001412:	4b74      	ldr	r3, [pc, #464]	@ (80015e4 <HAL_RCC_OscConfig+0x474>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a73      	ldr	r2, [pc, #460]	@ (80015e4 <HAL_RCC_OscConfig+0x474>)
 8001418:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800141c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800141e:	f7ff fbb9 	bl	8000b94 <HAL_GetTick>
 8001422:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001424:	e008      	b.n	8001438 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001426:	f7ff fbb5 	bl	8000b94 <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e10c      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001438:	4b6a      	ldr	r3, [pc, #424]	@ (80015e4 <HAL_RCC_OscConfig+0x474>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001440:	2b00      	cmp	r3, #0
 8001442:	d0f0      	beq.n	8001426 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d106      	bne.n	800145a <HAL_RCC_OscConfig+0x2ea>
 800144c:	4b64      	ldr	r3, [pc, #400]	@ (80015e0 <HAL_RCC_OscConfig+0x470>)
 800144e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001450:	4a63      	ldr	r2, [pc, #396]	@ (80015e0 <HAL_RCC_OscConfig+0x470>)
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	6713      	str	r3, [r2, #112]	@ 0x70
 8001458:	e01c      	b.n	8001494 <HAL_RCC_OscConfig+0x324>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	2b05      	cmp	r3, #5
 8001460:	d10c      	bne.n	800147c <HAL_RCC_OscConfig+0x30c>
 8001462:	4b5f      	ldr	r3, [pc, #380]	@ (80015e0 <HAL_RCC_OscConfig+0x470>)
 8001464:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001466:	4a5e      	ldr	r2, [pc, #376]	@ (80015e0 <HAL_RCC_OscConfig+0x470>)
 8001468:	f043 0304 	orr.w	r3, r3, #4
 800146c:	6713      	str	r3, [r2, #112]	@ 0x70
 800146e:	4b5c      	ldr	r3, [pc, #368]	@ (80015e0 <HAL_RCC_OscConfig+0x470>)
 8001470:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001472:	4a5b      	ldr	r2, [pc, #364]	@ (80015e0 <HAL_RCC_OscConfig+0x470>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	6713      	str	r3, [r2, #112]	@ 0x70
 800147a:	e00b      	b.n	8001494 <HAL_RCC_OscConfig+0x324>
 800147c:	4b58      	ldr	r3, [pc, #352]	@ (80015e0 <HAL_RCC_OscConfig+0x470>)
 800147e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001480:	4a57      	ldr	r2, [pc, #348]	@ (80015e0 <HAL_RCC_OscConfig+0x470>)
 8001482:	f023 0301 	bic.w	r3, r3, #1
 8001486:	6713      	str	r3, [r2, #112]	@ 0x70
 8001488:	4b55      	ldr	r3, [pc, #340]	@ (80015e0 <HAL_RCC_OscConfig+0x470>)
 800148a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800148c:	4a54      	ldr	r2, [pc, #336]	@ (80015e0 <HAL_RCC_OscConfig+0x470>)
 800148e:	f023 0304 	bic.w	r3, r3, #4
 8001492:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d015      	beq.n	80014c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800149c:	f7ff fb7a 	bl	8000b94 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a2:	e00a      	b.n	80014ba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014a4:	f7ff fb76 	bl	8000b94 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e0cb      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ba:	4b49      	ldr	r3, [pc, #292]	@ (80015e0 <HAL_RCC_OscConfig+0x470>)
 80014bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0ee      	beq.n	80014a4 <HAL_RCC_OscConfig+0x334>
 80014c6:	e014      	b.n	80014f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c8:	f7ff fb64 	bl	8000b94 <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ce:	e00a      	b.n	80014e6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014d0:	f7ff fb60 	bl	8000b94 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014de:	4293      	cmp	r3, r2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e0b5      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014e6:	4b3e      	ldr	r3, [pc, #248]	@ (80015e0 <HAL_RCC_OscConfig+0x470>)
 80014e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1ee      	bne.n	80014d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80014f2:	7dfb      	ldrb	r3, [r7, #23]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d105      	bne.n	8001504 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014f8:	4b39      	ldr	r3, [pc, #228]	@ (80015e0 <HAL_RCC_OscConfig+0x470>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fc:	4a38      	ldr	r2, [pc, #224]	@ (80015e0 <HAL_RCC_OscConfig+0x470>)
 80014fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001502:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	2b00      	cmp	r3, #0
 800150a:	f000 80a1 	beq.w	8001650 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800150e:	4b34      	ldr	r3, [pc, #208]	@ (80015e0 <HAL_RCC_OscConfig+0x470>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f003 030c 	and.w	r3, r3, #12
 8001516:	2b08      	cmp	r3, #8
 8001518:	d05c      	beq.n	80015d4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	2b02      	cmp	r3, #2
 8001520:	d141      	bne.n	80015a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001522:	4b31      	ldr	r3, [pc, #196]	@ (80015e8 <HAL_RCC_OscConfig+0x478>)
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001528:	f7ff fb34 	bl	8000b94 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001530:	f7ff fb30 	bl	8000b94 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e087      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001542:	4b27      	ldr	r3, [pc, #156]	@ (80015e0 <HAL_RCC_OscConfig+0x470>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1f0      	bne.n	8001530 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	69da      	ldr	r2, [r3, #28]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	431a      	orrs	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800155c:	019b      	lsls	r3, r3, #6
 800155e:	431a      	orrs	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001564:	085b      	lsrs	r3, r3, #1
 8001566:	3b01      	subs	r3, #1
 8001568:	041b      	lsls	r3, r3, #16
 800156a:	431a      	orrs	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001570:	061b      	lsls	r3, r3, #24
 8001572:	491b      	ldr	r1, [pc, #108]	@ (80015e0 <HAL_RCC_OscConfig+0x470>)
 8001574:	4313      	orrs	r3, r2
 8001576:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001578:	4b1b      	ldr	r3, [pc, #108]	@ (80015e8 <HAL_RCC_OscConfig+0x478>)
 800157a:	2201      	movs	r2, #1
 800157c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157e:	f7ff fb09 	bl	8000b94 <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001586:	f7ff fb05 	bl	8000b94 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e05c      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001598:	4b11      	ldr	r3, [pc, #68]	@ (80015e0 <HAL_RCC_OscConfig+0x470>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0f0      	beq.n	8001586 <HAL_RCC_OscConfig+0x416>
 80015a4:	e054      	b.n	8001650 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015a6:	4b10      	ldr	r3, [pc, #64]	@ (80015e8 <HAL_RCC_OscConfig+0x478>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ac:	f7ff faf2 	bl	8000b94 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015b4:	f7ff faee 	bl	8000b94 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e045      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c6:	4b06      	ldr	r3, [pc, #24]	@ (80015e0 <HAL_RCC_OscConfig+0x470>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f0      	bne.n	80015b4 <HAL_RCC_OscConfig+0x444>
 80015d2:	e03d      	b.n	8001650 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d107      	bne.n	80015ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e038      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40007000 	.word	0x40007000
 80015e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015ec:	4b1b      	ldr	r3, [pc, #108]	@ (800165c <HAL_RCC_OscConfig+0x4ec>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d028      	beq.n	800164c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001604:	429a      	cmp	r2, r3
 8001606:	d121      	bne.n	800164c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001612:	429a      	cmp	r2, r3
 8001614:	d11a      	bne.n	800164c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800161c:	4013      	ands	r3, r2
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001622:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001624:	4293      	cmp	r3, r2
 8001626:	d111      	bne.n	800164c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001632:	085b      	lsrs	r3, r3, #1
 8001634:	3b01      	subs	r3, #1
 8001636:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001638:	429a      	cmp	r2, r3
 800163a:	d107      	bne.n	800164c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001646:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001648:	429a      	cmp	r2, r3
 800164a:	d001      	beq.n	8001650 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e000      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3718      	adds	r7, #24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40023800 	.word	0x40023800

08001660 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d101      	bne.n	8001674 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e0cc      	b.n	800180e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001674:	4b68      	ldr	r3, [pc, #416]	@ (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0307 	and.w	r3, r3, #7
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	429a      	cmp	r2, r3
 8001680:	d90c      	bls.n	800169c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001682:	4b65      	ldr	r3, [pc, #404]	@ (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	b2d2      	uxtb	r2, r2
 8001688:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800168a:	4b63      	ldr	r3, [pc, #396]	@ (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	d001      	beq.n	800169c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e0b8      	b.n	800180e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d020      	beq.n	80016ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d005      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016b4:	4b59      	ldr	r3, [pc, #356]	@ (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	4a58      	ldr	r2, [pc, #352]	@ (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80016ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80016be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0308 	and.w	r3, r3, #8
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d005      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016cc:	4b53      	ldr	r3, [pc, #332]	@ (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	4a52      	ldr	r2, [pc, #328]	@ (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80016d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80016d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016d8:	4b50      	ldr	r3, [pc, #320]	@ (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	494d      	ldr	r1, [pc, #308]	@ (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d044      	beq.n	8001780 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d107      	bne.n	800170e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016fe:	4b47      	ldr	r3, [pc, #284]	@ (800181c <HAL_RCC_ClockConfig+0x1bc>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d119      	bne.n	800173e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e07f      	b.n	800180e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b02      	cmp	r3, #2
 8001714:	d003      	beq.n	800171e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800171a:	2b03      	cmp	r3, #3
 800171c:	d107      	bne.n	800172e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800171e:	4b3f      	ldr	r3, [pc, #252]	@ (800181c <HAL_RCC_ClockConfig+0x1bc>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d109      	bne.n	800173e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e06f      	b.n	800180e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800172e:	4b3b      	ldr	r3, [pc, #236]	@ (800181c <HAL_RCC_ClockConfig+0x1bc>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e067      	b.n	800180e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800173e:	4b37      	ldr	r3, [pc, #220]	@ (800181c <HAL_RCC_ClockConfig+0x1bc>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f023 0203 	bic.w	r2, r3, #3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	4934      	ldr	r1, [pc, #208]	@ (800181c <HAL_RCC_ClockConfig+0x1bc>)
 800174c:	4313      	orrs	r3, r2
 800174e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001750:	f7ff fa20 	bl	8000b94 <HAL_GetTick>
 8001754:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001756:	e00a      	b.n	800176e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001758:	f7ff fa1c 	bl	8000b94 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001766:	4293      	cmp	r3, r2
 8001768:	d901      	bls.n	800176e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e04f      	b.n	800180e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800176e:	4b2b      	ldr	r3, [pc, #172]	@ (800181c <HAL_RCC_ClockConfig+0x1bc>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f003 020c 	and.w	r2, r3, #12
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	429a      	cmp	r2, r3
 800177e:	d1eb      	bne.n	8001758 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001780:	4b25      	ldr	r3, [pc, #148]	@ (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0307 	and.w	r3, r3, #7
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	429a      	cmp	r2, r3
 800178c:	d20c      	bcs.n	80017a8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800178e:	4b22      	ldr	r3, [pc, #136]	@ (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	b2d2      	uxtb	r2, r2
 8001794:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001796:	4b20      	ldr	r3, [pc, #128]	@ (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d001      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e032      	b.n	800180e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d008      	beq.n	80017c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017b4:	4b19      	ldr	r3, [pc, #100]	@ (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	4916      	ldr	r1, [pc, #88]	@ (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0308 	and.w	r3, r3, #8
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d009      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017d2:	4b12      	ldr	r3, [pc, #72]	@ (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	490e      	ldr	r1, [pc, #56]	@ (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017e6:	f000 f821 	bl	800182c <HAL_RCC_GetSysClockFreq>
 80017ea:	4602      	mov	r2, r0
 80017ec:	4b0b      	ldr	r3, [pc, #44]	@ (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	091b      	lsrs	r3, r3, #4
 80017f2:	f003 030f 	and.w	r3, r3, #15
 80017f6:	490a      	ldr	r1, [pc, #40]	@ (8001820 <HAL_RCC_ClockConfig+0x1c0>)
 80017f8:	5ccb      	ldrb	r3, [r1, r3]
 80017fa:	fa22 f303 	lsr.w	r3, r2, r3
 80017fe:	4a09      	ldr	r2, [pc, #36]	@ (8001824 <HAL_RCC_ClockConfig+0x1c4>)
 8001800:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001802:	4b09      	ldr	r3, [pc, #36]	@ (8001828 <HAL_RCC_ClockConfig+0x1c8>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff f980 	bl	8000b0c <HAL_InitTick>

  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40023c00 	.word	0x40023c00
 800181c:	40023800 	.word	0x40023800
 8001820:	08004cb8 	.word	0x08004cb8
 8001824:	20000008 	.word	0x20000008
 8001828:	2000000c 	.word	0x2000000c

0800182c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800182c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001830:	b090      	sub	sp, #64	@ 0x40
 8001832:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001834:	2300      	movs	r3, #0
 8001836:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001838:	2300      	movs	r3, #0
 800183a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800183c:	2300      	movs	r3, #0
 800183e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001840:	2300      	movs	r3, #0
 8001842:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001844:	4b59      	ldr	r3, [pc, #356]	@ (80019ac <HAL_RCC_GetSysClockFreq+0x180>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f003 030c 	and.w	r3, r3, #12
 800184c:	2b08      	cmp	r3, #8
 800184e:	d00d      	beq.n	800186c <HAL_RCC_GetSysClockFreq+0x40>
 8001850:	2b08      	cmp	r3, #8
 8001852:	f200 80a1 	bhi.w	8001998 <HAL_RCC_GetSysClockFreq+0x16c>
 8001856:	2b00      	cmp	r3, #0
 8001858:	d002      	beq.n	8001860 <HAL_RCC_GetSysClockFreq+0x34>
 800185a:	2b04      	cmp	r3, #4
 800185c:	d003      	beq.n	8001866 <HAL_RCC_GetSysClockFreq+0x3a>
 800185e:	e09b      	b.n	8001998 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001860:	4b53      	ldr	r3, [pc, #332]	@ (80019b0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001862:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001864:	e09b      	b.n	800199e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001866:	4b53      	ldr	r3, [pc, #332]	@ (80019b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001868:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800186a:	e098      	b.n	800199e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800186c:	4b4f      	ldr	r3, [pc, #316]	@ (80019ac <HAL_RCC_GetSysClockFreq+0x180>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001874:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001876:	4b4d      	ldr	r3, [pc, #308]	@ (80019ac <HAL_RCC_GetSysClockFreq+0x180>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d028      	beq.n	80018d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001882:	4b4a      	ldr	r3, [pc, #296]	@ (80019ac <HAL_RCC_GetSysClockFreq+0x180>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	099b      	lsrs	r3, r3, #6
 8001888:	2200      	movs	r2, #0
 800188a:	623b      	str	r3, [r7, #32]
 800188c:	627a      	str	r2, [r7, #36]	@ 0x24
 800188e:	6a3b      	ldr	r3, [r7, #32]
 8001890:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001894:	2100      	movs	r1, #0
 8001896:	4b47      	ldr	r3, [pc, #284]	@ (80019b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001898:	fb03 f201 	mul.w	r2, r3, r1
 800189c:	2300      	movs	r3, #0
 800189e:	fb00 f303 	mul.w	r3, r0, r3
 80018a2:	4413      	add	r3, r2
 80018a4:	4a43      	ldr	r2, [pc, #268]	@ (80019b4 <HAL_RCC_GetSysClockFreq+0x188>)
 80018a6:	fba0 1202 	umull	r1, r2, r0, r2
 80018aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80018ac:	460a      	mov	r2, r1
 80018ae:	62ba      	str	r2, [r7, #40]	@ 0x28
 80018b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018b2:	4413      	add	r3, r2
 80018b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018b8:	2200      	movs	r2, #0
 80018ba:	61bb      	str	r3, [r7, #24]
 80018bc:	61fa      	str	r2, [r7, #28]
 80018be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80018c6:	f7fe fc83 	bl	80001d0 <__aeabi_uldivmod>
 80018ca:	4602      	mov	r2, r0
 80018cc:	460b      	mov	r3, r1
 80018ce:	4613      	mov	r3, r2
 80018d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80018d2:	e053      	b.n	800197c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018d4:	4b35      	ldr	r3, [pc, #212]	@ (80019ac <HAL_RCC_GetSysClockFreq+0x180>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	099b      	lsrs	r3, r3, #6
 80018da:	2200      	movs	r2, #0
 80018dc:	613b      	str	r3, [r7, #16]
 80018de:	617a      	str	r2, [r7, #20]
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80018e6:	f04f 0b00 	mov.w	fp, #0
 80018ea:	4652      	mov	r2, sl
 80018ec:	465b      	mov	r3, fp
 80018ee:	f04f 0000 	mov.w	r0, #0
 80018f2:	f04f 0100 	mov.w	r1, #0
 80018f6:	0159      	lsls	r1, r3, #5
 80018f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018fc:	0150      	lsls	r0, r2, #5
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	ebb2 080a 	subs.w	r8, r2, sl
 8001906:	eb63 090b 	sbc.w	r9, r3, fp
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	f04f 0300 	mov.w	r3, #0
 8001912:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001916:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800191a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800191e:	ebb2 0408 	subs.w	r4, r2, r8
 8001922:	eb63 0509 	sbc.w	r5, r3, r9
 8001926:	f04f 0200 	mov.w	r2, #0
 800192a:	f04f 0300 	mov.w	r3, #0
 800192e:	00eb      	lsls	r3, r5, #3
 8001930:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001934:	00e2      	lsls	r2, r4, #3
 8001936:	4614      	mov	r4, r2
 8001938:	461d      	mov	r5, r3
 800193a:	eb14 030a 	adds.w	r3, r4, sl
 800193e:	603b      	str	r3, [r7, #0]
 8001940:	eb45 030b 	adc.w	r3, r5, fp
 8001944:	607b      	str	r3, [r7, #4]
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	f04f 0300 	mov.w	r3, #0
 800194e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001952:	4629      	mov	r1, r5
 8001954:	028b      	lsls	r3, r1, #10
 8001956:	4621      	mov	r1, r4
 8001958:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800195c:	4621      	mov	r1, r4
 800195e:	028a      	lsls	r2, r1, #10
 8001960:	4610      	mov	r0, r2
 8001962:	4619      	mov	r1, r3
 8001964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001966:	2200      	movs	r2, #0
 8001968:	60bb      	str	r3, [r7, #8]
 800196a:	60fa      	str	r2, [r7, #12]
 800196c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001970:	f7fe fc2e 	bl	80001d0 <__aeabi_uldivmod>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4613      	mov	r3, r2
 800197a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800197c:	4b0b      	ldr	r3, [pc, #44]	@ (80019ac <HAL_RCC_GetSysClockFreq+0x180>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	0c1b      	lsrs	r3, r3, #16
 8001982:	f003 0303 	and.w	r3, r3, #3
 8001986:	3301      	adds	r3, #1
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800198c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800198e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001990:	fbb2 f3f3 	udiv	r3, r2, r3
 8001994:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001996:	e002      	b.n	800199e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001998:	4b05      	ldr	r3, [pc, #20]	@ (80019b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800199a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800199c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800199e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3740      	adds	r7, #64	@ 0x40
 80019a4:	46bd      	mov	sp, r7
 80019a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019aa:	bf00      	nop
 80019ac:	40023800 	.word	0x40023800
 80019b0:	00f42400 	.word	0x00f42400
 80019b4:	017d7840 	.word	0x017d7840

080019b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e041      	b.n	8001a4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d106      	bne.n	80019e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7fe ffc6 	bl	8000970 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2202      	movs	r2, #2
 80019e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3304      	adds	r3, #4
 80019f4:	4619      	mov	r1, r3
 80019f6:	4610      	mov	r0, r2
 80019f8:	f000 fa0c 	bl	8001e14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b084      	sub	sp, #16
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d020      	beq.n	8001aba <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d01b      	beq.n	8001aba <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f06f 0202 	mvn.w	r2, #2
 8001a8a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d003      	beq.n	8001aa8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 f999 	bl	8001dd8 <HAL_TIM_IC_CaptureCallback>
 8001aa6:	e005      	b.n	8001ab4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f000 f98b 	bl	8001dc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 f99c 	bl	8001dec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d020      	beq.n	8001b06 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f003 0304 	and.w	r3, r3, #4
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d01b      	beq.n	8001b06 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f06f 0204 	mvn.w	r2, #4
 8001ad6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2202      	movs	r2, #2
 8001adc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f000 f973 	bl	8001dd8 <HAL_TIM_IC_CaptureCallback>
 8001af2:	e005      	b.n	8001b00 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 f965 	bl	8001dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 f976 	bl	8001dec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	f003 0308 	and.w	r3, r3, #8
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d020      	beq.n	8001b52 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d01b      	beq.n	8001b52 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f06f 0208 	mvn.w	r2, #8
 8001b22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2204      	movs	r2, #4
 8001b28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	69db      	ldr	r3, [r3, #28]
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d003      	beq.n	8001b40 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f000 f94d 	bl	8001dd8 <HAL_TIM_IC_CaptureCallback>
 8001b3e:	e005      	b.n	8001b4c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 f93f 	bl	8001dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f950 	bl	8001dec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	f003 0310 	and.w	r3, r3, #16
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d020      	beq.n	8001b9e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f003 0310 	and.w	r3, r3, #16
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d01b      	beq.n	8001b9e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f06f 0210 	mvn.w	r2, #16
 8001b6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2208      	movs	r2, #8
 8001b74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	69db      	ldr	r3, [r3, #28]
 8001b7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 f927 	bl	8001dd8 <HAL_TIM_IC_CaptureCallback>
 8001b8a:	e005      	b.n	8001b98 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 f919 	bl	8001dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 f92a 	bl	8001dec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d00c      	beq.n	8001bc2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d007      	beq.n	8001bc2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f06f 0201 	mvn.w	r2, #1
 8001bba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7fe feff 	bl	80009c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d00c      	beq.n	8001be6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d007      	beq.n	8001be6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001bde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f000 fadd 	bl	80021a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d00c      	beq.n	8001c0a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d007      	beq.n	8001c0a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001c02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 f8fb 	bl	8001e00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	f003 0320 	and.w	r3, r3, #32
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d00c      	beq.n	8001c2e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f003 0320 	and.w	r3, r3, #32
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d007      	beq.n	8001c2e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f06f 0220 	mvn.w	r2, #32
 8001c26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 faaf 	bl	800218c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c2e:	bf00      	nop
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b084      	sub	sp, #16
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
 8001c3e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c40:	2300      	movs	r3, #0
 8001c42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d101      	bne.n	8001c52 <HAL_TIM_ConfigClockSource+0x1c>
 8001c4e:	2302      	movs	r3, #2
 8001c50:	e0b4      	b.n	8001dbc <HAL_TIM_ConfigClockSource+0x186>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2201      	movs	r2, #1
 8001c56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001c70:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001c78:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c8a:	d03e      	beq.n	8001d0a <HAL_TIM_ConfigClockSource+0xd4>
 8001c8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c90:	f200 8087 	bhi.w	8001da2 <HAL_TIM_ConfigClockSource+0x16c>
 8001c94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c98:	f000 8086 	beq.w	8001da8 <HAL_TIM_ConfigClockSource+0x172>
 8001c9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ca0:	d87f      	bhi.n	8001da2 <HAL_TIM_ConfigClockSource+0x16c>
 8001ca2:	2b70      	cmp	r3, #112	@ 0x70
 8001ca4:	d01a      	beq.n	8001cdc <HAL_TIM_ConfigClockSource+0xa6>
 8001ca6:	2b70      	cmp	r3, #112	@ 0x70
 8001ca8:	d87b      	bhi.n	8001da2 <HAL_TIM_ConfigClockSource+0x16c>
 8001caa:	2b60      	cmp	r3, #96	@ 0x60
 8001cac:	d050      	beq.n	8001d50 <HAL_TIM_ConfigClockSource+0x11a>
 8001cae:	2b60      	cmp	r3, #96	@ 0x60
 8001cb0:	d877      	bhi.n	8001da2 <HAL_TIM_ConfigClockSource+0x16c>
 8001cb2:	2b50      	cmp	r3, #80	@ 0x50
 8001cb4:	d03c      	beq.n	8001d30 <HAL_TIM_ConfigClockSource+0xfa>
 8001cb6:	2b50      	cmp	r3, #80	@ 0x50
 8001cb8:	d873      	bhi.n	8001da2 <HAL_TIM_ConfigClockSource+0x16c>
 8001cba:	2b40      	cmp	r3, #64	@ 0x40
 8001cbc:	d058      	beq.n	8001d70 <HAL_TIM_ConfigClockSource+0x13a>
 8001cbe:	2b40      	cmp	r3, #64	@ 0x40
 8001cc0:	d86f      	bhi.n	8001da2 <HAL_TIM_ConfigClockSource+0x16c>
 8001cc2:	2b30      	cmp	r3, #48	@ 0x30
 8001cc4:	d064      	beq.n	8001d90 <HAL_TIM_ConfigClockSource+0x15a>
 8001cc6:	2b30      	cmp	r3, #48	@ 0x30
 8001cc8:	d86b      	bhi.n	8001da2 <HAL_TIM_ConfigClockSource+0x16c>
 8001cca:	2b20      	cmp	r3, #32
 8001ccc:	d060      	beq.n	8001d90 <HAL_TIM_ConfigClockSource+0x15a>
 8001cce:	2b20      	cmp	r3, #32
 8001cd0:	d867      	bhi.n	8001da2 <HAL_TIM_ConfigClockSource+0x16c>
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d05c      	beq.n	8001d90 <HAL_TIM_ConfigClockSource+0x15a>
 8001cd6:	2b10      	cmp	r3, #16
 8001cd8:	d05a      	beq.n	8001d90 <HAL_TIM_ConfigClockSource+0x15a>
 8001cda:	e062      	b.n	8001da2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001cec:	f000 f9b2 	bl	8002054 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001cfe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68ba      	ldr	r2, [r7, #8]
 8001d06:	609a      	str	r2, [r3, #8]
      break;
 8001d08:	e04f      	b.n	8001daa <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001d1a:	f000 f99b 	bl	8002054 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001d2c:	609a      	str	r2, [r3, #8]
      break;
 8001d2e:	e03c      	b.n	8001daa <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	f000 f90f 	bl	8001f60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2150      	movs	r1, #80	@ 0x50
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f000 f968 	bl	800201e <TIM_ITRx_SetConfig>
      break;
 8001d4e:	e02c      	b.n	8001daa <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	f000 f92e 	bl	8001fbe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2160      	movs	r1, #96	@ 0x60
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f000 f958 	bl	800201e <TIM_ITRx_SetConfig>
      break;
 8001d6e:	e01c      	b.n	8001daa <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	f000 f8ef 	bl	8001f60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2140      	movs	r1, #64	@ 0x40
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f000 f948 	bl	800201e <TIM_ITRx_SetConfig>
      break;
 8001d8e:	e00c      	b.n	8001daa <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4610      	mov	r0, r2
 8001d9c:	f000 f93f 	bl	800201e <TIM_ITRx_SetConfig>
      break;
 8001da0:	e003      	b.n	8001daa <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	73fb      	strb	r3, [r7, #15]
      break;
 8001da6:	e000      	b.n	8001daa <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001da8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3710      	adds	r7, #16
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a43      	ldr	r2, [pc, #268]	@ (8001f34 <TIM_Base_SetConfig+0x120>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d013      	beq.n	8001e54 <TIM_Base_SetConfig+0x40>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e32:	d00f      	beq.n	8001e54 <TIM_Base_SetConfig+0x40>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a40      	ldr	r2, [pc, #256]	@ (8001f38 <TIM_Base_SetConfig+0x124>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d00b      	beq.n	8001e54 <TIM_Base_SetConfig+0x40>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a3f      	ldr	r2, [pc, #252]	@ (8001f3c <TIM_Base_SetConfig+0x128>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d007      	beq.n	8001e54 <TIM_Base_SetConfig+0x40>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a3e      	ldr	r2, [pc, #248]	@ (8001f40 <TIM_Base_SetConfig+0x12c>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d003      	beq.n	8001e54 <TIM_Base_SetConfig+0x40>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a3d      	ldr	r2, [pc, #244]	@ (8001f44 <TIM_Base_SetConfig+0x130>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d108      	bne.n	8001e66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a32      	ldr	r2, [pc, #200]	@ (8001f34 <TIM_Base_SetConfig+0x120>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d02b      	beq.n	8001ec6 <TIM_Base_SetConfig+0xb2>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e74:	d027      	beq.n	8001ec6 <TIM_Base_SetConfig+0xb2>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a2f      	ldr	r2, [pc, #188]	@ (8001f38 <TIM_Base_SetConfig+0x124>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d023      	beq.n	8001ec6 <TIM_Base_SetConfig+0xb2>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a2e      	ldr	r2, [pc, #184]	@ (8001f3c <TIM_Base_SetConfig+0x128>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d01f      	beq.n	8001ec6 <TIM_Base_SetConfig+0xb2>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a2d      	ldr	r2, [pc, #180]	@ (8001f40 <TIM_Base_SetConfig+0x12c>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d01b      	beq.n	8001ec6 <TIM_Base_SetConfig+0xb2>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a2c      	ldr	r2, [pc, #176]	@ (8001f44 <TIM_Base_SetConfig+0x130>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d017      	beq.n	8001ec6 <TIM_Base_SetConfig+0xb2>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a2b      	ldr	r2, [pc, #172]	@ (8001f48 <TIM_Base_SetConfig+0x134>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d013      	beq.n	8001ec6 <TIM_Base_SetConfig+0xb2>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a2a      	ldr	r2, [pc, #168]	@ (8001f4c <TIM_Base_SetConfig+0x138>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d00f      	beq.n	8001ec6 <TIM_Base_SetConfig+0xb2>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a29      	ldr	r2, [pc, #164]	@ (8001f50 <TIM_Base_SetConfig+0x13c>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d00b      	beq.n	8001ec6 <TIM_Base_SetConfig+0xb2>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a28      	ldr	r2, [pc, #160]	@ (8001f54 <TIM_Base_SetConfig+0x140>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d007      	beq.n	8001ec6 <TIM_Base_SetConfig+0xb2>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a27      	ldr	r2, [pc, #156]	@ (8001f58 <TIM_Base_SetConfig+0x144>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d003      	beq.n	8001ec6 <TIM_Base_SetConfig+0xb2>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a26      	ldr	r2, [pc, #152]	@ (8001f5c <TIM_Base_SetConfig+0x148>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d108      	bne.n	8001ed8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ecc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	689a      	ldr	r2, [r3, #8]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a0e      	ldr	r2, [pc, #56]	@ (8001f34 <TIM_Base_SetConfig+0x120>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d003      	beq.n	8001f06 <TIM_Base_SetConfig+0xf2>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a10      	ldr	r2, [pc, #64]	@ (8001f44 <TIM_Base_SetConfig+0x130>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d103      	bne.n	8001f0e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	691a      	ldr	r2, [r3, #16]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f043 0204 	orr.w	r2, r3, #4
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	601a      	str	r2, [r3, #0]
}
 8001f26:	bf00      	nop
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	40010000 	.word	0x40010000
 8001f38:	40000400 	.word	0x40000400
 8001f3c:	40000800 	.word	0x40000800
 8001f40:	40000c00 	.word	0x40000c00
 8001f44:	40010400 	.word	0x40010400
 8001f48:	40014000 	.word	0x40014000
 8001f4c:	40014400 	.word	0x40014400
 8001f50:	40014800 	.word	0x40014800
 8001f54:	40001800 	.word	0x40001800
 8001f58:	40001c00 	.word	0x40001c00
 8001f5c:	40002000 	.word	0x40002000

08001f60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b087      	sub	sp, #28
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
 8001f70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	f023 0201 	bic.w	r2, r3, #1
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	011b      	lsls	r3, r3, #4
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	f023 030a 	bic.w	r3, r3, #10
 8001f9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	621a      	str	r2, [r3, #32]
}
 8001fb2:	bf00      	nop
 8001fb4:	371c      	adds	r7, #28
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b087      	sub	sp, #28
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	60f8      	str	r0, [r7, #12]
 8001fc6:	60b9      	str	r1, [r7, #8]
 8001fc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
 8001fce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	f023 0210 	bic.w	r2, r3, #16
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001fe8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	031b      	lsls	r3, r3, #12
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001ffa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	011b      	lsls	r3, r3, #4
 8002000:	697a      	ldr	r2, [r7, #20]
 8002002:	4313      	orrs	r3, r2
 8002004:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	621a      	str	r2, [r3, #32]
}
 8002012:	bf00      	nop
 8002014:	371c      	adds	r7, #28
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800201e:	b480      	push	{r7}
 8002020:	b085      	sub	sp, #20
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
 8002026:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002034:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4313      	orrs	r3, r2
 800203c:	f043 0307 	orr.w	r3, r3, #7
 8002040:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	609a      	str	r2, [r3, #8]
}
 8002048:	bf00      	nop
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002054:	b480      	push	{r7}
 8002056:	b087      	sub	sp, #28
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
 8002060:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800206e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	021a      	lsls	r2, r3, #8
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	431a      	orrs	r2, r3
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	4313      	orrs	r3, r2
 800207c:	697a      	ldr	r2, [r7, #20]
 800207e:	4313      	orrs	r3, r2
 8002080:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	609a      	str	r2, [r3, #8]
}
 8002088:	bf00      	nop
 800208a:	371c      	adds	r7, #28
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d101      	bne.n	80020ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80020a8:	2302      	movs	r3, #2
 80020aa:	e05a      	b.n	8002162 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2202      	movs	r2, #2
 80020b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	4313      	orrs	r3, r2
 80020dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a21      	ldr	r2, [pc, #132]	@ (8002170 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d022      	beq.n	8002136 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020f8:	d01d      	beq.n	8002136 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a1d      	ldr	r2, [pc, #116]	@ (8002174 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d018      	beq.n	8002136 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a1b      	ldr	r2, [pc, #108]	@ (8002178 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d013      	beq.n	8002136 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a1a      	ldr	r2, [pc, #104]	@ (800217c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d00e      	beq.n	8002136 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a18      	ldr	r2, [pc, #96]	@ (8002180 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d009      	beq.n	8002136 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a17      	ldr	r2, [pc, #92]	@ (8002184 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d004      	beq.n	8002136 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a15      	ldr	r2, [pc, #84]	@ (8002188 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d10c      	bne.n	8002150 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800213c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	68ba      	ldr	r2, [r7, #8]
 8002144:	4313      	orrs	r3, r2
 8002146:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68ba      	ldr	r2, [r7, #8]
 800214e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3714      	adds	r7, #20
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	40010000 	.word	0x40010000
 8002174:	40000400 	.word	0x40000400
 8002178:	40000800 	.word	0x40000800
 800217c:	40000c00 	.word	0x40000c00
 8002180:	40010400 	.word	0x40010400
 8002184:	40014000 	.word	0x40014000
 8002188:	40001800 	.word	0x40001800

0800218c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f103 0208 	add.w	r2, r3, #8
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80021cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f103 0208 	add.w	r2, r3, #8
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f103 0208 	add.w	r2, r3, #8
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800220e:	b480      	push	{r7}
 8002210:	b085      	sub	sp, #20
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
 8002216:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	1c5a      	adds	r2, r3, #1
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	601a      	str	r2, [r3, #0]
}
 800224a:	bf00      	nop
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <prvDeadlineIsEarlier>:
/* -----------------------EDF-EDFVD------------------------- */
#if( configUSE_EDF_SCHEDULER == 1 || configUSE_EDFVD_SCHEDULER == 1 )

	/* “Safe” comparison in module 2^32: returns true if a is more urgent than b */
	static BaseType_t prvDeadlineIsEarlier( TickType_t a, TickType_t b )
	{
 8002256:	b480      	push	{r7}
 8002258:	b083      	sub	sp, #12
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
 800225e:	6039      	str	r1, [r7, #0]
		return ( (int32_t)( a - b ) ) < 0;
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	0fdb      	lsrs	r3, r3, #31
 8002268:	b2db      	uxtb	r3, r3
	}
 800226a:	4618      	mov	r0, r3
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <vListInsert>:

	void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
	{
 8002276:	b580      	push	{r7, lr}
 8002278:	b086      	sub	sp, #24
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
 800227e:	6039      	str	r1, [r7, #0]
	ListItem_t *pxIterator;
	const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	613b      	str	r3, [r7, #16]
		new list item should be placed after it.  This ensures that TCBs which are
		stored in ready lists (all of which have the same xItemValue value) get a
		share of the CPU.  However, if the xItemValue is the same as the back marker
		the iteration loop below will not end.  Therefore the value is checked
		first, and the algorithm slightly modified if necessary. */
		if( xValueOfInsertion == portMAX_DELAY )
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800228c:	d103      	bne.n	8002296 <vListInsert+0x20>
		{
			pxIterator = pxList->xListEnd.pxPrevious;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	617b      	str	r3, [r7, #20]
 8002294:	e028      	b.n	80022e8 <vListInsert+0x72>
				4) Using a queue or semaphore before it has been initialised or
				   before the scheduler has been started (are interrupts firing
				   before vTaskStartScheduler() has been called?).
			**********************************************************************/

			pxIterator = ( ListItem_t * ) &( pxList->xListEnd );
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3308      	adds	r3, #8
 800229a:	617b      	str	r3, [r7, #20]

			while( pxIterator->pxNext != ( ListItem_t * ) &( pxList->xListEnd ) )
 800229c:	e01a      	b.n	80022d4 <vListInsert+0x5e>
			{
				TickType_t xNextValue = pxIterator->pxNext->xItemValue;
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	60fb      	str	r3, [r7, #12]

				if( xNextValue == portMAX_DELAY )
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80022ac:	d019      	beq.n	80022e2 <vListInsert+0x6c>
				{
					break;
				}

				if( prvDeadlineIsEarlier( xNextValue, xValueOfInsertion ) )
 80022ae:	6939      	ldr	r1, [r7, #16]
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f7ff ffd0 	bl	8002256 <prvDeadlineIsEarlier>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d003      	beq.n	80022c4 <vListInsert+0x4e>
				{
					pxIterator = pxIterator->pxNext;
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	617b      	str	r3, [r7, #20]
					continue;
 80022c2:	e007      	b.n	80022d4 <vListInsert+0x5e>
				}

				if( xNextValue == xValueOfInsertion )
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d10c      	bne.n	80022e6 <vListInsert+0x70>
				{
					pxIterator = pxIterator->pxNext;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	617b      	str	r3, [r7, #20]
					continue;
 80022d2:	bf00      	nop
			while( pxIterator->pxNext != ( ListItem_t * ) &( pxList->xListEnd ) )
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3308      	adds	r3, #8
 80022dc:	429a      	cmp	r2, r3
 80022de:	d1de      	bne.n	800229e <vListInsert+0x28>
 80022e0:	e002      	b.n	80022e8 <vListInsert+0x72>
					break;
 80022e2:	bf00      	nop
 80022e4:	e000      	b.n	80022e8 <vListInsert+0x72>
				}

				break;
 80022e6:	bf00      	nop
			}
		}

		pxNewListItem->pxNext = pxIterator->pxNext;
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	605a      	str	r2, [r3, #4]
		pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	609a      	str	r2, [r3, #8]
		pxNewListItem->pxPrevious = pxIterator;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	609a      	str	r2, [r3, #8]
		pxIterator->pxNext = pxNewListItem;
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	605a      	str	r2, [r3, #4]

		/* Remember which list the item is in.  This allows fast removal of the
		item later. */
		pxNewListItem->pxContainer = pxList;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	611a      	str	r2, [r3, #16]

		( pxList->uxNumberOfItems )++;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	1c5a      	adds	r2, r3, #1
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	601a      	str	r2, [r3, #0]
			 ( void ) xOwner;

			 pxIterator = pxIterator->pxNext;
		 }
		 */
	}
 8002314:	bf00      	nop
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <uxListRemove>:
#endif
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6892      	ldr	r2, [r2, #8]
 8002332:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	6852      	ldr	r2, [r2, #4]
 800233c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	429a      	cmp	r2, r3
 8002346:	d103      	bne.n	8002350 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	1e5a      	subs	r2, r3, #1
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d10b      	bne.n	800239c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002388:	f383 8811 	msr	BASEPRI, r3
 800238c:	f3bf 8f6f 	isb	sy
 8002390:	f3bf 8f4f 	dsb	sy
 8002394:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002396:	bf00      	nop
 8002398:	bf00      	nop
 800239a:	e7fd      	b.n	8002398 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800239c:	f002 f91c 	bl	80045d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023a8:	68f9      	ldr	r1, [r7, #12]
 80023aa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80023ac:	fb01 f303 	mul.w	r3, r1, r3
 80023b0:	441a      	add	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2200      	movs	r2, #0
 80023ba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023cc:	3b01      	subs	r3, #1
 80023ce:	68f9      	ldr	r1, [r7, #12]
 80023d0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80023d2:	fb01 f303 	mul.w	r3, r1, r3
 80023d6:	441a      	add	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	22ff      	movs	r2, #255	@ 0xff
 80023e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	22ff      	movs	r2, #255	@ 0xff
 80023e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d109      	bne.n	8002406 <xQueueGenericReset+0x96>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00f      	beq.n	800241a <xQueueGenericReset+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	3310      	adds	r3, #16
 80023fe:	4618      	mov	r0, r3
 8002400:	f001 f8ce 	bl	80035a0 <xTaskRemoveFromEventList>
 8002404:	e009      	b.n	800241a <xQueueGenericReset+0xaa>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	3310      	adds	r3, #16
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff fed2 	bl	80021b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	3324      	adds	r3, #36	@ 0x24
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fecd 	bl	80021b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800241a:	f002 f90f 	bl	800463c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800241e:	2301      	movs	r3, #1
}
 8002420:	4618      	mov	r0, r3
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08a      	sub	sp, #40	@ 0x28
 800242c:	af02      	add	r7, sp, #8
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	4613      	mov	r3, r2
 8002434:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d10b      	bne.n	8002454 <xQueueGenericCreate+0x2c>
	__asm volatile
 800243c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002440:	f383 8811 	msr	BASEPRI, r3
 8002444:	f3bf 8f6f 	isb	sy
 8002448:	f3bf 8f4f 	dsb	sy
 800244c:	613b      	str	r3, [r7, #16]
}
 800244e:	bf00      	nop
 8002450:	bf00      	nop
 8002452:	e7fd      	b.n	8002450 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	fb02 f303 	mul.w	r3, r2, r3
 800245c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	3350      	adds	r3, #80	@ 0x50
 8002462:	4618      	mov	r0, r3
 8002464:	f002 f9da 	bl	800481c <pvPortMalloc>
 8002468:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00d      	beq.n	800248c <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	3350      	adds	r3, #80	@ 0x50
 8002478:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800247a:	79fa      	ldrb	r2, [r7, #7]
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	4613      	mov	r3, r2
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	68b9      	ldr	r1, [r7, #8]
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f000 f805 	bl	8002496 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800248c:	69bb      	ldr	r3, [r7, #24]
	}
 800248e:	4618      	mov	r0, r3
 8002490:	3720      	adds	r7, #32
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b084      	sub	sp, #16
 800249a:	af00      	add	r7, sp, #0
 800249c:	60f8      	str	r0, [r7, #12]
 800249e:	60b9      	str	r1, [r7, #8]
 80024a0:	607a      	str	r2, [r7, #4]
 80024a2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d103      	bne.n	80024b2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	e002      	b.n	80024b8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	68ba      	ldr	r2, [r7, #8]
 80024c2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80024c4:	2101      	movs	r1, #1
 80024c6:	69b8      	ldr	r0, [r7, #24]
 80024c8:	f7ff ff52 	bl	8002370 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	78fa      	ldrb	r2, [r7, #3]
 80024d0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80024d4:	bf00      	nop
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08e      	sub	sp, #56	@ 0x38
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
 80024e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80024ea:	2300      	movs	r3, #0
 80024ec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80024f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10b      	bne.n	8002510 <xQueueGenericSend+0x34>
	__asm volatile
 80024f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024fc:	f383 8811 	msr	BASEPRI, r3
 8002500:	f3bf 8f6f 	isb	sy
 8002504:	f3bf 8f4f 	dsb	sy
 8002508:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800250a:	bf00      	nop
 800250c:	bf00      	nop
 800250e:	e7fd      	b.n	800250c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d103      	bne.n	800251e <xQueueGenericSend+0x42>
 8002516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <xQueueGenericSend+0x46>
 800251e:	2301      	movs	r3, #1
 8002520:	e000      	b.n	8002524 <xQueueGenericSend+0x48>
 8002522:	2300      	movs	r3, #0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10b      	bne.n	8002540 <xQueueGenericSend+0x64>
	__asm volatile
 8002528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800252c:	f383 8811 	msr	BASEPRI, r3
 8002530:	f3bf 8f6f 	isb	sy
 8002534:	f3bf 8f4f 	dsb	sy
 8002538:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800253a:	bf00      	nop
 800253c:	bf00      	nop
 800253e:	e7fd      	b.n	800253c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	2b02      	cmp	r3, #2
 8002544:	d103      	bne.n	800254e <xQueueGenericSend+0x72>
 8002546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800254a:	2b01      	cmp	r3, #1
 800254c:	d101      	bne.n	8002552 <xQueueGenericSend+0x76>
 800254e:	2301      	movs	r3, #1
 8002550:	e000      	b.n	8002554 <xQueueGenericSend+0x78>
 8002552:	2300      	movs	r3, #0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d10b      	bne.n	8002570 <xQueueGenericSend+0x94>
	__asm volatile
 8002558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800255c:	f383 8811 	msr	BASEPRI, r3
 8002560:	f3bf 8f6f 	isb	sy
 8002564:	f3bf 8f4f 	dsb	sy
 8002568:	623b      	str	r3, [r7, #32]
}
 800256a:	bf00      	nop
 800256c:	bf00      	nop
 800256e:	e7fd      	b.n	800256c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002570:	f001 f9b0 	bl	80038d4 <xTaskGetSchedulerState>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d102      	bne.n	8002580 <xQueueGenericSend+0xa4>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <xQueueGenericSend+0xa8>
 8002580:	2301      	movs	r3, #1
 8002582:	e000      	b.n	8002586 <xQueueGenericSend+0xaa>
 8002584:	2300      	movs	r3, #0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10b      	bne.n	80025a2 <xQueueGenericSend+0xc6>
	__asm volatile
 800258a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800258e:	f383 8811 	msr	BASEPRI, r3
 8002592:	f3bf 8f6f 	isb	sy
 8002596:	f3bf 8f4f 	dsb	sy
 800259a:	61fb      	str	r3, [r7, #28]
}
 800259c:	bf00      	nop
 800259e:	bf00      	nop
 80025a0:	e7fd      	b.n	800259e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80025a2:	f002 f819 	bl	80045d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80025a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d302      	bcc.n	80025b8 <xQueueGenericSend+0xdc>
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d112      	bne.n	80025de <xQueueGenericSend+0x102>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	68b9      	ldr	r1, [r7, #8]
 80025bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80025be:	f000 f9ed 	bl	800299c <prvCopyDataToQueue>
 80025c2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d004      	beq.n	80025d6 <xQueueGenericSend+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ce:	3324      	adds	r3, #36	@ 0x24
 80025d0:	4618      	mov	r0, r3
 80025d2:	f000 ffe5 	bl	80035a0 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80025d6:	f002 f831 	bl	800463c <vPortExitCritical>
				return pdPASS;
 80025da:	2301      	movs	r3, #1
 80025dc:	e062      	b.n	80026a4 <xQueueGenericSend+0x1c8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d103      	bne.n	80025ec <xQueueGenericSend+0x110>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80025e4:	f002 f82a 	bl	800463c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	e05b      	b.n	80026a4 <xQueueGenericSend+0x1c8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80025ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d106      	bne.n	8002600 <xQueueGenericSend+0x124>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80025f2:	f107 0314 	add.w	r3, r7, #20
 80025f6:	4618      	mov	r0, r3
 80025f8:	f001 f830 	bl	800365c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80025fc:	2301      	movs	r3, #1
 80025fe:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002600:	f002 f81c 	bl	800463c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002604:	f000 fe18 	bl	8003238 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002608:	f001 ffe6 	bl	80045d8 <vPortEnterCritical>
 800260c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800260e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002612:	b25b      	sxtb	r3, r3
 8002614:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002618:	d103      	bne.n	8002622 <xQueueGenericSend+0x146>
 800261a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002624:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002628:	b25b      	sxtb	r3, r3
 800262a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800262e:	d103      	bne.n	8002638 <xQueueGenericSend+0x15c>
 8002630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002638:	f002 f800 	bl	800463c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800263c:	1d3a      	adds	r2, r7, #4
 800263e:	f107 0314 	add.w	r3, r7, #20
 8002642:	4611      	mov	r1, r2
 8002644:	4618      	mov	r0, r3
 8002646:	f001 f81f 	bl	8003688 <xTaskCheckForTimeOut>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d123      	bne.n	8002698 <xQueueGenericSend+0x1bc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002650:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002652:	f000 fa9b 	bl	8002b8c <prvIsQueueFull>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d017      	beq.n	800268c <xQueueGenericSend+0x1b0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800265c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800265e:	3310      	adds	r3, #16
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	4611      	mov	r1, r2
 8002664:	4618      	mov	r0, r3
 8002666:	f000 ff49 	bl	80034fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800266a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800266c:	f000 fa26 	bl	8002abc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002670:	f000 fdf0 	bl	8003254 <xTaskResumeAll>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d193      	bne.n	80025a2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800267a:	4b0c      	ldr	r3, [pc, #48]	@ (80026ac <xQueueGenericSend+0x1d0>)
 800267c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	f3bf 8f4f 	dsb	sy
 8002686:	f3bf 8f6f 	isb	sy
 800268a:	e78a      	b.n	80025a2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800268c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800268e:	f000 fa15 	bl	8002abc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002692:	f000 fddf 	bl	8003254 <xTaskResumeAll>
 8002696:	e784      	b.n	80025a2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002698:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800269a:	f000 fa0f 	bl	8002abc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800269e:	f000 fdd9 	bl	8003254 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80026a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3738      	adds	r7, #56	@ 0x38
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	e000ed04 	.word	0xe000ed04

080026b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b090      	sub	sp, #64	@ 0x40
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
 80026bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80026c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10b      	bne.n	80026e0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80026c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026cc:	f383 8811 	msr	BASEPRI, r3
 80026d0:	f3bf 8f6f 	isb	sy
 80026d4:	f3bf 8f4f 	dsb	sy
 80026d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80026da:	bf00      	nop
 80026dc:	bf00      	nop
 80026de:	e7fd      	b.n	80026dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d103      	bne.n	80026ee <xQueueGenericSendFromISR+0x3e>
 80026e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <xQueueGenericSendFromISR+0x42>
 80026ee:	2301      	movs	r3, #1
 80026f0:	e000      	b.n	80026f4 <xQueueGenericSendFromISR+0x44>
 80026f2:	2300      	movs	r3, #0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10b      	bne.n	8002710 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80026f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026fc:	f383 8811 	msr	BASEPRI, r3
 8002700:	f3bf 8f6f 	isb	sy
 8002704:	f3bf 8f4f 	dsb	sy
 8002708:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800270a:	bf00      	nop
 800270c:	bf00      	nop
 800270e:	e7fd      	b.n	800270c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	2b02      	cmp	r3, #2
 8002714:	d103      	bne.n	800271e <xQueueGenericSendFromISR+0x6e>
 8002716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002718:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800271a:	2b01      	cmp	r3, #1
 800271c:	d101      	bne.n	8002722 <xQueueGenericSendFromISR+0x72>
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <xQueueGenericSendFromISR+0x74>
 8002722:	2300      	movs	r3, #0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10b      	bne.n	8002740 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800272c:	f383 8811 	msr	BASEPRI, r3
 8002730:	f3bf 8f6f 	isb	sy
 8002734:	f3bf 8f4f 	dsb	sy
 8002738:	623b      	str	r3, [r7, #32]
}
 800273a:	bf00      	nop
 800273c:	bf00      	nop
 800273e:	e7fd      	b.n	800273c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002740:	f002 f82a 	bl	8004798 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002744:	f3ef 8211 	mrs	r2, BASEPRI
 8002748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800274c:	f383 8811 	msr	BASEPRI, r3
 8002750:	f3bf 8f6f 	isb	sy
 8002754:	f3bf 8f4f 	dsb	sy
 8002758:	61fa      	str	r2, [r7, #28]
 800275a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800275c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800275e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002762:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002768:	429a      	cmp	r2, r3
 800276a:	d302      	bcc.n	8002772 <xQueueGenericSendFromISR+0xc2>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	2b02      	cmp	r3, #2
 8002770:	d12f      	bne.n	80027d2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002774:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002778:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800277c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800277e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002780:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	68b9      	ldr	r1, [r7, #8]
 8002786:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002788:	f000 f908 	bl	800299c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800278c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002790:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002794:	d112      	bne.n	80027bc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279a:	2b00      	cmp	r3, #0
 800279c:	d016      	beq.n	80027cc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800279e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027a0:	3324      	adds	r3, #36	@ 0x24
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 fefc 	bl	80035a0 <xTaskRemoveFromEventList>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00e      	beq.n	80027cc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00b      	beq.n	80027cc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	e007      	b.n	80027cc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80027bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80027c0:	3301      	adds	r3, #1
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	b25a      	sxtb	r2, r3
 80027c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80027cc:	2301      	movs	r3, #1
 80027ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80027d0:	e001      	b.n	80027d6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027d8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80027e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80027e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3740      	adds	r7, #64	@ 0x40
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b08c      	sub	sp, #48	@ 0x30
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80027f8:	2300      	movs	r3, #0
 80027fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10b      	bne.n	800281e <xQueueReceive+0x32>
	__asm volatile
 8002806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800280a:	f383 8811 	msr	BASEPRI, r3
 800280e:	f3bf 8f6f 	isb	sy
 8002812:	f3bf 8f4f 	dsb	sy
 8002816:	623b      	str	r3, [r7, #32]
}
 8002818:	bf00      	nop
 800281a:	bf00      	nop
 800281c:	e7fd      	b.n	800281a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d103      	bne.n	800282c <xQueueReceive+0x40>
 8002824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002828:	2b00      	cmp	r3, #0
 800282a:	d101      	bne.n	8002830 <xQueueReceive+0x44>
 800282c:	2301      	movs	r3, #1
 800282e:	e000      	b.n	8002832 <xQueueReceive+0x46>
 8002830:	2300      	movs	r3, #0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10b      	bne.n	800284e <xQueueReceive+0x62>
	__asm volatile
 8002836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800283a:	f383 8811 	msr	BASEPRI, r3
 800283e:	f3bf 8f6f 	isb	sy
 8002842:	f3bf 8f4f 	dsb	sy
 8002846:	61fb      	str	r3, [r7, #28]
}
 8002848:	bf00      	nop
 800284a:	bf00      	nop
 800284c:	e7fd      	b.n	800284a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800284e:	f001 f841 	bl	80038d4 <xTaskGetSchedulerState>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d102      	bne.n	800285e <xQueueReceive+0x72>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <xQueueReceive+0x76>
 800285e:	2301      	movs	r3, #1
 8002860:	e000      	b.n	8002864 <xQueueReceive+0x78>
 8002862:	2300      	movs	r3, #0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10b      	bne.n	8002880 <xQueueReceive+0x94>
	__asm volatile
 8002868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800286c:	f383 8811 	msr	BASEPRI, r3
 8002870:	f3bf 8f6f 	isb	sy
 8002874:	f3bf 8f4f 	dsb	sy
 8002878:	61bb      	str	r3, [r7, #24]
}
 800287a:	bf00      	nop
 800287c:	bf00      	nop
 800287e:	e7fd      	b.n	800287c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002880:	f001 feaa 	bl	80045d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002888:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800288a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288c:	2b00      	cmp	r3, #0
 800288e:	d014      	beq.n	80028ba <xQueueReceive+0xce>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002890:	68b9      	ldr	r1, [r7, #8]
 8002892:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002894:	f000 f8ec 	bl	8002a70 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289a:	1e5a      	subs	r2, r3, #1
 800289c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800289e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d004      	beq.n	80028b2 <xQueueReceive+0xc6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028aa:	3310      	adds	r3, #16
 80028ac:	4618      	mov	r0, r3
 80028ae:	f000 fe77 	bl	80035a0 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80028b2:	f001 fec3 	bl	800463c <vPortExitCritical>
				return pdPASS;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e069      	b.n	800298e <xQueueReceive+0x1a2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d103      	bne.n	80028c8 <xQueueReceive+0xdc>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80028c0:	f001 febc 	bl	800463c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80028c4:	2300      	movs	r3, #0
 80028c6:	e062      	b.n	800298e <xQueueReceive+0x1a2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80028c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d106      	bne.n	80028dc <xQueueReceive+0xf0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80028ce:	f107 0310 	add.w	r3, r7, #16
 80028d2:	4618      	mov	r0, r3
 80028d4:	f000 fec2 	bl	800365c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80028d8:	2301      	movs	r3, #1
 80028da:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80028dc:	f001 feae 	bl	800463c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80028e0:	f000 fcaa 	bl	8003238 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80028e4:	f001 fe78 	bl	80045d8 <vPortEnterCritical>
 80028e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80028ee:	b25b      	sxtb	r3, r3
 80028f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80028f4:	d103      	bne.n	80028fe <xQueueReceive+0x112>
 80028f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002900:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002904:	b25b      	sxtb	r3, r3
 8002906:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800290a:	d103      	bne.n	8002914 <xQueueReceive+0x128>
 800290c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002914:	f001 fe92 	bl	800463c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002918:	1d3a      	adds	r2, r7, #4
 800291a:	f107 0310 	add.w	r3, r7, #16
 800291e:	4611      	mov	r1, r2
 8002920:	4618      	mov	r0, r3
 8002922:	f000 feb1 	bl	8003688 <xTaskCheckForTimeOut>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d123      	bne.n	8002974 <xQueueReceive+0x188>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800292c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800292e:	f000 f917 	bl	8002b60 <prvIsQueueEmpty>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d017      	beq.n	8002968 <xQueueReceive+0x17c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800293a:	3324      	adds	r3, #36	@ 0x24
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	4611      	mov	r1, r2
 8002940:	4618      	mov	r0, r3
 8002942:	f000 fddb 	bl	80034fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002946:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002948:	f000 f8b8 	bl	8002abc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800294c:	f000 fc82 	bl	8003254 <xTaskResumeAll>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d194      	bne.n	8002880 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002956:	4b10      	ldr	r3, [pc, #64]	@ (8002998 <xQueueReceive+0x1ac>)
 8002958:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	f3bf 8f4f 	dsb	sy
 8002962:	f3bf 8f6f 	isb	sy
 8002966:	e78b      	b.n	8002880 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002968:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800296a:	f000 f8a7 	bl	8002abc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800296e:	f000 fc71 	bl	8003254 <xTaskResumeAll>
 8002972:	e785      	b.n	8002880 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002974:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002976:	f000 f8a1 	bl	8002abc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800297a:	f000 fc6b 	bl	8003254 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800297e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002980:	f000 f8ee 	bl	8002b60 <prvIsQueueEmpty>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	f43f af7a 	beq.w	8002880 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800298c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800298e:	4618      	mov	r0, r3
 8002990:	3730      	adds	r7, #48	@ 0x30
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	e000ed04 	.word	0xe000ed04

0800299c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80029a8:	2300      	movs	r3, #0
 80029aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10d      	bne.n	80029d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d14d      	bne.n	8002a5e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 ffa2 	bl	8003910 <xTaskPriorityDisinherit>
 80029cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	609a      	str	r2, [r3, #8]
 80029d4:	e043      	b.n	8002a5e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d119      	bne.n	8002a10 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6858      	ldr	r0, [r3, #4]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e4:	461a      	mov	r2, r3
 80029e6:	68b9      	ldr	r1, [r7, #8]
 80029e8:	f002 f932 	bl	8004c50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f4:	441a      	add	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d32b      	bcc.n	8002a5e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	e026      	b.n	8002a5e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	68d8      	ldr	r0, [r3, #12]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a18:	461a      	mov	r2, r3
 8002a1a:	68b9      	ldr	r1, [r7, #8]
 8002a1c:	f002 f918 	bl	8004c50 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	68da      	ldr	r2, [r3, #12]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a28:	425b      	negs	r3, r3
 8002a2a:	441a      	add	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	68da      	ldr	r2, [r3, #12]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d207      	bcs.n	8002a4c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a44:	425b      	negs	r3, r3
 8002a46:	441a      	add	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d105      	bne.n	8002a5e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d002      	beq.n	8002a5e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1c5a      	adds	r2, r3, #1
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002a66:	697b      	ldr	r3, [r7, #20]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3718      	adds	r7, #24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d018      	beq.n	8002ab4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68da      	ldr	r2, [r3, #12]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8a:	441a      	add	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	68da      	ldr	r2, [r3, #12]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d303      	bcc.n	8002aa4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68d9      	ldr	r1, [r3, #12]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aac:	461a      	mov	r2, r3
 8002aae:	6838      	ldr	r0, [r7, #0]
 8002ab0:	f002 f8ce 	bl	8004c50 <memcpy>
	}
}
 8002ab4:	bf00      	nop
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002ac4:	f001 fd88 	bl	80045d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002ace:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ad0:	e011      	b.n	8002af6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d012      	beq.n	8002b00 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	3324      	adds	r3, #36	@ 0x24
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f000 fd5e 	bl	80035a0 <xTaskRemoveFromEventList>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002aea:	f000 fe31 	bl	8003750 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002aee:	7bfb      	ldrb	r3, [r7, #15]
 8002af0:	3b01      	subs	r3, #1
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	dce9      	bgt.n	8002ad2 <prvUnlockQueue+0x16>
 8002afe:	e000      	b.n	8002b02 <prvUnlockQueue+0x46>
					break;
 8002b00:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	22ff      	movs	r2, #255	@ 0xff
 8002b06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002b0a:	f001 fd97 	bl	800463c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002b0e:	f001 fd63 	bl	80045d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002b18:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b1a:	e011      	b.n	8002b40 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d012      	beq.n	8002b4a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	3310      	adds	r3, #16
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f000 fd39 	bl	80035a0 <xTaskRemoveFromEventList>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002b34:	f000 fe0c 	bl	8003750 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002b38:	7bbb      	ldrb	r3, [r7, #14]
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	dce9      	bgt.n	8002b1c <prvUnlockQueue+0x60>
 8002b48:	e000      	b.n	8002b4c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002b4a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	22ff      	movs	r2, #255	@ 0xff
 8002b50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002b54:	f001 fd72 	bl	800463c <vPortExitCritical>
}
 8002b58:	bf00      	nop
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b68:	f001 fd36 	bl	80045d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d102      	bne.n	8002b7a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002b74:	2301      	movs	r3, #1
 8002b76:	60fb      	str	r3, [r7, #12]
 8002b78:	e001      	b.n	8002b7e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b7e:	f001 fd5d 	bl	800463c <vPortExitCritical>

	return xReturn;
 8002b82:	68fb      	ldr	r3, [r7, #12]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3710      	adds	r7, #16
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b94:	f001 fd20 	bl	80045d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d102      	bne.n	8002baa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	e001      	b.n	8002bae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002baa:	2300      	movs	r3, #0
 8002bac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002bae:	f001 fd45 	bl	800463c <vPortExitCritical>

	return xReturn;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3710      	adds	r7, #16
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60fb      	str	r3, [r7, #12]
 8002bca:	e014      	b.n	8002bf6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002bcc:	4a0f      	ldr	r2, [pc, #60]	@ (8002c0c <vQueueAddToRegistry+0x50>)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d10b      	bne.n	8002bf0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002bd8:	490c      	ldr	r1, [pc, #48]	@ (8002c0c <vQueueAddToRegistry+0x50>)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002be2:	4a0a      	ldr	r2, [pc, #40]	@ (8002c0c <vQueueAddToRegistry+0x50>)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	4413      	add	r3, r2
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002bee:	e006      	b.n	8002bfe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2b07      	cmp	r3, #7
 8002bfa:	d9e7      	bls.n	8002bcc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002bfc:	bf00      	nop
 8002bfe:	bf00      	nop
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	20000084 	.word	0x20000084

08002c10 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002c20:	f001 fcda 	bl	80045d8 <vPortEnterCritical>
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002c2a:	b25b      	sxtb	r3, r3
 8002c2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c30:	d103      	bne.n	8002c3a <vQueueWaitForMessageRestricted+0x2a>
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002c40:	b25b      	sxtb	r3, r3
 8002c42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c46:	d103      	bne.n	8002c50 <vQueueWaitForMessageRestricted+0x40>
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002c50:	f001 fcf4 	bl	800463c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d106      	bne.n	8002c6a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	3324      	adds	r3, #36	@ 0x24
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	68b9      	ldr	r1, [r7, #8]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f000 fc6f 	bl	8003548 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002c6a:	6978      	ldr	r0, [r7, #20]
 8002c6c:	f7ff ff26 	bl	8002abc <prvUnlockQueue>
	}
 8002c70:	bf00      	nop
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b08c      	sub	sp, #48	@ 0x30
 8002c7c:	af04      	add	r7, sp, #16
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	603b      	str	r3, [r7, #0]
 8002c84:	4613      	mov	r3, r2
 8002c86:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002c88:	88fb      	ldrh	r3, [r7, #6]
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f001 fdc5 	bl	800481c <pvPortMalloc>
 8002c92:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00e      	beq.n	8002cb8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002c9a:	207c      	movs	r0, #124	@ 0x7c
 8002c9c:	f001 fdbe 	bl	800481c <pvPortMalloc>
 8002ca0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d003      	beq.n	8002cb0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	697a      	ldr	r2, [r7, #20]
 8002cac:	631a      	str	r2, [r3, #48]	@ 0x30
 8002cae:	e005      	b.n	8002cbc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002cb0:	6978      	ldr	r0, [r7, #20]
 8002cb2:	f001 fe81 	bl	80049b8 <vPortFree>
 8002cb6:	e001      	b.n	8002cbc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d013      	beq.n	8002cea <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002cc2:	88fa      	ldrh	r2, [r7, #6]
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	9303      	str	r3, [sp, #12]
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	9302      	str	r3, [sp, #8]
 8002ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cce:	9301      	str	r3, [sp, #4]
 8002cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	68b9      	ldr	r1, [r7, #8]
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f000 f86e 	bl	8002dba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002cde:	69f8      	ldr	r0, [r7, #28]
 8002ce0:	f000 f8fc 	bl	8002edc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	61bb      	str	r3, [r7, #24]
 8002ce8:	e002      	b.n	8002cf0 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002cea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002cee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002cf0:	69bb      	ldr	r3, [r7, #24]
	}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3720      	adds	r7, #32
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <xPeriodicTaskEDFVDCreate>:
										 const TickType_t uxRelativeDeadline,
										 const eTaskCrit_t eCriticality,
										 const TickType_t uxWCET_LO,
										 const TickType_t uxWCET_HI,
										 TaskHandle_t * const pxCreatedTask )
	{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b08c      	sub	sp, #48	@ 0x30
 8002cfe:	af04      	add	r7, sp, #16
 8002d00:	60f8      	str	r0, [r7, #12]
 8002d02:	60b9      	str	r1, [r7, #8]
 8002d04:	603b      	str	r3, [r7, #0]
 8002d06:	4613      	mov	r3, r2
 8002d08:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002d0a:	88fb      	ldrh	r3, [r7, #6]
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f001 fd84 	bl	800481c <pvPortMalloc>
 8002d14:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00e      	beq.n	8002d3a <xPeriodicTaskEDFVDCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002d1c:	207c      	movs	r0, #124	@ 0x7c
 8002d1e:	f001 fd7d 	bl	800481c <pvPortMalloc>
 8002d22:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <xPeriodicTaskEDFVDCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	697a      	ldr	r2, [r7, #20]
 8002d2e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d30:	e005      	b.n	8002d3e <xPeriodicTaskEDFVDCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002d32:	6978      	ldr	r0, [r7, #20]
 8002d34:	f001 fe40 	bl	80049b8 <vPortFree>
 8002d38:	e001      	b.n	8002d3e <xPeriodicTaskEDFVDCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d032      	beq.n	8002daa <xPeriodicTaskEDFVDCreate+0xb0>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask(	pxTaskCode,
 8002d44:	88fa      	ldrh	r2, [r7, #6]
 8002d46:	2300      	movs	r3, #0
 8002d48:	9303      	str	r3, [sp, #12]
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	9302      	str	r3, [sp, #8]
 8002d4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d50:	9301      	str	r3, [sp, #4]
 8002d52:	2300      	movs	r3, #0
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	68b9      	ldr	r1, [r7, #8]
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 f82d 	bl	8002dba <prvInitialiseNewTask>
									pxCreatedTask,
									pxNewTCB,
									NULL );

			/* Set task state information in the TCB for EDFVD algorithm. */
			pxNewTCB->xPeriod			= uxPeriod;
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d64:	65da      	str	r2, [r3, #92]	@ 0x5c
			pxNewTCB->xRelDeadline		= uxRelativeDeadline;
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d6a:	661a      	str	r2, [r3, #96]	@ 0x60
			pxNewTCB->xAbsDeadline		= xTaskGetTickCount() + uxRelativeDeadline;
 8002d6c:	f000 fafc 	bl	8003368 <xTaskGetTickCount>
 8002d70:	4602      	mov	r2, r0
 8002d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d74:	441a      	add	r2, r3
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	665a      	str	r2, [r3, #100]	@ 0x64
			 {
				 pxNewTCB->xAbsDeadline	= xTaskGetTickCount() + uxRelativeDeadline;
			 }
			 */

			pxNewTCB->xVirtualDeadline 	= pxNewTCB->xAbsDeadline;	/* It is updated if the system is in LO-criticality mode using fEDFVD_x. */
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	669a      	str	r2, [r3, #104]	@ 0x68
			pxNewTCB->eCriticality		= eCriticality;
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002d88:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
			pxNewTCB->xWCET_LO			= uxWCET_LO;
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d90:	671a      	str	r2, [r3, #112]	@ 0x70
			pxNewTCB->xWCET_HI			= uxWCET_HI;
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002d96:	675a      	str	r2, [r3, #116]	@ 0x74
			pxNewTCB->xExecTime			= 0;
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	679a      	str	r2, [r3, #120]	@ 0x78

			prvAddNewTaskToReadyList( pxNewTCB );
 8002d9e:	69f8      	ldr	r0, [r7, #28]
 8002da0:	f000 f89c 	bl	8002edc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002da4:	2301      	movs	r3, #1
 8002da6:	61bb      	str	r3, [r7, #24]
 8002da8:	e002      	b.n	8002db0 <xPeriodicTaskEDFVDCreate+0xb6>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002daa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002dae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002db0:	69bb      	ldr	r3, [r7, #24]

	}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3720      	adds	r7, #32
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b088      	sub	sp, #32
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	60f8      	str	r0, [r7, #12]
 8002dc2:	60b9      	str	r1, [r7, #8]
 8002dc4:	607a      	str	r2, [r7, #4]
 8002dc6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dca:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	21a5      	movs	r1, #165	@ 0xa5
 8002dd4:	f001 ff10 	bl	8004bf8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002de2:	3b01      	subs	r3, #1
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	f023 0307 	bic.w	r3, r3, #7
 8002df0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00b      	beq.n	8002e14 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8002dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e00:	f383 8811 	msr	BASEPRI, r3
 8002e04:	f3bf 8f6f 	isb	sy
 8002e08:	f3bf 8f4f 	dsb	sy
 8002e0c:	617b      	str	r3, [r7, #20]
}
 8002e0e:	bf00      	nop
 8002e10:	bf00      	nop
 8002e12:	e7fd      	b.n	8002e10 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d01f      	beq.n	8002e5a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	61fb      	str	r3, [r7, #28]
 8002e1e:	e012      	b.n	8002e46 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	4413      	add	r3, r2
 8002e26:	7819      	ldrb	r1, [r3, #0]
 8002e28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	3334      	adds	r3, #52	@ 0x34
 8002e30:	460a      	mov	r2, r1
 8002e32:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002e34:	68ba      	ldr	r2, [r7, #8]
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	4413      	add	r3, r2
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d006      	beq.n	8002e4e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	3301      	adds	r3, #1
 8002e44:	61fb      	str	r3, [r7, #28]
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	2b0f      	cmp	r3, #15
 8002e4a:	d9e9      	bls.n	8002e20 <prvInitialiseNewTask+0x66>
 8002e4c:	e000      	b.n	8002e50 <prvInitialiseNewTask+0x96>
			{
				break;
 8002e4e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e58:	e003      	b.n	8002e62 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e64:	2b03      	cmp	r3, #3
 8002e66:	d901      	bls.n	8002e6c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e70:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e76:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e80:	3304      	adds	r3, #4
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff f9b6 	bl	80021f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e8a:	3318      	adds	r3, #24
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff f9b1 	bl	80021f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e96:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e9a:	f1c3 0204 	rsb	r2, r3, #4
 8002e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ea6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eaa:	2200      	movs	r2, #0
 8002eac:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	68f9      	ldr	r1, [r7, #12]
 8002eba:	69b8      	ldr	r0, [r7, #24]
 8002ebc:	f001 fa5c 	bl	8004378 <pxPortInitialiseStack>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ec4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d002      	beq.n	8002ed2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ece:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ed0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ed2:	bf00      	nop
 8002ed4:	3720      	adds	r7, #32
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
	...

08002edc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002ee4:	f001 fb78 	bl	80045d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002ee8:	4b23      	ldr	r3, [pc, #140]	@ (8002f78 <prvAddNewTaskToReadyList+0x9c>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	3301      	adds	r3, #1
 8002eee:	4a22      	ldr	r2, [pc, #136]	@ (8002f78 <prvAddNewTaskToReadyList+0x9c>)
 8002ef0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002ef2:	4b22      	ldr	r3, [pc, #136]	@ (8002f7c <prvAddNewTaskToReadyList+0xa0>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d109      	bne.n	8002f0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002efa:	4a20      	ldr	r2, [pc, #128]	@ (8002f7c <prvAddNewTaskToReadyList+0xa0>)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f00:	4b1d      	ldr	r3, [pc, #116]	@ (8002f78 <prvAddNewTaskToReadyList+0x9c>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d110      	bne.n	8002f2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002f08:	f000 fc42 	bl	8003790 <prvInitialiseTaskLists>
 8002f0c:	e00d      	b.n	8002f2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002f0e:	4b1c      	ldr	r3, [pc, #112]	@ (8002f80 <prvAddNewTaskToReadyList+0xa4>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d109      	bne.n	8002f2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f16:	4b19      	ldr	r3, [pc, #100]	@ (8002f7c <prvAddNewTaskToReadyList+0xa0>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d802      	bhi.n	8002f2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002f24:	4a15      	ldr	r2, [pc, #84]	@ (8002f7c <prvAddNewTaskToReadyList+0xa0>)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002f2a:	4b16      	ldr	r3, [pc, #88]	@ (8002f84 <prvAddNewTaskToReadyList+0xa8>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	4a14      	ldr	r2, [pc, #80]	@ (8002f84 <prvAddNewTaskToReadyList+0xa8>)
 8002f32:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002f34:	4b13      	ldr	r3, [pc, #76]	@ (8002f84 <prvAddNewTaskToReadyList+0xa8>)
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002f3c:	4b12      	ldr	r3, [pc, #72]	@ (8002f88 <prvAddNewTaskToReadyList+0xac>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d102      	bne.n	8002f4a <prvAddNewTaskToReadyList+0x6e>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f48:	e001      	b.n	8002f4e <prvAddNewTaskToReadyList+0x72>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6053      	str	r3, [r2, #4]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3304      	adds	r3, #4
 8002f56:	4619      	mov	r1, r3
 8002f58:	480c      	ldr	r0, [pc, #48]	@ (8002f8c <prvAddNewTaskToReadyList+0xb0>)
 8002f5a:	f7ff f98c 	bl	8002276 <vListInsert>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002f5e:	f001 fb6d 	bl	800463c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002f62:	4b07      	ldr	r3, [pc, #28]	@ (8002f80 <prvAddNewTaskToReadyList+0xa4>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <prvAddNewTaskToReadyList+0x92>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f6a:	4b04      	ldr	r3, [pc, #16]	@ (8002f7c <prvAddNewTaskToReadyList+0xa0>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f6e:	bf00      	nop
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	200001a4 	.word	0x200001a4
 8002f7c:	200000cc 	.word	0x200000cc
 8002f80:	200001ac 	.word	0x200001ac
 8002f84:	200001bc 	.word	0x200001bc
 8002f88:	200000c8 	.word	0x200000c8
 8002f8c:	20000164 	.word	0x20000164

08002f90 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b08c      	sub	sp, #48	@ 0x30
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		configASSERT( pxPreviousWakeTime );
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10b      	bne.n	8002fbc <vTaskDelayUntil+0x2c>
	__asm volatile
 8002fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fa8:	f383 8811 	msr	BASEPRI, r3
 8002fac:	f3bf 8f6f 	isb	sy
 8002fb0:	f3bf 8f4f 	dsb	sy
 8002fb4:	617b      	str	r3, [r7, #20]
}
 8002fb6:	bf00      	nop
 8002fb8:	bf00      	nop
 8002fba:	e7fd      	b.n	8002fb8 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10b      	bne.n	8002fda <vTaskDelayUntil+0x4a>
	__asm volatile
 8002fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fc6:	f383 8811 	msr	BASEPRI, r3
 8002fca:	f3bf 8f6f 	isb	sy
 8002fce:	f3bf 8f4f 	dsb	sy
 8002fd2:	613b      	str	r3, [r7, #16]
}
 8002fd4:	bf00      	nop
 8002fd6:	bf00      	nop
 8002fd8:	e7fd      	b.n	8002fd6 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8002fda:	4b41      	ldr	r3, [pc, #260]	@ (80030e0 <vTaskDelayUntil+0x150>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00b      	beq.n	8002ffa <vTaskDelayUntil+0x6a>
	__asm volatile
 8002fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fe6:	f383 8811 	msr	BASEPRI, r3
 8002fea:	f3bf 8f6f 	isb	sy
 8002fee:	f3bf 8f4f 	dsb	sy
 8002ff2:	60fb      	str	r3, [r7, #12]
}
 8002ff4:	bf00      	nop
 8002ff6:	bf00      	nop
 8002ff8:	e7fd      	b.n	8002ff6 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8002ffa:	f000 f91d 	bl	8003238 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8002ffe:	4b39      	ldr	r3, [pc, #228]	@ (80030e4 <vTaskDelayUntil+0x154>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	4413      	add	r3, r2
 800300c:	627b      	str	r3, [r7, #36]	@ 0x24

			if( xConstTickCount < *pxPreviousWakeTime )
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003014:	429a      	cmp	r2, r3
 8003016:	d20b      	bcs.n	8003030 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800301e:	429a      	cmp	r2, r3
 8003020:	d211      	bcs.n	8003046 <vTaskDelayUntil+0xb6>
 8003022:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003026:	429a      	cmp	r2, r3
 8003028:	d90d      	bls.n	8003046 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800302a:	2301      	movs	r3, #1
 800302c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800302e:	e00a      	b.n	8003046 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003036:	429a      	cmp	r2, r3
 8003038:	d303      	bcc.n	8003042 <vTaskDelayUntil+0xb2>
 800303a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800303c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800303e:	429a      	cmp	r2, r3
 8003040:	d901      	bls.n	8003046 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8003042:	2301      	movs	r3, #1
 8003044:	62fb      	str	r3, [r7, #44]	@ 0x2c
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800304a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800304c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800304e:	2b00      	cmp	r3, #0
 8003050:	d033      	beq.n	80030ba <vTaskDelayUntil+0x12a>
				/* ----------------------------------- */

				/* ---------------EDFVD--------------- */
				#if( configUSE_EDFVD_SCHEDULER == 1 )
				{
					TCB_t * const pxTCB = ( TCB_t * ) pxCurrentTCB;
 8003052:	4b25      	ldr	r3, [pc, #148]	@ (80030e8 <vTaskDelayUntil+0x158>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	623b      	str	r3, [r7, #32]

					/* Update values for the next call. */
					pxTCB->xExecTime 	= 0;
 8003058:	6a3b      	ldr	r3, [r7, #32]
 800305a:	2200      	movs	r2, #0
 800305c:	679a      	str	r2, [r3, #120]	@ 0x78
					pxTCB->xAbsDeadline = xTimeToWake + pxTCB->xRelDeadline;
 800305e:	6a3b      	ldr	r3, [r7, #32]
 8003060:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003064:	441a      	add	r2, r3
 8003066:	6a3b      	ldr	r3, [r7, #32]
 8003068:	665a      	str	r2, [r3, #100]	@ 0x64
					
					/* Calculate the offset first to avoid approximation errors. */
					TickType_t offset = ( TickType_t ) ( pxTCB->xRelDeadline * fEDFVD_x );
 800306a:	6a3b      	ldr	r3, [r7, #32]
 800306c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800306e:	ee07 3a90 	vmov	s15, r3
 8003072:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003076:	4b1d      	ldr	r3, [pc, #116]	@ (80030ec <vTaskDelayUntil+0x15c>)
 8003078:	edd3 7a00 	vldr	s15, [r3]
 800307c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003080:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003084:	ee17 3a90 	vmov	r3, s15
 8003088:	61fb      	str	r3, [r7, #28]
					pxTCB->xVirtualDeadline = ( TickType_t ) ( xEDFVD_ModeHI == pdFALSE && pxTCB->eCriticality == eCRITICALITY_HI ) ? ( TickType_t )( xTimeToWake + offset ) : pxTCB->xAbsDeadline;
 800308a:	4b19      	ldr	r3, [pc, #100]	@ (80030f0 <vTaskDelayUntil+0x160>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d108      	bne.n	80030a4 <vTaskDelayUntil+0x114>
 8003092:	6a3b      	ldr	r3, [r7, #32]
 8003094:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8003098:	2b01      	cmp	r3, #1
 800309a:	d103      	bne.n	80030a4 <vTaskDelayUntil+0x114>
 800309c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	4413      	add	r3, r2
 80030a2:	e001      	b.n	80030a8 <vTaskDelayUntil+0x118>
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030a8:	6a3a      	ldr	r2, [r7, #32]
 80030aa:	6693      	str	r3, [r2, #104]	@ 0x68
				#endif
				/* ----------------------------------- */

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80030ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2100      	movs	r1, #0
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 fc93 	bl	80039e0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80030ba:	f000 f8cb 	bl	8003254 <xTaskResumeAll>
 80030be:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d107      	bne.n	80030d6 <vTaskDelayUntil+0x146>
		{
			portYIELD_WITHIN_API();
 80030c6:	4b0b      	ldr	r3, [pc, #44]	@ (80030f4 <vTaskDelayUntil+0x164>)
 80030c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030cc:	601a      	str	r2, [r3, #0]
 80030ce:	f3bf 8f4f 	dsb	sy
 80030d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80030d6:	bf00      	nop
 80030d8:	3730      	adds	r7, #48	@ 0x30
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	200001c8 	.word	0x200001c8
 80030e4:	200001a8 	.word	0x200001a8
 80030e8:	200000cc 	.word	0x200000cc
 80030ec:	200000c4 	.word	0x200000c4
 80030f0:	200000c8 	.word	0x200000c8
 80030f4:	e000ed04 	.word	0xe000ed04

080030f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b090      	sub	sp, #64	@ 0x40
 80030fc:	af06      	add	r7, sp, #24
		/* ---------------EDFVD--------------- */
		#if( configUSE_EDFVD_SCHEDULER == 1 )
		{
			/* The idle task is being created using values that keep it at
			the end of the xReadyTasksEDFVDList list. */
			const TickType_t xIdlePeriod = portMAX_DELAY;
 80030fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003102:	623b      	str	r3, [r7, #32]
			const TickType_t xIdleRelDeadline = portMAX_DELAY;
 8003104:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003108:	61fb      	str	r3, [r7, #28]
			const TickType_t xIdleWCET_LO = 0;
 800310a:	2300      	movs	r3, #0
 800310c:	61bb      	str	r3, [r7, #24]
			const TickType_t xIdleWCET_HI = 0;
 800310e:	2300      	movs	r3, #0
 8003110:	617b      	str	r3, [r7, #20]

			xReturn = xPeriodicTaskEDFVDCreate(	prvIdleTask,
 8003112:	4b40      	ldr	r3, [pc, #256]	@ (8003214 <vTaskStartScheduler+0x11c>)
 8003114:	9305      	str	r3, [sp, #20]
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	9304      	str	r3, [sp, #16]
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	9303      	str	r3, [sp, #12]
 800311e:	2301      	movs	r3, #1
 8003120:	9302      	str	r3, [sp, #8]
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	9301      	str	r3, [sp, #4]
 8003126:	6a3b      	ldr	r3, [r7, #32]
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	2300      	movs	r3, #0
 800312c:	2280      	movs	r2, #128	@ 0x80
 800312e:	493a      	ldr	r1, [pc, #232]	@ (8003218 <vTaskStartScheduler+0x120>)
 8003130:	483a      	ldr	r0, [pc, #232]	@ (800321c <vTaskStartScheduler+0x124>)
 8003132:	f7ff fde2 	bl	8002cfa <xPeriodicTaskEDFVDCreate>
 8003136:	6278      	str	r0, [r7, #36]	@ 0x24
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313a:	2b01      	cmp	r3, #1
 800313c:	d102      	bne.n	8003144 <vTaskStartScheduler+0x4c>
		{
			xReturn = xTimerCreateTimerTask();
 800313e:	f000 fde1 	bl	8003d04 <xTimerCreateTimerTask>
 8003142:	6278      	str	r0, [r7, #36]	@ 0x24
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003146:	2b01      	cmp	r3, #1
 8003148:	d150      	bne.n	80031ec <vTaskStartScheduler+0xf4>
	__asm volatile
 800314a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800314e:	f383 8811 	msr	BASEPRI, r3
 8003152:	f3bf 8f6f 	isb	sy
 8003156:	f3bf 8f4f 	dsb	sy
 800315a:	613b      	str	r3, [r7, #16]
}
 800315c:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800315e:	4b30      	ldr	r3, [pc, #192]	@ (8003220 <vTaskStartScheduler+0x128>)
 8003160:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003164:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003166:	4b2f      	ldr	r3, [pc, #188]	@ (8003224 <vTaskStartScheduler+0x12c>)
 8003168:	2201      	movs	r2, #1
 800316a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800316c:	4b2e      	ldr	r3, [pc, #184]	@ (8003228 <vTaskStartScheduler+0x130>)
 800316e:	2200      	movs	r2, #0
 8003170:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();

		/* ---------------EDFVD--------------- */
		#if( configUSE_EDFVD_SCHEDULER == 1 )
		{
			float U_LO_LO = 0.0f, U_HI_LO = 0.0f, U_HI_HI = 0.0f;
 8003172:	f04f 0300 	mov.w	r3, #0
 8003176:	60bb      	str	r3, [r7, #8]
 8003178:	f04f 0300 	mov.w	r3, #0
 800317c:	607b      	str	r3, [r7, #4]
 800317e:	f04f 0300 	mov.w	r3, #0
 8003182:	603b      	str	r3, [r7, #0]

			/* Calculate utilizations of tasks in xReadyTasksEDFVDList. */
			prvCalculateUtilizationsEDFVD( &xReadyTasksEDFVDList, &U_LO_LO, &U_HI_LO, &U_HI_HI );
 8003184:	463b      	mov	r3, r7
 8003186:	1d3a      	adds	r2, r7, #4
 8003188:	f107 0108 	add.w	r1, r7, #8
 800318c:	4827      	ldr	r0, [pc, #156]	@ (800322c <vTaskStartScheduler+0x134>)
 800318e:	f000 fcbd 	bl	8003b0c <prvCalculateUtilizationsEDFVD>

			/* If the compression factor is set < 1 call prvOrderEDFVDReadyList()
			to sort the xReadyTasksEDFVDList list considering virtual deadlines. */
			if( ( U_LO_LO + U_HI_HI ) <= 1.0f )
 8003192:	ed97 7a02 	vldr	s14, [r7, #8]
 8003196:	edd7 7a00 	vldr	s15, [r7]
 800319a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800319e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80031a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031aa:	d804      	bhi.n	80031b6 <vTaskStartScheduler+0xbe>
			{
				fEDFVD_x = 1.0f;
 80031ac:	4b20      	ldr	r3, [pc, #128]	@ (8003230 <vTaskStartScheduler+0x138>)
 80031ae:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	e017      	b.n	80031e6 <vTaskStartScheduler+0xee>
			}
			else
			{
				fEDFVD_x = U_HI_LO / ( 1.0f - U_LO_LO );
 80031b6:	edd7 6a01 	vldr	s13, [r7, #4]
 80031ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80031be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80031c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80031c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031ca:	4b19      	ldr	r3, [pc, #100]	@ (8003230 <vTaskStartScheduler+0x138>)
 80031cc:	edc3 7a00 	vstr	s15, [r3]
				prvOrderEDFVDReadyList( &xReadyTasksEDFVDList, fEDFVD_x, xEDFVD_ModeHI );
 80031d0:	4b17      	ldr	r3, [pc, #92]	@ (8003230 <vTaskStartScheduler+0x138>)
 80031d2:	edd3 7a00 	vldr	s15, [r3]
 80031d6:	4b17      	ldr	r3, [pc, #92]	@ (8003234 <vTaskStartScheduler+0x13c>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4619      	mov	r1, r3
 80031dc:	eeb0 0a67 	vmov.f32	s0, s15
 80031e0:	4812      	ldr	r0, [pc, #72]	@ (800322c <vTaskStartScheduler+0x134>)
 80031e2:	f000 fd11 	bl	8003c08 <prvOrderEDFVDReadyList>
		#endif
		/* ----------------------------------- */

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80031e6:	f001 f953 	bl	8004490 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80031ea:	e00f      	b.n	800320c <vTaskStartScheduler+0x114>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80031ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80031f2:	d10b      	bne.n	800320c <vTaskStartScheduler+0x114>
	__asm volatile
 80031f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031f8:	f383 8811 	msr	BASEPRI, r3
 80031fc:	f3bf 8f6f 	isb	sy
 8003200:	f3bf 8f4f 	dsb	sy
 8003204:	60fb      	str	r3, [r7, #12]
}
 8003206:	bf00      	nop
 8003208:	bf00      	nop
 800320a:	e7fd      	b.n	8003208 <vTaskStartScheduler+0x110>
}
 800320c:	bf00      	nop
 800320e:	3728      	adds	r7, #40	@ 0x28
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	200001c4 	.word	0x200001c4
 8003218:	08004ca0 	.word	0x08004ca0
 800321c:	08003769 	.word	0x08003769
 8003220:	200001c0 	.word	0x200001c0
 8003224:	200001ac 	.word	0x200001ac
 8003228:	200001a8 	.word	0x200001a8
 800322c:	20000164 	.word	0x20000164
 8003230:	200000c4 	.word	0x200000c4
 8003234:	200000c8 	.word	0x200000c8

08003238 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800323c:	4b04      	ldr	r3, [pc, #16]	@ (8003250 <vTaskSuspendAll+0x18>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	3301      	adds	r3, #1
 8003242:	4a03      	ldr	r2, [pc, #12]	@ (8003250 <vTaskSuspendAll+0x18>)
 8003244:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003246:	bf00      	nop
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	200001c8 	.word	0x200001c8

08003254 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800325a:	2300      	movs	r3, #0
 800325c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800325e:	2300      	movs	r3, #0
 8003260:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003262:	4b39      	ldr	r3, [pc, #228]	@ (8003348 <xTaskResumeAll+0xf4>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10b      	bne.n	8003282 <xTaskResumeAll+0x2e>
	__asm volatile
 800326a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800326e:	f383 8811 	msr	BASEPRI, r3
 8003272:	f3bf 8f6f 	isb	sy
 8003276:	f3bf 8f4f 	dsb	sy
 800327a:	603b      	str	r3, [r7, #0]
}
 800327c:	bf00      	nop
 800327e:	bf00      	nop
 8003280:	e7fd      	b.n	800327e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003282:	f001 f9a9 	bl	80045d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003286:	4b30      	ldr	r3, [pc, #192]	@ (8003348 <xTaskResumeAll+0xf4>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	3b01      	subs	r3, #1
 800328c:	4a2e      	ldr	r2, [pc, #184]	@ (8003348 <xTaskResumeAll+0xf4>)
 800328e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003290:	4b2d      	ldr	r3, [pc, #180]	@ (8003348 <xTaskResumeAll+0xf4>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d14f      	bne.n	8003338 <xTaskResumeAll+0xe4>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003298:	4b2c      	ldr	r3, [pc, #176]	@ (800334c <xTaskResumeAll+0xf8>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d04b      	beq.n	8003338 <xTaskResumeAll+0xe4>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032a0:	e028      	b.n	80032f4 <xTaskResumeAll+0xa0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032a2:	4b2b      	ldr	r3, [pc, #172]	@ (8003350 <xTaskResumeAll+0xfc>)
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	3318      	adds	r3, #24
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff f834 	bl	800231c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	3304      	adds	r3, #4
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff f82f 	bl	800231c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80032be:	4b25      	ldr	r3, [pc, #148]	@ (8003354 <xTaskResumeAll+0x100>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d102      	bne.n	80032cc <xTaskResumeAll+0x78>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032ca:	e001      	b.n	80032d0 <xTaskResumeAll+0x7c>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	6053      	str	r3, [r2, #4]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	3304      	adds	r3, #4
 80032d8:	4619      	mov	r1, r3
 80032da:	481f      	ldr	r0, [pc, #124]	@ (8003358 <xTaskResumeAll+0x104>)
 80032dc:	f7fe ffcb 	bl	8002276 <vListInsert>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032e4:	4b1d      	ldr	r3, [pc, #116]	@ (800335c <xTaskResumeAll+0x108>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d302      	bcc.n	80032f4 <xTaskResumeAll+0xa0>
					{
						xYieldPending = pdTRUE;
 80032ee:	4b1c      	ldr	r3, [pc, #112]	@ (8003360 <xTaskResumeAll+0x10c>)
 80032f0:	2201      	movs	r2, #1
 80032f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032f4:	4b16      	ldr	r3, [pc, #88]	@ (8003350 <xTaskResumeAll+0xfc>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1d2      	bne.n	80032a2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <xTaskResumeAll+0xb2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003302:	f000 fac7 	bl	8003894 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003306:	4b17      	ldr	r3, [pc, #92]	@ (8003364 <xTaskResumeAll+0x110>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d010      	beq.n	8003334 <xTaskResumeAll+0xe0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003312:	f000 f839 	bl	8003388 <xTaskIncrementTick>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d002      	beq.n	8003322 <xTaskResumeAll+0xce>
							{
								xYieldPending = pdTRUE;
 800331c:	4b10      	ldr	r3, [pc, #64]	@ (8003360 <xTaskResumeAll+0x10c>)
 800331e:	2201      	movs	r2, #1
 8003320:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	3b01      	subs	r3, #1
 8003326:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1f1      	bne.n	8003312 <xTaskResumeAll+0xbe>

						xPendedTicks = 0;
 800332e:	4b0d      	ldr	r3, [pc, #52]	@ (8003364 <xTaskResumeAll+0x110>)
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003334:	4b0a      	ldr	r3, [pc, #40]	@ (8003360 <xTaskResumeAll+0x10c>)
 8003336:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003338:	f001 f980 	bl	800463c <vPortExitCritical>

	return xAlreadyYielded;
 800333c:	687b      	ldr	r3, [r7, #4]
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	200001c8 	.word	0x200001c8
 800334c:	200001a4 	.word	0x200001a4
 8003350:	20000150 	.word	0x20000150
 8003354:	200000c8 	.word	0x200000c8
 8003358:	20000164 	.word	0x20000164
 800335c:	200000cc 	.word	0x200000cc
 8003360:	200001b4 	.word	0x200001b4
 8003364:	200001b0 	.word	0x200001b0

08003368 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800336e:	4b05      	ldr	r3, [pc, #20]	@ (8003384 <xTaskGetTickCount+0x1c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003374:	687b      	ldr	r3, [r7, #4]
}
 8003376:	4618      	mov	r0, r3
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	200001a8 	.word	0x200001a8

08003388 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
	TCB_t * pxTCB;
	TickType_t xItemValue;
	BaseType_t xSwitchRequired = pdFALSE;
 800338e:	2300      	movs	r3, #0
 8003390:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003392:	4b41      	ldr	r3, [pc, #260]	@ (8003498 <xTaskIncrementTick+0x110>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d171      	bne.n	800347e <xTaskIncrementTick+0xf6>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800339a:	4b40      	ldr	r3, [pc, #256]	@ (800349c <xTaskIncrementTick+0x114>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	3301      	adds	r3, #1
 80033a0:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80033a2:	4a3e      	ldr	r2, [pc, #248]	@ (800349c <xTaskIncrementTick+0x114>)
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d121      	bne.n	80033f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80033ae:	4b3c      	ldr	r3, [pc, #240]	@ (80034a0 <xTaskIncrementTick+0x118>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00b      	beq.n	80033d0 <xTaskIncrementTick+0x48>
	__asm volatile
 80033b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033bc:	f383 8811 	msr	BASEPRI, r3
 80033c0:	f3bf 8f6f 	isb	sy
 80033c4:	f3bf 8f4f 	dsb	sy
 80033c8:	603b      	str	r3, [r7, #0]
}
 80033ca:	bf00      	nop
 80033cc:	bf00      	nop
 80033ce:	e7fd      	b.n	80033cc <xTaskIncrementTick+0x44>
 80033d0:	4b33      	ldr	r3, [pc, #204]	@ (80034a0 <xTaskIncrementTick+0x118>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	60fb      	str	r3, [r7, #12]
 80033d6:	4b33      	ldr	r3, [pc, #204]	@ (80034a4 <xTaskIncrementTick+0x11c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a31      	ldr	r2, [pc, #196]	@ (80034a0 <xTaskIncrementTick+0x118>)
 80033dc:	6013      	str	r3, [r2, #0]
 80033de:	4a31      	ldr	r2, [pc, #196]	@ (80034a4 <xTaskIncrementTick+0x11c>)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6013      	str	r3, [r2, #0]
 80033e4:	4b30      	ldr	r3, [pc, #192]	@ (80034a8 <xTaskIncrementTick+0x120>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	3301      	adds	r3, #1
 80033ea:	4a2f      	ldr	r2, [pc, #188]	@ (80034a8 <xTaskIncrementTick+0x120>)
 80033ec:	6013      	str	r3, [r2, #0]
 80033ee:	f000 fa51 	bl	8003894 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80033f2:	4b2e      	ldr	r3, [pc, #184]	@ (80034ac <xTaskIncrementTick+0x124>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d339      	bcc.n	8003470 <xTaskIncrementTick+0xe8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033fc:	4b28      	ldr	r3, [pc, #160]	@ (80034a0 <xTaskIncrementTick+0x118>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d104      	bne.n	8003410 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003406:	4b29      	ldr	r3, [pc, #164]	@ (80034ac <xTaskIncrementTick+0x124>)
 8003408:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800340c:	601a      	str	r2, [r3, #0]
					break;
 800340e:	e02f      	b.n	8003470 <xTaskIncrementTick+0xe8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003410:	4b23      	ldr	r3, [pc, #140]	@ (80034a0 <xTaskIncrementTick+0x118>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	429a      	cmp	r2, r3
 8003426:	d203      	bcs.n	8003430 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003428:	4a20      	ldr	r2, [pc, #128]	@ (80034ac <xTaskIncrementTick+0x124>)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800342e:	e01f      	b.n	8003470 <xTaskIncrementTick+0xe8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	3304      	adds	r3, #4
 8003434:	4618      	mov	r0, r3
 8003436:	f7fe ff71 	bl	800231c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800343e:	2b00      	cmp	r3, #0
 8003440:	d004      	beq.n	800344c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	3318      	adds	r3, #24
 8003446:	4618      	mov	r0, r3
 8003448:	f7fe ff68 	bl	800231c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800344c:	4b18      	ldr	r3, [pc, #96]	@ (80034b0 <xTaskIncrementTick+0x128>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d102      	bne.n	800345a <xTaskIncrementTick+0xd2>
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003458:	e001      	b.n	800345e <xTaskIncrementTick+0xd6>
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800345e:	68ba      	ldr	r2, [r7, #8]
 8003460:	6053      	str	r3, [r2, #4]
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	3304      	adds	r3, #4
 8003466:	4619      	mov	r1, r3
 8003468:	4812      	ldr	r0, [pc, #72]	@ (80034b4 <xTaskIncrementTick+0x12c>)
 800346a:	f7fe ff04 	bl	8002276 <vListInsert>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800346e:	e7c5      	b.n	80033fc <xTaskIncrementTick+0x74>

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8003470:	4b11      	ldr	r3, [pc, #68]	@ (80034b8 <xTaskIncrementTick+0x130>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d109      	bne.n	800348c <xTaskIncrementTick+0x104>
			{
				vApplicationTickHook();
 8003478:	f000 fb06 	bl	8003a88 <vApplicationTickHook>
 800347c:	e006      	b.n	800348c <xTaskIncrementTick+0x104>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800347e:	4b0e      	ldr	r3, [pc, #56]	@ (80034b8 <xTaskIncrementTick+0x130>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	3301      	adds	r3, #1
 8003484:	4a0c      	ldr	r2, [pc, #48]	@ (80034b8 <xTaskIncrementTick+0x130>)
 8003486:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8003488:	f000 fafe 	bl	8003a88 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 800348c:	697b      	ldr	r3, [r7, #20]
}
 800348e:	4618      	mov	r0, r3
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	200001c8 	.word	0x200001c8
 800349c:	200001a8 	.word	0x200001a8
 80034a0:	20000148 	.word	0x20000148
 80034a4:	2000014c 	.word	0x2000014c
 80034a8:	200001b8 	.word	0x200001b8
 80034ac:	200001c0 	.word	0x200001c0
 80034b0:	200000c8 	.word	0x200000c8
 80034b4:	20000164 	.word	0x20000164
 80034b8:	200001b0 	.word	0x200001b0

080034bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80034c0:	4b0a      	ldr	r3, [pc, #40]	@ (80034ec <vTaskSwitchContext+0x30>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <vTaskSwitchContext+0x14>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80034c8:	4b09      	ldr	r3, [pc, #36]	@ (80034f0 <vTaskSwitchContext+0x34>)
 80034ca:	2201      	movs	r2, #1
 80034cc:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80034ce:	e007      	b.n	80034e0 <vTaskSwitchContext+0x24>
		xYieldPending = pdFALSE;
 80034d0:	4b07      	ldr	r3, [pc, #28]	@ (80034f0 <vTaskSwitchContext+0x34>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	601a      	str	r2, [r3, #0]
			pxCurrentTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( &xReadyTasksEDFVDList );
 80034d6:	4b07      	ldr	r3, [pc, #28]	@ (80034f4 <vTaskSwitchContext+0x38>)
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	4a06      	ldr	r2, [pc, #24]	@ (80034f8 <vTaskSwitchContext+0x3c>)
 80034de:	6013      	str	r3, [r2, #0]
}
 80034e0:	bf00      	nop
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	200001c8 	.word	0x200001c8
 80034f0:	200001b4 	.word	0x200001b4
 80034f4:	20000164 	.word	0x20000164
 80034f8:	200000cc 	.word	0x200000cc

080034fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10b      	bne.n	8003524 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800350c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003510:	f383 8811 	msr	BASEPRI, r3
 8003514:	f3bf 8f6f 	isb	sy
 8003518:	f3bf 8f4f 	dsb	sy
 800351c:	60fb      	str	r3, [r7, #12]
}
 800351e:	bf00      	nop
 8003520:	bf00      	nop
 8003522:	e7fd      	b.n	8003520 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003524:	4b07      	ldr	r3, [pc, #28]	@ (8003544 <vTaskPlaceOnEventList+0x48>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	3318      	adds	r3, #24
 800352a:	4619      	mov	r1, r3
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f7fe fea2 	bl	8002276 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003532:	2101      	movs	r1, #1
 8003534:	6838      	ldr	r0, [r7, #0]
 8003536:	f000 fa53 	bl	80039e0 <prvAddCurrentTaskToDelayedList>
}
 800353a:	bf00      	nop
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	200000cc 	.word	0x200000cc

08003548 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10b      	bne.n	8003572 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800355a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800355e:	f383 8811 	msr	BASEPRI, r3
 8003562:	f3bf 8f6f 	isb	sy
 8003566:	f3bf 8f4f 	dsb	sy
 800356a:	617b      	str	r3, [r7, #20]
}
 800356c:	bf00      	nop
 800356e:	bf00      	nop
 8003570:	e7fd      	b.n	800356e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003572:	4b0a      	ldr	r3, [pc, #40]	@ (800359c <vTaskPlaceOnEventListRestricted+0x54>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	3318      	adds	r3, #24
 8003578:	4619      	mov	r1, r3
 800357a:	68f8      	ldr	r0, [r7, #12]
 800357c:	f7fe fe47 	bl	800220e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d002      	beq.n	800358c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003586:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800358a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800358c:	6879      	ldr	r1, [r7, #4]
 800358e:	68b8      	ldr	r0, [r7, #8]
 8003590:	f000 fa26 	bl	80039e0 <prvAddCurrentTaskToDelayedList>
	}
 8003594:	bf00      	nop
 8003596:	3718      	adds	r7, #24
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	200000cc 	.word	0x200000cc

080035a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10b      	bne.n	80035ce <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80035b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ba:	f383 8811 	msr	BASEPRI, r3
 80035be:	f3bf 8f6f 	isb	sy
 80035c2:	f3bf 8f4f 	dsb	sy
 80035c6:	60fb      	str	r3, [r7, #12]
}
 80035c8:	bf00      	nop
 80035ca:	bf00      	nop
 80035cc:	e7fd      	b.n	80035ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	3318      	adds	r3, #24
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7fe fea2 	bl	800231c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035d8:	4b1a      	ldr	r3, [pc, #104]	@ (8003644 <xTaskRemoveFromEventList+0xa4>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d116      	bne.n	800360e <xTaskRemoveFromEventList+0x6e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	3304      	adds	r3, #4
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7fe fe99 	bl	800231c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80035ea:	4b17      	ldr	r3, [pc, #92]	@ (8003648 <xTaskRemoveFromEventList+0xa8>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d102      	bne.n	80035f8 <xTaskRemoveFromEventList+0x58>
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035f6:	e001      	b.n	80035fc <xTaskRemoveFromEventList+0x5c>
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	6053      	str	r3, [r2, #4]
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	3304      	adds	r3, #4
 8003604:	4619      	mov	r1, r3
 8003606:	4811      	ldr	r0, [pc, #68]	@ (800364c <xTaskRemoveFromEventList+0xac>)
 8003608:	f7fe fe35 	bl	8002276 <vListInsert>
 800360c:	e005      	b.n	800361a <xTaskRemoveFromEventList+0x7a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	3318      	adds	r3, #24
 8003612:	4619      	mov	r1, r3
 8003614:	480e      	ldr	r0, [pc, #56]	@ (8003650 <xTaskRemoveFromEventList+0xb0>)
 8003616:	f7fe fdfa 	bl	800220e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800361e:	4b0d      	ldr	r3, [pc, #52]	@ (8003654 <xTaskRemoveFromEventList+0xb4>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003624:	429a      	cmp	r2, r3
 8003626:	d905      	bls.n	8003634 <xTaskRemoveFromEventList+0x94>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003628:	2301      	movs	r3, #1
 800362a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800362c:	4b0a      	ldr	r3, [pc, #40]	@ (8003658 <xTaskRemoveFromEventList+0xb8>)
 800362e:	2201      	movs	r2, #1
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	e001      	b.n	8003638 <xTaskRemoveFromEventList+0x98>
	}
	else
	{
		xReturn = pdFALSE;
 8003634:	2300      	movs	r3, #0
 8003636:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003638:	697b      	ldr	r3, [r7, #20]
}
 800363a:	4618      	mov	r0, r3
 800363c:	3718      	adds	r7, #24
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	200001c8 	.word	0x200001c8
 8003648:	200000c8 	.word	0x200000c8
 800364c:	20000164 	.word	0x20000164
 8003650:	20000150 	.word	0x20000150
 8003654:	200000cc 	.word	0x200000cc
 8003658:	200001b4 	.word	0x200001b4

0800365c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003664:	4b06      	ldr	r3, [pc, #24]	@ (8003680 <vTaskInternalSetTimeOutState+0x24>)
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800366c:	4b05      	ldr	r3, [pc, #20]	@ (8003684 <vTaskInternalSetTimeOutState+0x28>)
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	605a      	str	r2, [r3, #4]
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	200001b8 	.word	0x200001b8
 8003684:	200001a8 	.word	0x200001a8

08003688 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b088      	sub	sp, #32
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10b      	bne.n	80036b0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800369c:	f383 8811 	msr	BASEPRI, r3
 80036a0:	f3bf 8f6f 	isb	sy
 80036a4:	f3bf 8f4f 	dsb	sy
 80036a8:	613b      	str	r3, [r7, #16]
}
 80036aa:	bf00      	nop
 80036ac:	bf00      	nop
 80036ae:	e7fd      	b.n	80036ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10b      	bne.n	80036ce <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80036b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036ba:	f383 8811 	msr	BASEPRI, r3
 80036be:	f3bf 8f6f 	isb	sy
 80036c2:	f3bf 8f4f 	dsb	sy
 80036c6:	60fb      	str	r3, [r7, #12]
}
 80036c8:	bf00      	nop
 80036ca:	bf00      	nop
 80036cc:	e7fd      	b.n	80036ca <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80036ce:	f000 ff83 	bl	80045d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80036d2:	4b1d      	ldr	r3, [pc, #116]	@ (8003748 <xTaskCheckForTimeOut+0xc0>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036ea:	d102      	bne.n	80036f2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80036ec:	2300      	movs	r3, #0
 80036ee:	61fb      	str	r3, [r7, #28]
 80036f0:	e023      	b.n	800373a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	4b15      	ldr	r3, [pc, #84]	@ (800374c <xTaskCheckForTimeOut+0xc4>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d007      	beq.n	800370e <xTaskCheckForTimeOut+0x86>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	429a      	cmp	r2, r3
 8003706:	d302      	bcc.n	800370e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003708:	2301      	movs	r3, #1
 800370a:	61fb      	str	r3, [r7, #28]
 800370c:	e015      	b.n	800373a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	429a      	cmp	r2, r3
 8003716:	d20b      	bcs.n	8003730 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	1ad2      	subs	r2, r2, r3
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f7ff ff99 	bl	800365c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800372a:	2300      	movs	r3, #0
 800372c:	61fb      	str	r3, [r7, #28]
 800372e:	e004      	b.n	800373a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003736:	2301      	movs	r3, #1
 8003738:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800373a:	f000 ff7f 	bl	800463c <vPortExitCritical>

	return xReturn;
 800373e:	69fb      	ldr	r3, [r7, #28]
}
 8003740:	4618      	mov	r0, r3
 8003742:	3720      	adds	r7, #32
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	200001a8 	.word	0x200001a8
 800374c:	200001b8 	.word	0x200001b8

08003750 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003754:	4b03      	ldr	r3, [pc, #12]	@ (8003764 <vTaskMissedYield+0x14>)
 8003756:	2201      	movs	r2, #1
 8003758:	601a      	str	r2, [r3, #0]
}
 800375a:	bf00      	nop
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	200001b4 	.word	0x200001b4

08003768 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003770:	f000 f852 	bl	8003818 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8003774:	4b05      	ldr	r3, [pc, #20]	@ (800378c <prvIdleTask+0x24>)
 8003776:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	f3bf 8f4f 	dsb	sy
 8003780:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8003784:	f7fc fff8 	bl	8000778 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8003788:	bf00      	nop
 800378a:	e7f1      	b.n	8003770 <prvIdleTask+0x8>
 800378c:	e000ed04 	.word	0xe000ed04

08003790 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003796:	2300      	movs	r3, #0
 8003798:	607b      	str	r3, [r7, #4]
 800379a:	e00c      	b.n	80037b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	4613      	mov	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	4a13      	ldr	r2, [pc, #76]	@ (80037f4 <prvInitialiseTaskLists+0x64>)
 80037a8:	4413      	add	r3, r2
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7fe fd02 	bl	80021b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3301      	adds	r3, #1
 80037b4:	607b      	str	r3, [r7, #4]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b03      	cmp	r3, #3
 80037ba:	d9ef      	bls.n	800379c <prvInitialiseTaskLists+0xc>
	/* ----------------------------------- */

	/* ---------------EDFVD--------------- */
	#if( configUSE_EDFVD_SCHEDULER == 1 )
	{
		vListInitialise( &xReadyTasksEDFVDList );
 80037bc:	480e      	ldr	r0, [pc, #56]	@ (80037f8 <prvInitialiseTaskLists+0x68>)
 80037be:	f7fe fcf9 	bl	80021b4 <vListInitialise>
	}
	#endif
	/* ----------------------------------- */

	vListInitialise( &xDelayedTaskList1 );
 80037c2:	480e      	ldr	r0, [pc, #56]	@ (80037fc <prvInitialiseTaskLists+0x6c>)
 80037c4:	f7fe fcf6 	bl	80021b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80037c8:	480d      	ldr	r0, [pc, #52]	@ (8003800 <prvInitialiseTaskLists+0x70>)
 80037ca:	f7fe fcf3 	bl	80021b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80037ce:	480d      	ldr	r0, [pc, #52]	@ (8003804 <prvInitialiseTaskLists+0x74>)
 80037d0:	f7fe fcf0 	bl	80021b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80037d4:	480c      	ldr	r0, [pc, #48]	@ (8003808 <prvInitialiseTaskLists+0x78>)
 80037d6:	f7fe fced 	bl	80021b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80037da:	480c      	ldr	r0, [pc, #48]	@ (800380c <prvInitialiseTaskLists+0x7c>)
 80037dc:	f7fe fcea 	bl	80021b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80037e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003810 <prvInitialiseTaskLists+0x80>)
 80037e2:	4a06      	ldr	r2, [pc, #24]	@ (80037fc <prvInitialiseTaskLists+0x6c>)
 80037e4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80037e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003814 <prvInitialiseTaskLists+0x84>)
 80037e8:	4a05      	ldr	r2, [pc, #20]	@ (8003800 <prvInitialiseTaskLists+0x70>)
 80037ea:	601a      	str	r2, [r3, #0]
}
 80037ec:	bf00      	nop
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	200000d0 	.word	0x200000d0
 80037f8:	20000164 	.word	0x20000164
 80037fc:	20000120 	.word	0x20000120
 8003800:	20000134 	.word	0x20000134
 8003804:	20000150 	.word	0x20000150
 8003808:	20000178 	.word	0x20000178
 800380c:	20000190 	.word	0x20000190
 8003810:	20000148 	.word	0x20000148
 8003814:	2000014c 	.word	0x2000014c

08003818 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800381e:	e019      	b.n	8003854 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003820:	f000 feda 	bl	80045d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003824:	4b10      	ldr	r3, [pc, #64]	@ (8003868 <prvCheckTasksWaitingTermination+0x50>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	3304      	adds	r3, #4
 8003830:	4618      	mov	r0, r3
 8003832:	f7fe fd73 	bl	800231c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003836:	4b0d      	ldr	r3, [pc, #52]	@ (800386c <prvCheckTasksWaitingTermination+0x54>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	3b01      	subs	r3, #1
 800383c:	4a0b      	ldr	r2, [pc, #44]	@ (800386c <prvCheckTasksWaitingTermination+0x54>)
 800383e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003840:	4b0b      	ldr	r3, [pc, #44]	@ (8003870 <prvCheckTasksWaitingTermination+0x58>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	3b01      	subs	r3, #1
 8003846:	4a0a      	ldr	r2, [pc, #40]	@ (8003870 <prvCheckTasksWaitingTermination+0x58>)
 8003848:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800384a:	f000 fef7 	bl	800463c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f810 	bl	8003874 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003854:	4b06      	ldr	r3, [pc, #24]	@ (8003870 <prvCheckTasksWaitingTermination+0x58>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1e1      	bne.n	8003820 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800385c:	bf00      	nop
 800385e:	bf00      	nop
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	20000178 	.word	0x20000178
 800386c:	200001a4 	.word	0x200001a4
 8003870:	2000018c 	.word	0x2000018c

08003874 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003880:	4618      	mov	r0, r3
 8003882:	f001 f899 	bl	80049b8 <vPortFree>
			vPortFree( pxTCB );
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f001 f896 	bl	80049b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800388c:	bf00      	nop
 800388e:	3708      	adds	r7, #8
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800389a:	4b0c      	ldr	r3, [pc, #48]	@ (80038cc <prvResetNextTaskUnblockTime+0x38>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d104      	bne.n	80038ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80038a4:	4b0a      	ldr	r3, [pc, #40]	@ (80038d0 <prvResetNextTaskUnblockTime+0x3c>)
 80038a6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80038aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80038ac:	e008      	b.n	80038c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038ae:	4b07      	ldr	r3, [pc, #28]	@ (80038cc <prvResetNextTaskUnblockTime+0x38>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	4a04      	ldr	r2, [pc, #16]	@ (80038d0 <prvResetNextTaskUnblockTime+0x3c>)
 80038be:	6013      	str	r3, [r2, #0]
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	20000148 	.word	0x20000148
 80038d0:	200001c0 	.word	0x200001c0

080038d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80038da:	4b0b      	ldr	r3, [pc, #44]	@ (8003908 <xTaskGetSchedulerState+0x34>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d102      	bne.n	80038e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80038e2:	2301      	movs	r3, #1
 80038e4:	607b      	str	r3, [r7, #4]
 80038e6:	e008      	b.n	80038fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038e8:	4b08      	ldr	r3, [pc, #32]	@ (800390c <xTaskGetSchedulerState+0x38>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d102      	bne.n	80038f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80038f0:	2302      	movs	r3, #2
 80038f2:	607b      	str	r3, [r7, #4]
 80038f4:	e001      	b.n	80038fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80038f6:	2300      	movs	r3, #0
 80038f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80038fa:	687b      	ldr	r3, [r7, #4]
	}
 80038fc:	4618      	mov	r0, r3
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr
 8003908:	200001ac 	.word	0x200001ac
 800390c:	200001c8 	.word	0x200001c8

08003910 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800391c:	2300      	movs	r3, #0
 800391e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d051      	beq.n	80039ca <xTaskPriorityDisinherit+0xba>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003926:	4b2b      	ldr	r3, [pc, #172]	@ (80039d4 <xTaskPriorityDisinherit+0xc4>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	429a      	cmp	r2, r3
 800392e:	d00b      	beq.n	8003948 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003934:	f383 8811 	msr	BASEPRI, r3
 8003938:	f3bf 8f6f 	isb	sy
 800393c:	f3bf 8f4f 	dsb	sy
 8003940:	60fb      	str	r3, [r7, #12]
}
 8003942:	bf00      	nop
 8003944:	bf00      	nop
 8003946:	e7fd      	b.n	8003944 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10b      	bne.n	8003968 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003954:	f383 8811 	msr	BASEPRI, r3
 8003958:	f3bf 8f6f 	isb	sy
 800395c:	f3bf 8f4f 	dsb	sy
 8003960:	60bb      	str	r3, [r7, #8]
}
 8003962:	bf00      	nop
 8003964:	bf00      	nop
 8003966:	e7fd      	b.n	8003964 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800396c:	1e5a      	subs	r2, r3, #1
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800397a:	429a      	cmp	r2, r3
 800397c:	d025      	beq.n	80039ca <xTaskPriorityDisinherit+0xba>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003982:	2b00      	cmp	r3, #0
 8003984:	d121      	bne.n	80039ca <xTaskPriorityDisinherit+0xba>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	3304      	adds	r3, #4
 800398a:	4618      	mov	r0, r3
 800398c:	f7fe fcc6 	bl	800231c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800399c:	f1c3 0204 	rsb	r2, r3, #4
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80039a4:	4b0c      	ldr	r3, [pc, #48]	@ (80039d8 <xTaskPriorityDisinherit+0xc8>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d102      	bne.n	80039b2 <xTaskPriorityDisinherit+0xa2>
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039b0:	e001      	b.n	80039b6 <xTaskPriorityDisinherit+0xa6>
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	6053      	str	r3, [r2, #4]
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	3304      	adds	r3, #4
 80039be:	4619      	mov	r1, r3
 80039c0:	4806      	ldr	r0, [pc, #24]	@ (80039dc <xTaskPriorityDisinherit+0xcc>)
 80039c2:	f7fe fc58 	bl	8002276 <vListInsert>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80039c6:	2301      	movs	r3, #1
 80039c8:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80039ca:	697b      	ldr	r3, [r7, #20]
	}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3718      	adds	r7, #24
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	200000cc 	.word	0x200000cc
 80039d8:	200000c8 	.word	0x200000c8
 80039dc:	20000164 	.word	0x20000164

080039e0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80039ea:	4b21      	ldr	r3, [pc, #132]	@ (8003a70 <prvAddCurrentTaskToDelayedList+0x90>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039f0:	4b20      	ldr	r3, [pc, #128]	@ (8003a74 <prvAddCurrentTaskToDelayedList+0x94>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	3304      	adds	r3, #4
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7fe fc90 	bl	800231c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a02:	d10a      	bne.n	8003a1a <prvAddCurrentTaskToDelayedList+0x3a>
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d007      	beq.n	8003a1a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8003a74 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	3304      	adds	r3, #4
 8003a10:	4619      	mov	r1, r3
 8003a12:	4819      	ldr	r0, [pc, #100]	@ (8003a78 <prvAddCurrentTaskToDelayedList+0x98>)
 8003a14:	f7fe fbfb 	bl	800220e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003a18:	e026      	b.n	8003a68 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4413      	add	r3, r2
 8003a20:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003a22:	4b14      	ldr	r3, [pc, #80]	@ (8003a74 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d209      	bcs.n	8003a46 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a32:	4b12      	ldr	r3, [pc, #72]	@ (8003a7c <prvAddCurrentTaskToDelayedList+0x9c>)
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	4b0f      	ldr	r3, [pc, #60]	@ (8003a74 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	3304      	adds	r3, #4
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	4610      	mov	r0, r2
 8003a40:	f7fe fc19 	bl	8002276 <vListInsert>
}
 8003a44:	e010      	b.n	8003a68 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a46:	4b0e      	ldr	r3, [pc, #56]	@ (8003a80 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8003a74 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	3304      	adds	r3, #4
 8003a50:	4619      	mov	r1, r3
 8003a52:	4610      	mov	r0, r2
 8003a54:	f7fe fc0f 	bl	8002276 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003a58:	4b0a      	ldr	r3, [pc, #40]	@ (8003a84 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d202      	bcs.n	8003a68 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003a62:	4a08      	ldr	r2, [pc, #32]	@ (8003a84 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	6013      	str	r3, [r2, #0]
}
 8003a68:	bf00      	nop
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	200001a8 	.word	0x200001a8
 8003a74:	200000cc 	.word	0x200000cc
 8003a78:	20000190 	.word	0x20000190
 8003a7c:	2000014c 	.word	0x2000014c
 8003a80:	20000148 	.word	0x20000148
 8003a84:	200001c0 	.word	0x200001c0

08003a88 <vApplicationTickHook>:

#endif
/*-----------------------------------------------------------*/

void vApplicationTickHook(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
	/* ---------------EDFVD--------------- */
	#if( configUSE_EDFVD_SCHEDULER == 1 )
	{
		/* If the current task is the idle task do not update xExecTime. */
		if(pxCurrentTCB == xIdleTaskHandle)
 8003a8c:	4b19      	ldr	r3, [pc, #100]	@ (8003af4 <vApplicationTickHook+0x6c>)
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	4b19      	ldr	r3, [pc, #100]	@ (8003af8 <vApplicationTickHook+0x70>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d02a      	beq.n	8003aee <vApplicationTickHook+0x66>
			return;
		}

		/* If the system is in LO-criticality mode and the current task is
		HI-criticality task then update xExecTime. */
		if( xEDFVD_ModeHI == pdFALSE && pxCurrentTCB->eCriticality == eCRITICALITY_HI )
 8003a98:	4b18      	ldr	r3, [pc, #96]	@ (8003afc <vApplicationTickHook+0x74>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d127      	bne.n	8003af0 <vApplicationTickHook+0x68>
 8003aa0:	4b14      	ldr	r3, [pc, #80]	@ (8003af4 <vApplicationTickHook+0x6c>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d121      	bne.n	8003af0 <vApplicationTickHook+0x68>
		{
			pxCurrentTCB->xExecTime++;
 8003aac:	4b11      	ldr	r3, [pc, #68]	@ (8003af4 <vApplicationTickHook+0x6c>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8003ab2:	3201      	adds	r2, #1
 8003ab4:	679a      	str	r2, [r3, #120]	@ 0x78

			/* The system switches to HI-criticality mode if the time spent
			by the current task exceeds the WCET assigned to the task when
			the system is in LO-criticality mode. */
			if( pxCurrentTCB->xExecTime > pxCurrentTCB->xWCET_LO )
 8003ab6:	4b0f      	ldr	r3, [pc, #60]	@ (8003af4 <vApplicationTickHook+0x6c>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8003abc:	4b0d      	ldr	r3, [pc, #52]	@ (8003af4 <vApplicationTickHook+0x6c>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d914      	bls.n	8003af0 <vApplicationTickHook+0x68>
			{
				xEDFVD_ModeHI = pdTRUE;
 8003ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8003afc <vApplicationTickHook+0x74>)
 8003ac8:	2201      	movs	r2, #1
 8003aca:	601a      	str	r2, [r3, #0]

				/* The system switches into HI-criticality mode so call prvListRemoveByCriticality()
				to remove the LO-criticality tasks from xReadyTasksEDFVDList, pxDelayedTaskList and
				pxOverflowDelayedTaskList. */
				prvListRemoveByCriticality( &xReadyTasksEDFVDList, eCRITICALITY_LO );
 8003acc:	2100      	movs	r1, #0
 8003ace:	480c      	ldr	r0, [pc, #48]	@ (8003b00 <vApplicationTickHook+0x78>)
 8003ad0:	f000 f8f2 	bl	8003cb8 <prvListRemoveByCriticality>
				prvListRemoveByCriticality( pxDelayedTaskList, eCRITICALITY_LO );
 8003ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8003b04 <vApplicationTickHook+0x7c>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2100      	movs	r1, #0
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 f8ec 	bl	8003cb8 <prvListRemoveByCriticality>
				prvListRemoveByCriticality( pxOverflowDelayedTaskList, eCRITICALITY_LO );
 8003ae0:	4b09      	ldr	r3, [pc, #36]	@ (8003b08 <vApplicationTickHook+0x80>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 f8e6 	bl	8003cb8 <prvListRemoveByCriticality>
 8003aec:	e000      	b.n	8003af0 <vApplicationTickHook+0x68>
			return;
 8003aee:	bf00      	nop
			}
		}
	}
	#endif
	/* ----------------------------------- */
}
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	200000cc 	.word	0x200000cc
 8003af8:	200001c4 	.word	0x200001c4
 8003afc:	200000c8 	.word	0x200000c8
 8003b00:	20000164 	.word	0x20000164
 8003b04:	20000148 	.word	0x20000148
 8003b08:	2000014c 	.word	0x2000014c

08003b0c <prvCalculateUtilizationsEDFVD>:

/* --------------------------EDFVD-------------------------- */
#if( configUSE_EDFVD_SCHEDULER == 1 )

	void prvCalculateUtilizationsEDFVD( const List_t *pxList, float *pU_LO_LO, float *pU_HI_LO, float *pU_HI_HI )
	{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b089      	sub	sp, #36	@ 0x24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
 8003b18:	603b      	str	r3, [r7, #0]
		ListItem_t *pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	61fb      	str	r3, [r7, #28]
		*pU_LO_LO = 0.0f;
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	f04f 0200 	mov.w	r2, #0
 8003b26:	601a      	str	r2, [r3, #0]
		*pU_HI_LO = 0.0f;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f04f 0200 	mov.w	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]
		*pU_HI_HI = 0.0f;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	f04f 0200 	mov.w	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]

		while( pxItem != ( ListItem_t * ) listGET_END_MARKER( pxList ) )
 8003b38:	e055      	b.n	8003be6 <prvCalculateUtilizationsEDFVD+0xda>
		{
			TCB_t *pxTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxItem );
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	61bb      	str	r3, [r7, #24]
			pxItem = listGET_NEXT( pxItem );
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	61fb      	str	r3, [r7, #28]

			/* The idle task and the timer task must be excluded from the calculation. */
			if( pxTCB == xIdleTaskHandle || pxTCB == xTimerTaskHandle )
 8003b46:	4b2e      	ldr	r3, [pc, #184]	@ (8003c00 <prvCalculateUtilizationsEDFVD+0xf4>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d049      	beq.n	8003be4 <prvCalculateUtilizationsEDFVD+0xd8>
 8003b50:	4b2c      	ldr	r3, [pc, #176]	@ (8003c04 <prvCalculateUtilizationsEDFVD+0xf8>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d044      	beq.n	8003be4 <prvCalculateUtilizationsEDFVD+0xd8>
			{
				continue;
			}

			/* Calculate the utilization of the task at the LO-criticality level. */
			float u_lo = ( float ) pxTCB->xWCET_LO / ( float ) pxTCB->xPeriod;
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b5e:	ee07 3a90 	vmov	s15, r3
 8003b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b6a:	ee07 3a90 	vmov	s15, r3
 8003b6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b76:	edc7 7a05 	vstr	s15, [r7, #20]

			/* Distinguish between a LO-criticality task and a HI-criticality task. */
			if( pxTCB->eCriticality == eCRITICALITY_LO )
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10a      	bne.n	8003b9a <prvCalculateUtilizationsEDFVD+0x8e>
			{
				/* Calculate the system utilization at the LO-criticality level of
				LO-criticality tasks. */
				*pU_LO_LO += u_lo;
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	ed93 7a00 	vldr	s14, [r3]
 8003b8a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	edc3 7a00 	vstr	s15, [r3]
 8003b98:	e025      	b.n	8003be6 <prvCalculateUtilizationsEDFVD+0xda>
			}
			else
			{
				/* Calculate the utilization of the task at the HI-criticality level. */
				float u_hi = ( float ) pxTCB->xWCET_HI / ( float ) pxTCB->xPeriod;
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b9e:	ee07 3a90 	vmov	s15, r3
 8003ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003baa:	ee07 3a90 	vmov	s15, r3
 8003bae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003bb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bb6:	edc7 7a04 	vstr	s15, [r7, #16]

				/* Calculate the system utilization at the LO-criticality level of
				HI-criticality tasks. */
				*pU_HI_LO += u_lo;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	ed93 7a00 	vldr	s14, [r3]
 8003bc0:	edd7 7a05 	vldr	s15, [r7, #20]
 8003bc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	edc3 7a00 	vstr	s15, [r3]

				/* Calculate the system utilization at the HI-criticality level of
				HI-criticality tasks. */
				*pU_HI_HI += u_hi;
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	ed93 7a00 	vldr	s14, [r3]
 8003bd4:	edd7 7a04 	vldr	s15, [r7, #16]
 8003bd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	edc3 7a00 	vstr	s15, [r3]
 8003be2:	e000      	b.n	8003be6 <prvCalculateUtilizationsEDFVD+0xda>
				continue;
 8003be4:	bf00      	nop
		while( pxItem != ( ListItem_t * ) listGET_END_MARKER( pxList ) )
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	3308      	adds	r3, #8
 8003bea:	69fa      	ldr	r2, [r7, #28]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d1a4      	bne.n	8003b3a <prvCalculateUtilizationsEDFVD+0x2e>
			}
		}
	}
 8003bf0:	bf00      	nop
 8003bf2:	bf00      	nop
 8003bf4:	3724      	adds	r7, #36	@ 0x24
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	200001c4 	.word	0x200001c4
 8003c04:	20000200 	.word	0x20000200

08003c08 <prvOrderEDFVDReadyList>:
	/*-----------------------------------------------------------*/

	void prvOrderEDFVDReadyList( List_t *pxList, float fEDFVD_x, BaseType_t  xEDFVD_ModeHI )
	{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b088      	sub	sp, #32
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	ed87 0a02 	vstr	s0, [r7, #8]
 8003c14:	6079      	str	r1, [r7, #4]
		ListItem_t *pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	61fb      	str	r3, [r7, #28]

		/* Scroll through all items in the list. */
		while( pxItem != ( ListItem_t * ) listGET_END_MARKER( pxList ) )
 8003c1c:	e03c      	b.n	8003c98 <prvOrderEDFVDReadyList+0x90>
		{
			ListItem_t *pxNext = ( ListItem_t * ) listGET_NEXT( pxItem );
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	61bb      	str	r3, [r7, #24]
			TCB_t *pxTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxItem );
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	617b      	str	r3, [r7, #20]

			/* Hi-criticality tasks must be taken, but only if the system is in LO-criticality
			mode. The idle task and the timer task must be excluded. */
			if( pxTCB->eCriticality == eCRITICALITY_HI && xEDFVD_ModeHI == pdFALSE && pxTCB != xIdleTaskHandle && pxTCB != xTimerTaskHandle )
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d12f      	bne.n	8003c94 <prvOrderEDFVDReadyList+0x8c>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d12c      	bne.n	8003c94 <prvOrderEDFVDReadyList+0x8c>
 8003c3a:	4b1c      	ldr	r3, [pc, #112]	@ (8003cac <prvOrderEDFVDReadyList+0xa4>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d027      	beq.n	8003c94 <prvOrderEDFVDReadyList+0x8c>
 8003c44:	4b1a      	ldr	r3, [pc, #104]	@ (8003cb0 <prvOrderEDFVDReadyList+0xa8>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d022      	beq.n	8003c94 <prvOrderEDFVDReadyList+0x8c>
			{
				/* Calculate the virtual deadline using the compression factor. */
				pxTCB->xVirtualDeadline = ( TickType_t ) ( pxTCB->xAbsDeadline * fEDFVD_x );
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c52:	ee07 3a90 	vmov	s15, r3
 8003c56:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c5a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c66:	ee17 2a90 	vmov	r2, s15
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	669a      	str	r2, [r3, #104]	@ 0x68
				 TickType_t offset = ( TickType_t ) ( pxTCB->xRelDeadline * fEDFVD_x );
				 pxTCB->xVirtualDeadline = ( TickType_t ) ( xTaskGetTickCount() + offset );
				 */

				/* Remove the task and insert it in the correct position. */
				uxListRemove( pxItem );
 8003c6e:	69f8      	ldr	r0, [r7, #28]
 8003c70:	f7fe fb54 	bl	800231c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d102      	bne.n	8003c80 <prvOrderEDFVDReadyList+0x78>
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c7e:	e001      	b.n	8003c84 <prvOrderEDFVDReadyList+0x7c>
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	6053      	str	r3, [r2, #4]
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	3304      	adds	r3, #4
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	4809      	ldr	r0, [pc, #36]	@ (8003cb4 <prvOrderEDFVDReadyList+0xac>)
 8003c90:	f7fe faf1 	bl	8002276 <vListInsert>
			}

			pxItem = pxNext;
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	61fb      	str	r3, [r7, #28]
		while( pxItem != ( ListItem_t * ) listGET_END_MARKER( pxList ) )
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	3308      	adds	r3, #8
 8003c9c:	69fa      	ldr	r2, [r7, #28]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d1bd      	bne.n	8003c1e <prvOrderEDFVDReadyList+0x16>
		}
	}
 8003ca2:	bf00      	nop
 8003ca4:	bf00      	nop
 8003ca6:	3720      	adds	r7, #32
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	200001c4 	.word	0x200001c4
 8003cb0:	20000200 	.word	0x20000200
 8003cb4:	20000164 	.word	0x20000164

08003cb8 <prvListRemoveByCriticality>:
	/*-----------------------------------------------------------*/

	void prvListRemoveByCriticality( List_t *pxList, eTaskCrit_t uxCritToRemove )
	{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	70fb      	strb	r3, [r7, #3]
		ListItem_t *pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	617b      	str	r3, [r7, #20]

		/* Scroll through all items in the list. */
		while( pxItem != ( ListItem_t * ) listGET_END_MARKER( pxList ) )
 8003cca:	e010      	b.n	8003cee <prvListRemoveByCriticality+0x36>
		{
			ListItem_t *pxNext = ( ListItem_t * ) listGET_NEXT( pxItem );
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	613b      	str	r3, [r7, #16]
			TCB_t *pxTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxItem );
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	60fb      	str	r3, [r7, #12]

			/* Remove only tasks that have a certain criticality. */
			if(pxTCB->eCriticality == uxCritToRemove)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8003cde:	78fa      	ldrb	r2, [r7, #3]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d102      	bne.n	8003cea <prvListRemoveByCriticality+0x32>
			{
				uxListRemove( pxItem );
 8003ce4:	6978      	ldr	r0, [r7, #20]
 8003ce6:	f7fe fb19 	bl	800231c <uxListRemove>
			}

			pxItem = pxNext;
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	617b      	str	r3, [r7, #20]
		while( pxItem != ( ListItem_t * ) listGET_END_MARKER( pxList ) )
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	3308      	adds	r3, #8
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d1e9      	bne.n	8003ccc <prvListRemoveByCriticality+0x14>
		}
	}
 8003cf8:	bf00      	nop
 8003cfa:	bf00      	nop
 8003cfc:	3718      	adds	r7, #24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
	...

08003d04 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003d0e:	f000 fafd 	bl	800430c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003d12:	4b12      	ldr	r3, [pc, #72]	@ (8003d5c <xTimerCreateTimerTask+0x58>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00b      	beq.n	8003d32 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8003d1a:	4b11      	ldr	r3, [pc, #68]	@ (8003d60 <xTimerCreateTimerTask+0x5c>)
 8003d1c:	9301      	str	r3, [sp, #4]
 8003d1e:	2302      	movs	r3, #2
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	2300      	movs	r3, #0
 8003d24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d28:	490e      	ldr	r1, [pc, #56]	@ (8003d64 <xTimerCreateTimerTask+0x60>)
 8003d2a:	480f      	ldr	r0, [pc, #60]	@ (8003d68 <xTimerCreateTimerTask+0x64>)
 8003d2c:	f7fe ffa4 	bl	8002c78 <xTaskCreate>
 8003d30:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d10b      	bne.n	8003d50 <xTimerCreateTimerTask+0x4c>
	__asm volatile
 8003d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d3c:	f383 8811 	msr	BASEPRI, r3
 8003d40:	f3bf 8f6f 	isb	sy
 8003d44:	f3bf 8f4f 	dsb	sy
 8003d48:	603b      	str	r3, [r7, #0]
}
 8003d4a:	bf00      	nop
 8003d4c:	bf00      	nop
 8003d4e:	e7fd      	b.n	8003d4c <xTimerCreateTimerTask+0x48>
	return xReturn;
 8003d50:	687b      	ldr	r3, [r7, #4]
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	200001fc 	.word	0x200001fc
 8003d60:	20000200 	.word	0x20000200
 8003d64:	08004ca8 	.word	0x08004ca8
 8003d68:	08003ea5 	.word	0x08003ea5

08003d6c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b08a      	sub	sp, #40	@ 0x28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
 8003d78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d10b      	bne.n	8003d9c <xTimerGenericCommand+0x30>
	__asm volatile
 8003d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d88:	f383 8811 	msr	BASEPRI, r3
 8003d8c:	f3bf 8f6f 	isb	sy
 8003d90:	f3bf 8f4f 	dsb	sy
 8003d94:	623b      	str	r3, [r7, #32]
}
 8003d96:	bf00      	nop
 8003d98:	bf00      	nop
 8003d9a:	e7fd      	b.n	8003d98 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003d9c:	4b19      	ldr	r3, [pc, #100]	@ (8003e04 <xTimerGenericCommand+0x98>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d02a      	beq.n	8003dfa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	2b05      	cmp	r3, #5
 8003db4:	dc18      	bgt.n	8003de8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003db6:	f7ff fd8d 	bl	80038d4 <xTaskGetSchedulerState>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d109      	bne.n	8003dd4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003dc0:	4b10      	ldr	r3, [pc, #64]	@ (8003e04 <xTimerGenericCommand+0x98>)
 8003dc2:	6818      	ldr	r0, [r3, #0]
 8003dc4:	f107 0110 	add.w	r1, r7, #16
 8003dc8:	2300      	movs	r3, #0
 8003dca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dcc:	f7fe fb86 	bl	80024dc <xQueueGenericSend>
 8003dd0:	6278      	str	r0, [r7, #36]	@ 0x24
 8003dd2:	e012      	b.n	8003dfa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8003e04 <xTimerGenericCommand+0x98>)
 8003dd6:	6818      	ldr	r0, [r3, #0]
 8003dd8:	f107 0110 	add.w	r1, r7, #16
 8003ddc:	2300      	movs	r3, #0
 8003dde:	2200      	movs	r2, #0
 8003de0:	f7fe fb7c 	bl	80024dc <xQueueGenericSend>
 8003de4:	6278      	str	r0, [r7, #36]	@ 0x24
 8003de6:	e008      	b.n	8003dfa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003de8:	4b06      	ldr	r3, [pc, #24]	@ (8003e04 <xTimerGenericCommand+0x98>)
 8003dea:	6818      	ldr	r0, [r3, #0]
 8003dec:	f107 0110 	add.w	r1, r7, #16
 8003df0:	2300      	movs	r3, #0
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	f7fe fc5c 	bl	80026b0 <xQueueGenericSendFromISR>
 8003df8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3728      	adds	r7, #40	@ 0x28
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	200001fc 	.word	0x200001fc

08003e08 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b088      	sub	sp, #32
 8003e0c:	af02      	add	r7, sp, #8
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e12:	4b23      	ldr	r3, [pc, #140]	@ (8003ea0 <prvProcessExpiredTimer+0x98>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	3304      	adds	r3, #4
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7fe fa7b 	bl	800231c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d023      	beq.n	8003e7c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	699a      	ldr	r2, [r3, #24]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	18d1      	adds	r1, r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	6978      	ldr	r0, [r7, #20]
 8003e42:	f000 f8d5 	bl	8003ff0 <prvInsertTimerInActiveList>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d020      	beq.n	8003e8e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	9300      	str	r3, [sp, #0]
 8003e50:	2300      	movs	r3, #0
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	2100      	movs	r1, #0
 8003e56:	6978      	ldr	r0, [r7, #20]
 8003e58:	f7ff ff88 	bl	8003d6c <xTimerGenericCommand>
 8003e5c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d114      	bne.n	8003e8e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8003e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e68:	f383 8811 	msr	BASEPRI, r3
 8003e6c:	f3bf 8f6f 	isb	sy
 8003e70:	f3bf 8f4f 	dsb	sy
 8003e74:	60fb      	str	r3, [r7, #12]
}
 8003e76:	bf00      	nop
 8003e78:	bf00      	nop
 8003e7a:	e7fd      	b.n	8003e78 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e82:	f023 0301 	bic.w	r3, r3, #1
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	6978      	ldr	r0, [r7, #20]
 8003e94:	4798      	blx	r3
}
 8003e96:	bf00      	nop
 8003e98:	3718      	adds	r7, #24
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	200001f4 	.word	0x200001f4

08003ea4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003eac:	f107 0308 	add.w	r3, r7, #8
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f000 f859 	bl	8003f68 <prvGetNextExpireTime>
 8003eb6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	4619      	mov	r1, r3
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 f805 	bl	8003ecc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003ec2:	f000 f8d7 	bl	8004074 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ec6:	bf00      	nop
 8003ec8:	e7f0      	b.n	8003eac <prvTimerTask+0x8>
	...

08003ecc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003ed6:	f7ff f9af 	bl	8003238 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003eda:	f107 0308 	add.w	r3, r7, #8
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 f866 	bl	8003fb0 <prvSampleTimeNow>
 8003ee4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d130      	bne.n	8003f4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10a      	bne.n	8003f08 <prvProcessTimerOrBlockTask+0x3c>
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d806      	bhi.n	8003f08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003efa:	f7ff f9ab 	bl	8003254 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003efe:	68f9      	ldr	r1, [r7, #12]
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f7ff ff81 	bl	8003e08 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003f06:	e024      	b.n	8003f52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d008      	beq.n	8003f20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003f0e:	4b13      	ldr	r3, [pc, #76]	@ (8003f5c <prvProcessTimerOrBlockTask+0x90>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d101      	bne.n	8003f1c <prvProcessTimerOrBlockTask+0x50>
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e000      	b.n	8003f1e <prvProcessTimerOrBlockTask+0x52>
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003f20:	4b0f      	ldr	r3, [pc, #60]	@ (8003f60 <prvProcessTimerOrBlockTask+0x94>)
 8003f22:	6818      	ldr	r0, [r3, #0]
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	f7fe fe6f 	bl	8002c10 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003f32:	f7ff f98f 	bl	8003254 <xTaskResumeAll>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d10a      	bne.n	8003f52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003f3c:	4b09      	ldr	r3, [pc, #36]	@ (8003f64 <prvProcessTimerOrBlockTask+0x98>)
 8003f3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	f3bf 8f6f 	isb	sy
}
 8003f4c:	e001      	b.n	8003f52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003f4e:	f7ff f981 	bl	8003254 <xTaskResumeAll>
}
 8003f52:	bf00      	nop
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	200001f8 	.word	0x200001f8
 8003f60:	200001fc 	.word	0x200001fc
 8003f64:	e000ed04 	.word	0xe000ed04

08003f68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003f70:	4b0e      	ldr	r3, [pc, #56]	@ (8003fac <prvGetNextExpireTime+0x44>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <prvGetNextExpireTime+0x16>
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	e000      	b.n	8003f80 <prvGetNextExpireTime+0x18>
 8003f7e:	2200      	movs	r2, #0
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d105      	bne.n	8003f98 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f8c:	4b07      	ldr	r3, [pc, #28]	@ (8003fac <prvGetNextExpireTime+0x44>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	60fb      	str	r3, [r7, #12]
 8003f96:	e001      	b.n	8003f9c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	200001f4 	.word	0x200001f4

08003fb0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003fb8:	f7ff f9d6 	bl	8003368 <xTaskGetTickCount>
 8003fbc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8003fec <prvSampleTimeNow+0x3c>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d205      	bcs.n	8003fd4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003fc8:	f000 f93a 	bl	8004240 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	601a      	str	r2, [r3, #0]
 8003fd2:	e002      	b.n	8003fda <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003fda:	4a04      	ldr	r2, [pc, #16]	@ (8003fec <prvSampleTimeNow+0x3c>)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	20000204 	.word	0x20000204

08003ff0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
 8003ffc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003ffe:	2300      	movs	r3, #0
 8004000:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	429a      	cmp	r2, r3
 8004014:	d812      	bhi.n	800403c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	1ad2      	subs	r2, r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	429a      	cmp	r2, r3
 8004022:	d302      	bcc.n	800402a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004024:	2301      	movs	r3, #1
 8004026:	617b      	str	r3, [r7, #20]
 8004028:	e01b      	b.n	8004062 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800402a:	4b10      	ldr	r3, [pc, #64]	@ (800406c <prvInsertTimerInActiveList+0x7c>)
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	3304      	adds	r3, #4
 8004032:	4619      	mov	r1, r3
 8004034:	4610      	mov	r0, r2
 8004036:	f7fe f91e 	bl	8002276 <vListInsert>
 800403a:	e012      	b.n	8004062 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	429a      	cmp	r2, r3
 8004042:	d206      	bcs.n	8004052 <prvInsertTimerInActiveList+0x62>
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	429a      	cmp	r2, r3
 800404a:	d302      	bcc.n	8004052 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800404c:	2301      	movs	r3, #1
 800404e:	617b      	str	r3, [r7, #20]
 8004050:	e007      	b.n	8004062 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004052:	4b07      	ldr	r3, [pc, #28]	@ (8004070 <prvInsertTimerInActiveList+0x80>)
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	3304      	adds	r3, #4
 800405a:	4619      	mov	r1, r3
 800405c:	4610      	mov	r0, r2
 800405e:	f7fe f90a 	bl	8002276 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004062:	697b      	ldr	r3, [r7, #20]
}
 8004064:	4618      	mov	r0, r3
 8004066:	3718      	adds	r7, #24
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	200001f8 	.word	0x200001f8
 8004070:	200001f4 	.word	0x200001f4

08004074 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b08e      	sub	sp, #56	@ 0x38
 8004078:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800407a:	e0ce      	b.n	800421a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	da19      	bge.n	80040b6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004082:	1d3b      	adds	r3, r7, #4
 8004084:	3304      	adds	r3, #4
 8004086:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10b      	bne.n	80040a6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800408e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004092:	f383 8811 	msr	BASEPRI, r3
 8004096:	f3bf 8f6f 	isb	sy
 800409a:	f3bf 8f4f 	dsb	sy
 800409e:	61fb      	str	r3, [r7, #28]
}
 80040a0:	bf00      	nop
 80040a2:	bf00      	nop
 80040a4:	e7fd      	b.n	80040a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80040a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040ac:	6850      	ldr	r0, [r2, #4]
 80040ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040b0:	6892      	ldr	r2, [r2, #8]
 80040b2:	4611      	mov	r1, r2
 80040b4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f2c0 80ae 	blt.w	800421a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80040c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d004      	beq.n	80040d4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040cc:	3304      	adds	r3, #4
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7fe f924 	bl	800231c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80040d4:	463b      	mov	r3, r7
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7ff ff6a 	bl	8003fb0 <prvSampleTimeNow>
 80040dc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b09      	cmp	r3, #9
 80040e2:	f200 8097 	bhi.w	8004214 <prvProcessReceivedCommands+0x1a0>
 80040e6:	a201      	add	r2, pc, #4	@ (adr r2, 80040ec <prvProcessReceivedCommands+0x78>)
 80040e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ec:	08004115 	.word	0x08004115
 80040f0:	08004115 	.word	0x08004115
 80040f4:	08004115 	.word	0x08004115
 80040f8:	0800418b 	.word	0x0800418b
 80040fc:	0800419f 	.word	0x0800419f
 8004100:	080041eb 	.word	0x080041eb
 8004104:	08004115 	.word	0x08004115
 8004108:	08004115 	.word	0x08004115
 800410c:	0800418b 	.word	0x0800418b
 8004110:	0800419f 	.word	0x0800419f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004116:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800411a:	f043 0301 	orr.w	r3, r3, #1
 800411e:	b2da      	uxtb	r2, r3
 8004120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004122:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	18d1      	adds	r1, r2, r3
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004132:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004134:	f7ff ff5c 	bl	8003ff0 <prvInsertTimerInActiveList>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d06c      	beq.n	8004218 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800413e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004144:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004148:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800414c:	f003 0304 	and.w	r3, r3, #4
 8004150:	2b00      	cmp	r3, #0
 8004152:	d061      	beq.n	8004218 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004154:	68ba      	ldr	r2, [r7, #8]
 8004156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	441a      	add	r2, r3
 800415c:	2300      	movs	r3, #0
 800415e:	9300      	str	r3, [sp, #0]
 8004160:	2300      	movs	r3, #0
 8004162:	2100      	movs	r1, #0
 8004164:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004166:	f7ff fe01 	bl	8003d6c <xTimerGenericCommand>
 800416a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800416c:	6a3b      	ldr	r3, [r7, #32]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d152      	bne.n	8004218 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004176:	f383 8811 	msr	BASEPRI, r3
 800417a:	f3bf 8f6f 	isb	sy
 800417e:	f3bf 8f4f 	dsb	sy
 8004182:	61bb      	str	r3, [r7, #24]
}
 8004184:	bf00      	nop
 8004186:	bf00      	nop
 8004188:	e7fd      	b.n	8004186 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800418a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800418c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004190:	f023 0301 	bic.w	r3, r3, #1
 8004194:	b2da      	uxtb	r2, r3
 8004196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004198:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800419c:	e03d      	b.n	800421a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800419e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80041a4:	f043 0301 	orr.w	r3, r3, #1
 80041a8:	b2da      	uxtb	r2, r3
 80041aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041b4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80041b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10b      	bne.n	80041d6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80041be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c2:	f383 8811 	msr	BASEPRI, r3
 80041c6:	f3bf 8f6f 	isb	sy
 80041ca:	f3bf 8f4f 	dsb	sy
 80041ce:	617b      	str	r3, [r7, #20]
}
 80041d0:	bf00      	nop
 80041d2:	bf00      	nop
 80041d4:	e7fd      	b.n	80041d2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80041d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d8:	699a      	ldr	r2, [r3, #24]
 80041da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041dc:	18d1      	adds	r1, r2, r3
 80041de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80041e4:	f7ff ff04 	bl	8003ff0 <prvInsertTimerInActiveList>
					break;
 80041e8:	e017      	b.n	800421a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80041ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d103      	bne.n	8004200 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80041f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80041fa:	f000 fbdd 	bl	80049b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80041fe:	e00c      	b.n	800421a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004202:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004206:	f023 0301 	bic.w	r3, r3, #1
 800420a:	b2da      	uxtb	r2, r3
 800420c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800420e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004212:	e002      	b.n	800421a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004214:	bf00      	nop
 8004216:	e000      	b.n	800421a <prvProcessReceivedCommands+0x1a6>
					break;
 8004218:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800421a:	4b08      	ldr	r3, [pc, #32]	@ (800423c <prvProcessReceivedCommands+0x1c8>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	1d39      	adds	r1, r7, #4
 8004220:	2200      	movs	r2, #0
 8004222:	4618      	mov	r0, r3
 8004224:	f7fe fae2 	bl	80027ec <xQueueReceive>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	f47f af26 	bne.w	800407c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004230:	bf00      	nop
 8004232:	bf00      	nop
 8004234:	3730      	adds	r7, #48	@ 0x30
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	200001fc 	.word	0x200001fc

08004240 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b088      	sub	sp, #32
 8004244:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004246:	e049      	b.n	80042dc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004248:	4b2e      	ldr	r3, [pc, #184]	@ (8004304 <prvSwitchTimerLists+0xc4>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004252:	4b2c      	ldr	r3, [pc, #176]	@ (8004304 <prvSwitchTimerLists+0xc4>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	3304      	adds	r3, #4
 8004260:	4618      	mov	r0, r3
 8004262:	f7fe f85b 	bl	800231c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b00      	cmp	r3, #0
 800427a:	d02f      	beq.n	80042dc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	693a      	ldr	r2, [r7, #16]
 8004282:	4413      	add	r3, r2
 8004284:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	429a      	cmp	r2, r3
 800428c:	d90e      	bls.n	80042ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	68ba      	ldr	r2, [r7, #8]
 8004292:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800429a:	4b1a      	ldr	r3, [pc, #104]	@ (8004304 <prvSwitchTimerLists+0xc4>)
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	3304      	adds	r3, #4
 80042a2:	4619      	mov	r1, r3
 80042a4:	4610      	mov	r0, r2
 80042a6:	f7fd ffe6 	bl	8002276 <vListInsert>
 80042aa:	e017      	b.n	80042dc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80042ac:	2300      	movs	r3, #0
 80042ae:	9300      	str	r3, [sp, #0]
 80042b0:	2300      	movs	r3, #0
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	2100      	movs	r1, #0
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f7ff fd58 	bl	8003d6c <xTimerGenericCommand>
 80042bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d10b      	bne.n	80042dc <prvSwitchTimerLists+0x9c>
	__asm volatile
 80042c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042c8:	f383 8811 	msr	BASEPRI, r3
 80042cc:	f3bf 8f6f 	isb	sy
 80042d0:	f3bf 8f4f 	dsb	sy
 80042d4:	603b      	str	r3, [r7, #0]
}
 80042d6:	bf00      	nop
 80042d8:	bf00      	nop
 80042da:	e7fd      	b.n	80042d8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80042dc:	4b09      	ldr	r3, [pc, #36]	@ (8004304 <prvSwitchTimerLists+0xc4>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1b0      	bne.n	8004248 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80042e6:	4b07      	ldr	r3, [pc, #28]	@ (8004304 <prvSwitchTimerLists+0xc4>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80042ec:	4b06      	ldr	r3, [pc, #24]	@ (8004308 <prvSwitchTimerLists+0xc8>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a04      	ldr	r2, [pc, #16]	@ (8004304 <prvSwitchTimerLists+0xc4>)
 80042f2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80042f4:	4a04      	ldr	r2, [pc, #16]	@ (8004308 <prvSwitchTimerLists+0xc8>)
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	6013      	str	r3, [r2, #0]
}
 80042fa:	bf00      	nop
 80042fc:	3718      	adds	r7, #24
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	200001f4 	.word	0x200001f4
 8004308:	200001f8 	.word	0x200001f8

0800430c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004310:	f000 f962 	bl	80045d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004314:	4b12      	ldr	r3, [pc, #72]	@ (8004360 <prvCheckForValidListAndQueue+0x54>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d11d      	bne.n	8004358 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800431c:	4811      	ldr	r0, [pc, #68]	@ (8004364 <prvCheckForValidListAndQueue+0x58>)
 800431e:	f7fd ff49 	bl	80021b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004322:	4811      	ldr	r0, [pc, #68]	@ (8004368 <prvCheckForValidListAndQueue+0x5c>)
 8004324:	f7fd ff46 	bl	80021b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004328:	4b10      	ldr	r3, [pc, #64]	@ (800436c <prvCheckForValidListAndQueue+0x60>)
 800432a:	4a0e      	ldr	r2, [pc, #56]	@ (8004364 <prvCheckForValidListAndQueue+0x58>)
 800432c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800432e:	4b10      	ldr	r3, [pc, #64]	@ (8004370 <prvCheckForValidListAndQueue+0x64>)
 8004330:	4a0d      	ldr	r2, [pc, #52]	@ (8004368 <prvCheckForValidListAndQueue+0x5c>)
 8004332:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004334:	2200      	movs	r2, #0
 8004336:	2110      	movs	r1, #16
 8004338:	200a      	movs	r0, #10
 800433a:	f7fe f875 	bl	8002428 <xQueueGenericCreate>
 800433e:	4603      	mov	r3, r0
 8004340:	4a07      	ldr	r2, [pc, #28]	@ (8004360 <prvCheckForValidListAndQueue+0x54>)
 8004342:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004344:	4b06      	ldr	r3, [pc, #24]	@ (8004360 <prvCheckForValidListAndQueue+0x54>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d005      	beq.n	8004358 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800434c:	4b04      	ldr	r3, [pc, #16]	@ (8004360 <prvCheckForValidListAndQueue+0x54>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4908      	ldr	r1, [pc, #32]	@ (8004374 <prvCheckForValidListAndQueue+0x68>)
 8004352:	4618      	mov	r0, r3
 8004354:	f7fe fc32 	bl	8002bbc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004358:	f000 f970 	bl	800463c <vPortExitCritical>
}
 800435c:	bf00      	nop
 800435e:	bd80      	pop	{r7, pc}
 8004360:	200001fc 	.word	0x200001fc
 8004364:	200001cc 	.word	0x200001cc
 8004368:	200001e0 	.word	0x200001e0
 800436c:	200001f4 	.word	0x200001f4
 8004370:	200001f8 	.word	0x200001f8
 8004374:	08004cb0 	.word	0x08004cb0

08004378 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	3b04      	subs	r3, #4
 8004388:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004390:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	3b04      	subs	r3, #4
 8004396:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	f023 0201 	bic.w	r2, r3, #1
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	3b04      	subs	r3, #4
 80043a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80043a8:	4a0c      	ldr	r2, [pc, #48]	@ (80043dc <pxPortInitialiseStack+0x64>)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	3b14      	subs	r3, #20
 80043b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	3b04      	subs	r3, #4
 80043be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f06f 0202 	mvn.w	r2, #2
 80043c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	3b20      	subs	r3, #32
 80043cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80043ce:	68fb      	ldr	r3, [r7, #12]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3714      	adds	r7, #20
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	080043e1 	.word	0x080043e1

080043e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80043e6:	2300      	movs	r3, #0
 80043e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80043ea:	4b13      	ldr	r3, [pc, #76]	@ (8004438 <prvTaskExitError+0x58>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80043f2:	d00b      	beq.n	800440c <prvTaskExitError+0x2c>
	__asm volatile
 80043f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f8:	f383 8811 	msr	BASEPRI, r3
 80043fc:	f3bf 8f6f 	isb	sy
 8004400:	f3bf 8f4f 	dsb	sy
 8004404:	60fb      	str	r3, [r7, #12]
}
 8004406:	bf00      	nop
 8004408:	bf00      	nop
 800440a:	e7fd      	b.n	8004408 <prvTaskExitError+0x28>
	__asm volatile
 800440c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004410:	f383 8811 	msr	BASEPRI, r3
 8004414:	f3bf 8f6f 	isb	sy
 8004418:	f3bf 8f4f 	dsb	sy
 800441c:	60bb      	str	r3, [r7, #8]
}
 800441e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004420:	bf00      	nop
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d0fc      	beq.n	8004422 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004428:	bf00      	nop
 800442a:	bf00      	nop
 800442c:	3714      	adds	r7, #20
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	20000014 	.word	0x20000014
 800443c:	00000000 	.word	0x00000000

08004440 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004440:	4b07      	ldr	r3, [pc, #28]	@ (8004460 <pxCurrentTCBConst2>)
 8004442:	6819      	ldr	r1, [r3, #0]
 8004444:	6808      	ldr	r0, [r1, #0]
 8004446:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800444a:	f380 8809 	msr	PSP, r0
 800444e:	f3bf 8f6f 	isb	sy
 8004452:	f04f 0000 	mov.w	r0, #0
 8004456:	f380 8811 	msr	BASEPRI, r0
 800445a:	4770      	bx	lr
 800445c:	f3af 8000 	nop.w

08004460 <pxCurrentTCBConst2>:
 8004460:	200000cc 	.word	0x200000cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004464:	bf00      	nop
 8004466:	bf00      	nop

08004468 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004468:	4808      	ldr	r0, [pc, #32]	@ (800448c <prvPortStartFirstTask+0x24>)
 800446a:	6800      	ldr	r0, [r0, #0]
 800446c:	6800      	ldr	r0, [r0, #0]
 800446e:	f380 8808 	msr	MSP, r0
 8004472:	f04f 0000 	mov.w	r0, #0
 8004476:	f380 8814 	msr	CONTROL, r0
 800447a:	b662      	cpsie	i
 800447c:	b661      	cpsie	f
 800447e:	f3bf 8f4f 	dsb	sy
 8004482:	f3bf 8f6f 	isb	sy
 8004486:	df00      	svc	0
 8004488:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800448a:	bf00      	nop
 800448c:	e000ed08 	.word	0xe000ed08

08004490 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004496:	4b47      	ldr	r3, [pc, #284]	@ (80045b4 <xPortStartScheduler+0x124>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a47      	ldr	r2, [pc, #284]	@ (80045b8 <xPortStartScheduler+0x128>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d10b      	bne.n	80044b8 <xPortStartScheduler+0x28>
	__asm volatile
 80044a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044a4:	f383 8811 	msr	BASEPRI, r3
 80044a8:	f3bf 8f6f 	isb	sy
 80044ac:	f3bf 8f4f 	dsb	sy
 80044b0:	60fb      	str	r3, [r7, #12]
}
 80044b2:	bf00      	nop
 80044b4:	bf00      	nop
 80044b6:	e7fd      	b.n	80044b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80044b8:	4b3e      	ldr	r3, [pc, #248]	@ (80045b4 <xPortStartScheduler+0x124>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a3f      	ldr	r2, [pc, #252]	@ (80045bc <xPortStartScheduler+0x12c>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d10b      	bne.n	80044da <xPortStartScheduler+0x4a>
	__asm volatile
 80044c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c6:	f383 8811 	msr	BASEPRI, r3
 80044ca:	f3bf 8f6f 	isb	sy
 80044ce:	f3bf 8f4f 	dsb	sy
 80044d2:	613b      	str	r3, [r7, #16]
}
 80044d4:	bf00      	nop
 80044d6:	bf00      	nop
 80044d8:	e7fd      	b.n	80044d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80044da:	4b39      	ldr	r3, [pc, #228]	@ (80045c0 <xPortStartScheduler+0x130>)
 80044dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	22ff      	movs	r2, #255	@ 0xff
 80044ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80044f4:	78fb      	ldrb	r3, [r7, #3]
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	4b31      	ldr	r3, [pc, #196]	@ (80045c4 <xPortStartScheduler+0x134>)
 8004500:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004502:	4b31      	ldr	r3, [pc, #196]	@ (80045c8 <xPortStartScheduler+0x138>)
 8004504:	2207      	movs	r2, #7
 8004506:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004508:	e009      	b.n	800451e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800450a:	4b2f      	ldr	r3, [pc, #188]	@ (80045c8 <xPortStartScheduler+0x138>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	3b01      	subs	r3, #1
 8004510:	4a2d      	ldr	r2, [pc, #180]	@ (80045c8 <xPortStartScheduler+0x138>)
 8004512:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004514:	78fb      	ldrb	r3, [r7, #3]
 8004516:	b2db      	uxtb	r3, r3
 8004518:	005b      	lsls	r3, r3, #1
 800451a:	b2db      	uxtb	r3, r3
 800451c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800451e:	78fb      	ldrb	r3, [r7, #3]
 8004520:	b2db      	uxtb	r3, r3
 8004522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004526:	2b80      	cmp	r3, #128	@ 0x80
 8004528:	d0ef      	beq.n	800450a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800452a:	4b27      	ldr	r3, [pc, #156]	@ (80045c8 <xPortStartScheduler+0x138>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f1c3 0307 	rsb	r3, r3, #7
 8004532:	2b04      	cmp	r3, #4
 8004534:	d00b      	beq.n	800454e <xPortStartScheduler+0xbe>
	__asm volatile
 8004536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800453a:	f383 8811 	msr	BASEPRI, r3
 800453e:	f3bf 8f6f 	isb	sy
 8004542:	f3bf 8f4f 	dsb	sy
 8004546:	60bb      	str	r3, [r7, #8]
}
 8004548:	bf00      	nop
 800454a:	bf00      	nop
 800454c:	e7fd      	b.n	800454a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800454e:	4b1e      	ldr	r3, [pc, #120]	@ (80045c8 <xPortStartScheduler+0x138>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	021b      	lsls	r3, r3, #8
 8004554:	4a1c      	ldr	r2, [pc, #112]	@ (80045c8 <xPortStartScheduler+0x138>)
 8004556:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004558:	4b1b      	ldr	r3, [pc, #108]	@ (80045c8 <xPortStartScheduler+0x138>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004560:	4a19      	ldr	r2, [pc, #100]	@ (80045c8 <xPortStartScheduler+0x138>)
 8004562:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	b2da      	uxtb	r2, r3
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800456c:	4b17      	ldr	r3, [pc, #92]	@ (80045cc <xPortStartScheduler+0x13c>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a16      	ldr	r2, [pc, #88]	@ (80045cc <xPortStartScheduler+0x13c>)
 8004572:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004576:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004578:	4b14      	ldr	r3, [pc, #80]	@ (80045cc <xPortStartScheduler+0x13c>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a13      	ldr	r2, [pc, #76]	@ (80045cc <xPortStartScheduler+0x13c>)
 800457e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004582:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004584:	f000 f8da 	bl	800473c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004588:	4b11      	ldr	r3, [pc, #68]	@ (80045d0 <xPortStartScheduler+0x140>)
 800458a:	2200      	movs	r2, #0
 800458c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800458e:	f000 f8f9 	bl	8004784 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004592:	4b10      	ldr	r3, [pc, #64]	@ (80045d4 <xPortStartScheduler+0x144>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a0f      	ldr	r2, [pc, #60]	@ (80045d4 <xPortStartScheduler+0x144>)
 8004598:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800459c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800459e:	f7ff ff63 	bl	8004468 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80045a2:	f7fe ff8b 	bl	80034bc <vTaskSwitchContext>
	prvTaskExitError();
 80045a6:	f7ff ff1b 	bl	80043e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3718      	adds	r7, #24
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	e000ed00 	.word	0xe000ed00
 80045b8:	410fc271 	.word	0x410fc271
 80045bc:	410fc270 	.word	0x410fc270
 80045c0:	e000e400 	.word	0xe000e400
 80045c4:	20000208 	.word	0x20000208
 80045c8:	2000020c 	.word	0x2000020c
 80045cc:	e000ed20 	.word	0xe000ed20
 80045d0:	20000014 	.word	0x20000014
 80045d4:	e000ef34 	.word	0xe000ef34

080045d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
	__asm volatile
 80045de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045e2:	f383 8811 	msr	BASEPRI, r3
 80045e6:	f3bf 8f6f 	isb	sy
 80045ea:	f3bf 8f4f 	dsb	sy
 80045ee:	607b      	str	r3, [r7, #4]
}
 80045f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80045f2:	4b10      	ldr	r3, [pc, #64]	@ (8004634 <vPortEnterCritical+0x5c>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	3301      	adds	r3, #1
 80045f8:	4a0e      	ldr	r2, [pc, #56]	@ (8004634 <vPortEnterCritical+0x5c>)
 80045fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80045fc:	4b0d      	ldr	r3, [pc, #52]	@ (8004634 <vPortEnterCritical+0x5c>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d110      	bne.n	8004626 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004604:	4b0c      	ldr	r3, [pc, #48]	@ (8004638 <vPortEnterCritical+0x60>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00b      	beq.n	8004626 <vPortEnterCritical+0x4e>
	__asm volatile
 800460e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004612:	f383 8811 	msr	BASEPRI, r3
 8004616:	f3bf 8f6f 	isb	sy
 800461a:	f3bf 8f4f 	dsb	sy
 800461e:	603b      	str	r3, [r7, #0]
}
 8004620:	bf00      	nop
 8004622:	bf00      	nop
 8004624:	e7fd      	b.n	8004622 <vPortEnterCritical+0x4a>
	}
}
 8004626:	bf00      	nop
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	20000014 	.word	0x20000014
 8004638:	e000ed04 	.word	0xe000ed04

0800463c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004642:	4b12      	ldr	r3, [pc, #72]	@ (800468c <vPortExitCritical+0x50>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10b      	bne.n	8004662 <vPortExitCritical+0x26>
	__asm volatile
 800464a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800464e:	f383 8811 	msr	BASEPRI, r3
 8004652:	f3bf 8f6f 	isb	sy
 8004656:	f3bf 8f4f 	dsb	sy
 800465a:	607b      	str	r3, [r7, #4]
}
 800465c:	bf00      	nop
 800465e:	bf00      	nop
 8004660:	e7fd      	b.n	800465e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004662:	4b0a      	ldr	r3, [pc, #40]	@ (800468c <vPortExitCritical+0x50>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	3b01      	subs	r3, #1
 8004668:	4a08      	ldr	r2, [pc, #32]	@ (800468c <vPortExitCritical+0x50>)
 800466a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800466c:	4b07      	ldr	r3, [pc, #28]	@ (800468c <vPortExitCritical+0x50>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d105      	bne.n	8004680 <vPortExitCritical+0x44>
 8004674:	2300      	movs	r3, #0
 8004676:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	f383 8811 	msr	BASEPRI, r3
}
 800467e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr
 800468c:	20000014 	.word	0x20000014

08004690 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004690:	f3ef 8009 	mrs	r0, PSP
 8004694:	f3bf 8f6f 	isb	sy
 8004698:	4b15      	ldr	r3, [pc, #84]	@ (80046f0 <pxCurrentTCBConst>)
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	f01e 0f10 	tst.w	lr, #16
 80046a0:	bf08      	it	eq
 80046a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80046a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046aa:	6010      	str	r0, [r2, #0]
 80046ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80046b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80046b4:	f380 8811 	msr	BASEPRI, r0
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	f3bf 8f6f 	isb	sy
 80046c0:	f7fe fefc 	bl	80034bc <vTaskSwitchContext>
 80046c4:	f04f 0000 	mov.w	r0, #0
 80046c8:	f380 8811 	msr	BASEPRI, r0
 80046cc:	bc09      	pop	{r0, r3}
 80046ce:	6819      	ldr	r1, [r3, #0]
 80046d0:	6808      	ldr	r0, [r1, #0]
 80046d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046d6:	f01e 0f10 	tst.w	lr, #16
 80046da:	bf08      	it	eq
 80046dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80046e0:	f380 8809 	msr	PSP, r0
 80046e4:	f3bf 8f6f 	isb	sy
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	f3af 8000 	nop.w

080046f0 <pxCurrentTCBConst>:
 80046f0:	200000cc 	.word	0x200000cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80046f4:	bf00      	nop
 80046f6:	bf00      	nop

080046f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
	__asm volatile
 80046fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004702:	f383 8811 	msr	BASEPRI, r3
 8004706:	f3bf 8f6f 	isb	sy
 800470a:	f3bf 8f4f 	dsb	sy
 800470e:	607b      	str	r3, [r7, #4]
}
 8004710:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004712:	f7fe fe39 	bl	8003388 <xTaskIncrementTick>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d003      	beq.n	8004724 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800471c:	4b06      	ldr	r3, [pc, #24]	@ (8004738 <xPortSysTickHandler+0x40>)
 800471e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004722:	601a      	str	r2, [r3, #0]
 8004724:	2300      	movs	r3, #0
 8004726:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	f383 8811 	msr	BASEPRI, r3
}
 800472e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004730:	bf00      	nop
 8004732:	3708      	adds	r7, #8
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	e000ed04 	.word	0xe000ed04

0800473c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800473c:	b480      	push	{r7}
 800473e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004740:	4b0b      	ldr	r3, [pc, #44]	@ (8004770 <vPortSetupTimerInterrupt+0x34>)
 8004742:	2200      	movs	r2, #0
 8004744:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004746:	4b0b      	ldr	r3, [pc, #44]	@ (8004774 <vPortSetupTimerInterrupt+0x38>)
 8004748:	2200      	movs	r2, #0
 800474a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800474c:	4b0a      	ldr	r3, [pc, #40]	@ (8004778 <vPortSetupTimerInterrupt+0x3c>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a0a      	ldr	r2, [pc, #40]	@ (800477c <vPortSetupTimerInterrupt+0x40>)
 8004752:	fba2 2303 	umull	r2, r3, r2, r3
 8004756:	099b      	lsrs	r3, r3, #6
 8004758:	4a09      	ldr	r2, [pc, #36]	@ (8004780 <vPortSetupTimerInterrupt+0x44>)
 800475a:	3b01      	subs	r3, #1
 800475c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800475e:	4b04      	ldr	r3, [pc, #16]	@ (8004770 <vPortSetupTimerInterrupt+0x34>)
 8004760:	2207      	movs	r2, #7
 8004762:	601a      	str	r2, [r3, #0]
}
 8004764:	bf00      	nop
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	e000e010 	.word	0xe000e010
 8004774:	e000e018 	.word	0xe000e018
 8004778:	20000008 	.word	0x20000008
 800477c:	10624dd3 	.word	0x10624dd3
 8004780:	e000e014 	.word	0xe000e014

08004784 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004784:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004794 <vPortEnableVFP+0x10>
 8004788:	6801      	ldr	r1, [r0, #0]
 800478a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800478e:	6001      	str	r1, [r0, #0]
 8004790:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004792:	bf00      	nop
 8004794:	e000ed88 	.word	0xe000ed88

08004798 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800479e:	f3ef 8305 	mrs	r3, IPSR
 80047a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2b0f      	cmp	r3, #15
 80047a8:	d915      	bls.n	80047d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80047aa:	4a18      	ldr	r2, [pc, #96]	@ (800480c <vPortValidateInterruptPriority+0x74>)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	4413      	add	r3, r2
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80047b4:	4b16      	ldr	r3, [pc, #88]	@ (8004810 <vPortValidateInterruptPriority+0x78>)
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	7afa      	ldrb	r2, [r7, #11]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d20b      	bcs.n	80047d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80047be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047c2:	f383 8811 	msr	BASEPRI, r3
 80047c6:	f3bf 8f6f 	isb	sy
 80047ca:	f3bf 8f4f 	dsb	sy
 80047ce:	607b      	str	r3, [r7, #4]
}
 80047d0:	bf00      	nop
 80047d2:	bf00      	nop
 80047d4:	e7fd      	b.n	80047d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80047d6:	4b0f      	ldr	r3, [pc, #60]	@ (8004814 <vPortValidateInterruptPriority+0x7c>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80047de:	4b0e      	ldr	r3, [pc, #56]	@ (8004818 <vPortValidateInterruptPriority+0x80>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d90b      	bls.n	80047fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80047e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ea:	f383 8811 	msr	BASEPRI, r3
 80047ee:	f3bf 8f6f 	isb	sy
 80047f2:	f3bf 8f4f 	dsb	sy
 80047f6:	603b      	str	r3, [r7, #0]
}
 80047f8:	bf00      	nop
 80047fa:	bf00      	nop
 80047fc:	e7fd      	b.n	80047fa <vPortValidateInterruptPriority+0x62>
	}
 80047fe:	bf00      	nop
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	e000e3f0 	.word	0xe000e3f0
 8004810:	20000208 	.word	0x20000208
 8004814:	e000ed0c 	.word	0xe000ed0c
 8004818:	2000020c 	.word	0x2000020c

0800481c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b08a      	sub	sp, #40	@ 0x28
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004824:	2300      	movs	r3, #0
 8004826:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004828:	f7fe fd06 	bl	8003238 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800482c:	4b5c      	ldr	r3, [pc, #368]	@ (80049a0 <pvPortMalloc+0x184>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004834:	f000 f924 	bl	8004a80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004838:	4b5a      	ldr	r3, [pc, #360]	@ (80049a4 <pvPortMalloc+0x188>)
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4013      	ands	r3, r2
 8004840:	2b00      	cmp	r3, #0
 8004842:	f040 8095 	bne.w	8004970 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d01e      	beq.n	800488a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800484c:	2208      	movs	r2, #8
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4413      	add	r3, r2
 8004852:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f003 0307 	and.w	r3, r3, #7
 800485a:	2b00      	cmp	r3, #0
 800485c:	d015      	beq.n	800488a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f023 0307 	bic.w	r3, r3, #7
 8004864:	3308      	adds	r3, #8
 8004866:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f003 0307 	and.w	r3, r3, #7
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00b      	beq.n	800488a <pvPortMalloc+0x6e>
	__asm volatile
 8004872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004876:	f383 8811 	msr	BASEPRI, r3
 800487a:	f3bf 8f6f 	isb	sy
 800487e:	f3bf 8f4f 	dsb	sy
 8004882:	617b      	str	r3, [r7, #20]
}
 8004884:	bf00      	nop
 8004886:	bf00      	nop
 8004888:	e7fd      	b.n	8004886 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d06f      	beq.n	8004970 <pvPortMalloc+0x154>
 8004890:	4b45      	ldr	r3, [pc, #276]	@ (80049a8 <pvPortMalloc+0x18c>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	429a      	cmp	r2, r3
 8004898:	d86a      	bhi.n	8004970 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800489a:	4b44      	ldr	r3, [pc, #272]	@ (80049ac <pvPortMalloc+0x190>)
 800489c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800489e:	4b43      	ldr	r3, [pc, #268]	@ (80049ac <pvPortMalloc+0x190>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80048a4:	e004      	b.n	80048b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80048a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80048aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80048b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d903      	bls.n	80048c2 <pvPortMalloc+0xa6>
 80048ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1f1      	bne.n	80048a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80048c2:	4b37      	ldr	r3, [pc, #220]	@ (80049a0 <pvPortMalloc+0x184>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d051      	beq.n	8004970 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80048cc:	6a3b      	ldr	r3, [r7, #32]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2208      	movs	r2, #8
 80048d2:	4413      	add	r3, r2
 80048d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80048d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	6a3b      	ldr	r3, [r7, #32]
 80048dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80048de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e0:	685a      	ldr	r2, [r3, #4]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	1ad2      	subs	r2, r2, r3
 80048e6:	2308      	movs	r3, #8
 80048e8:	005b      	lsls	r3, r3, #1
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d920      	bls.n	8004930 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80048ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4413      	add	r3, r2
 80048f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	f003 0307 	and.w	r3, r3, #7
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00b      	beq.n	8004918 <pvPortMalloc+0xfc>
	__asm volatile
 8004900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004904:	f383 8811 	msr	BASEPRI, r3
 8004908:	f3bf 8f6f 	isb	sy
 800490c:	f3bf 8f4f 	dsb	sy
 8004910:	613b      	str	r3, [r7, #16]
}
 8004912:	bf00      	nop
 8004914:	bf00      	nop
 8004916:	e7fd      	b.n	8004914 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	1ad2      	subs	r2, r2, r3
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800492a:	69b8      	ldr	r0, [r7, #24]
 800492c:	f000 f90a 	bl	8004b44 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004930:	4b1d      	ldr	r3, [pc, #116]	@ (80049a8 <pvPortMalloc+0x18c>)
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	4a1b      	ldr	r2, [pc, #108]	@ (80049a8 <pvPortMalloc+0x18c>)
 800493c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800493e:	4b1a      	ldr	r3, [pc, #104]	@ (80049a8 <pvPortMalloc+0x18c>)
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	4b1b      	ldr	r3, [pc, #108]	@ (80049b0 <pvPortMalloc+0x194>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	429a      	cmp	r2, r3
 8004948:	d203      	bcs.n	8004952 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800494a:	4b17      	ldr	r3, [pc, #92]	@ (80049a8 <pvPortMalloc+0x18c>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a18      	ldr	r2, [pc, #96]	@ (80049b0 <pvPortMalloc+0x194>)
 8004950:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	4b13      	ldr	r3, [pc, #76]	@ (80049a4 <pvPortMalloc+0x188>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	431a      	orrs	r2, r3
 800495c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004962:	2200      	movs	r2, #0
 8004964:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004966:	4b13      	ldr	r3, [pc, #76]	@ (80049b4 <pvPortMalloc+0x198>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	3301      	adds	r3, #1
 800496c:	4a11      	ldr	r2, [pc, #68]	@ (80049b4 <pvPortMalloc+0x198>)
 800496e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004970:	f7fe fc70 	bl	8003254 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	f003 0307 	and.w	r3, r3, #7
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00b      	beq.n	8004996 <pvPortMalloc+0x17a>
	__asm volatile
 800497e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004982:	f383 8811 	msr	BASEPRI, r3
 8004986:	f3bf 8f6f 	isb	sy
 800498a:	f3bf 8f4f 	dsb	sy
 800498e:	60fb      	str	r3, [r7, #12]
}
 8004990:	bf00      	nop
 8004992:	bf00      	nop
 8004994:	e7fd      	b.n	8004992 <pvPortMalloc+0x176>
	return pvReturn;
 8004996:	69fb      	ldr	r3, [r7, #28]
}
 8004998:	4618      	mov	r0, r3
 800499a:	3728      	adds	r7, #40	@ 0x28
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	20003e18 	.word	0x20003e18
 80049a4:	20003e2c 	.word	0x20003e2c
 80049a8:	20003e1c 	.word	0x20003e1c
 80049ac:	20003e10 	.word	0x20003e10
 80049b0:	20003e20 	.word	0x20003e20
 80049b4:	20003e24 	.word	0x20003e24

080049b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d04f      	beq.n	8004a6a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80049ca:	2308      	movs	r3, #8
 80049cc:	425b      	negs	r3, r3
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	4413      	add	r3, r2
 80049d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	685a      	ldr	r2, [r3, #4]
 80049dc:	4b25      	ldr	r3, [pc, #148]	@ (8004a74 <vPortFree+0xbc>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4013      	ands	r3, r2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10b      	bne.n	80049fe <vPortFree+0x46>
	__asm volatile
 80049e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ea:	f383 8811 	msr	BASEPRI, r3
 80049ee:	f3bf 8f6f 	isb	sy
 80049f2:	f3bf 8f4f 	dsb	sy
 80049f6:	60fb      	str	r3, [r7, #12]
}
 80049f8:	bf00      	nop
 80049fa:	bf00      	nop
 80049fc:	e7fd      	b.n	80049fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00b      	beq.n	8004a1e <vPortFree+0x66>
	__asm volatile
 8004a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a0a:	f383 8811 	msr	BASEPRI, r3
 8004a0e:	f3bf 8f6f 	isb	sy
 8004a12:	f3bf 8f4f 	dsb	sy
 8004a16:	60bb      	str	r3, [r7, #8]
}
 8004a18:	bf00      	nop
 8004a1a:	bf00      	nop
 8004a1c:	e7fd      	b.n	8004a1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	685a      	ldr	r2, [r3, #4]
 8004a22:	4b14      	ldr	r3, [pc, #80]	@ (8004a74 <vPortFree+0xbc>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4013      	ands	r3, r2
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d01e      	beq.n	8004a6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d11a      	bne.n	8004a6a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	685a      	ldr	r2, [r3, #4]
 8004a38:	4b0e      	ldr	r3, [pc, #56]	@ (8004a74 <vPortFree+0xbc>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	43db      	mvns	r3, r3
 8004a3e:	401a      	ands	r2, r3
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004a44:	f7fe fbf8 	bl	8003238 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	685a      	ldr	r2, [r3, #4]
 8004a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8004a78 <vPortFree+0xc0>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4413      	add	r3, r2
 8004a52:	4a09      	ldr	r2, [pc, #36]	@ (8004a78 <vPortFree+0xc0>)
 8004a54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004a56:	6938      	ldr	r0, [r7, #16]
 8004a58:	f000 f874 	bl	8004b44 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004a5c:	4b07      	ldr	r3, [pc, #28]	@ (8004a7c <vPortFree+0xc4>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	3301      	adds	r3, #1
 8004a62:	4a06      	ldr	r2, [pc, #24]	@ (8004a7c <vPortFree+0xc4>)
 8004a64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004a66:	f7fe fbf5 	bl	8003254 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004a6a:	bf00      	nop
 8004a6c:	3718      	adds	r7, #24
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	20003e2c 	.word	0x20003e2c
 8004a78:	20003e1c 	.word	0x20003e1c
 8004a7c:	20003e28 	.word	0x20003e28

08004a80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a86:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004a8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004a8c:	4b27      	ldr	r3, [pc, #156]	@ (8004b2c <prvHeapInit+0xac>)
 8004a8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f003 0307 	and.w	r3, r3, #7
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00c      	beq.n	8004ab4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	3307      	adds	r3, #7
 8004a9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f023 0307 	bic.w	r3, r3, #7
 8004aa6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	4a1f      	ldr	r2, [pc, #124]	@ (8004b2c <prvHeapInit+0xac>)
 8004ab0:	4413      	add	r3, r2
 8004ab2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004ab8:	4a1d      	ldr	r2, [pc, #116]	@ (8004b30 <prvHeapInit+0xb0>)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004abe:	4b1c      	ldr	r3, [pc, #112]	@ (8004b30 <prvHeapInit+0xb0>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	4413      	add	r3, r2
 8004aca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004acc:	2208      	movs	r2, #8
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	1a9b      	subs	r3, r3, r2
 8004ad2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f023 0307 	bic.w	r3, r3, #7
 8004ada:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	4a15      	ldr	r2, [pc, #84]	@ (8004b34 <prvHeapInit+0xb4>)
 8004ae0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004ae2:	4b14      	ldr	r3, [pc, #80]	@ (8004b34 <prvHeapInit+0xb4>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004aea:	4b12      	ldr	r3, [pc, #72]	@ (8004b34 <prvHeapInit+0xb4>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2200      	movs	r2, #0
 8004af0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	1ad2      	subs	r2, r2, r3
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004b00:	4b0c      	ldr	r3, [pc, #48]	@ (8004b34 <prvHeapInit+0xb4>)
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	4a0a      	ldr	r2, [pc, #40]	@ (8004b38 <prvHeapInit+0xb8>)
 8004b0e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	4a09      	ldr	r2, [pc, #36]	@ (8004b3c <prvHeapInit+0xbc>)
 8004b16:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004b18:	4b09      	ldr	r3, [pc, #36]	@ (8004b40 <prvHeapInit+0xc0>)
 8004b1a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004b1e:	601a      	str	r2, [r3, #0]
}
 8004b20:	bf00      	nop
 8004b22:	3714      	adds	r7, #20
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr
 8004b2c:	20000210 	.word	0x20000210
 8004b30:	20003e10 	.word	0x20003e10
 8004b34:	20003e18 	.word	0x20003e18
 8004b38:	20003e20 	.word	0x20003e20
 8004b3c:	20003e1c 	.word	0x20003e1c
 8004b40:	20003e2c 	.word	0x20003e2c

08004b44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004b4c:	4b28      	ldr	r3, [pc, #160]	@ (8004bf0 <prvInsertBlockIntoFreeList+0xac>)
 8004b4e:	60fb      	str	r3, [r7, #12]
 8004b50:	e002      	b.n	8004b58 <prvInsertBlockIntoFreeList+0x14>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	60fb      	str	r3, [r7, #12]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d8f7      	bhi.n	8004b52 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d108      	bne.n	8004b86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	441a      	add	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	441a      	add	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d118      	bne.n	8004bcc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	4b15      	ldr	r3, [pc, #84]	@ (8004bf4 <prvInsertBlockIntoFreeList+0xb0>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d00d      	beq.n	8004bc2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685a      	ldr	r2, [r3, #4]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	441a      	add	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	e008      	b.n	8004bd4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8004bf4 <prvInsertBlockIntoFreeList+0xb0>)
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	601a      	str	r2, [r3, #0]
 8004bca:	e003      	b.n	8004bd4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d002      	beq.n	8004be2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004be2:	bf00      	nop
 8004be4:	3714      	adds	r7, #20
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	20003e10 	.word	0x20003e10
 8004bf4:	20003e18 	.word	0x20003e18

08004bf8 <memset>:
 8004bf8:	4402      	add	r2, r0
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d100      	bne.n	8004c02 <memset+0xa>
 8004c00:	4770      	bx	lr
 8004c02:	f803 1b01 	strb.w	r1, [r3], #1
 8004c06:	e7f9      	b.n	8004bfc <memset+0x4>

08004c08 <__libc_init_array>:
 8004c08:	b570      	push	{r4, r5, r6, lr}
 8004c0a:	4d0d      	ldr	r5, [pc, #52]	@ (8004c40 <__libc_init_array+0x38>)
 8004c0c:	4c0d      	ldr	r4, [pc, #52]	@ (8004c44 <__libc_init_array+0x3c>)
 8004c0e:	1b64      	subs	r4, r4, r5
 8004c10:	10a4      	asrs	r4, r4, #2
 8004c12:	2600      	movs	r6, #0
 8004c14:	42a6      	cmp	r6, r4
 8004c16:	d109      	bne.n	8004c2c <__libc_init_array+0x24>
 8004c18:	4d0b      	ldr	r5, [pc, #44]	@ (8004c48 <__libc_init_array+0x40>)
 8004c1a:	4c0c      	ldr	r4, [pc, #48]	@ (8004c4c <__libc_init_array+0x44>)
 8004c1c:	f000 f826 	bl	8004c6c <_init>
 8004c20:	1b64      	subs	r4, r4, r5
 8004c22:	10a4      	asrs	r4, r4, #2
 8004c24:	2600      	movs	r6, #0
 8004c26:	42a6      	cmp	r6, r4
 8004c28:	d105      	bne.n	8004c36 <__libc_init_array+0x2e>
 8004c2a:	bd70      	pop	{r4, r5, r6, pc}
 8004c2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c30:	4798      	blx	r3
 8004c32:	3601      	adds	r6, #1
 8004c34:	e7ee      	b.n	8004c14 <__libc_init_array+0xc>
 8004c36:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c3a:	4798      	blx	r3
 8004c3c:	3601      	adds	r6, #1
 8004c3e:	e7f2      	b.n	8004c26 <__libc_init_array+0x1e>
 8004c40:	08004cd0 	.word	0x08004cd0
 8004c44:	08004cd0 	.word	0x08004cd0
 8004c48:	08004cd0 	.word	0x08004cd0
 8004c4c:	08004cd4 	.word	0x08004cd4

08004c50 <memcpy>:
 8004c50:	440a      	add	r2, r1
 8004c52:	4291      	cmp	r1, r2
 8004c54:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004c58:	d100      	bne.n	8004c5c <memcpy+0xc>
 8004c5a:	4770      	bx	lr
 8004c5c:	b510      	push	{r4, lr}
 8004c5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c66:	4291      	cmp	r1, r2
 8004c68:	d1f9      	bne.n	8004c5e <memcpy+0xe>
 8004c6a:	bd10      	pop	{r4, pc}

08004c6c <_init>:
 8004c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c6e:	bf00      	nop
 8004c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c72:	bc08      	pop	{r3}
 8004c74:	469e      	mov	lr, r3
 8004c76:	4770      	bx	lr

08004c78 <_fini>:
 8004c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c7a:	bf00      	nop
 8004c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c7e:	bc08      	pop	{r3}
 8004c80:	469e      	mov	lr, r3
 8004c82:	4770      	bx	lr
